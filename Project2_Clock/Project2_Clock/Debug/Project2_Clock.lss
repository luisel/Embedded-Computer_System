
Project2_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000119c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  0000119c  00001230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000fc  008000fc  000012cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ebc  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000528  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000672  00000000  00000000  000028c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00002f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000394  00000000  00000000  00003400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f95  00000000  00000000  00003794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00004729  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 30       	cpi	r26, 0x0D	; 13
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bc 05 	call	0xb78	; 0xb78 <main>
      8a:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <print_time>:
		return 1;
	return 0;
}

void print_time() {
	if (hrs<10 && mins < 10 && secs < 10)
      92:	80 91 66 00 	lds	r24, 0x0066
      96:	90 91 67 00 	lds	r25, 0x0067
      9a:	8a 30       	cpi	r24, 0x0A	; 10
      9c:	91 05       	cpc	r25, r1
      9e:	0c f0       	brlt	.+2      	; 0xa2 <print_time+0x10>
      a0:	63 c0       	rjmp	.+198    	; 0x168 <print_time+0xd6>
      a2:	20 91 68 00 	lds	r18, 0x0068
      a6:	30 91 69 00 	lds	r19, 0x0069
      aa:	2a 30       	cpi	r18, 0x0A	; 10
      ac:	31 05       	cpc	r19, r1
      ae:	0c f0       	brlt	.+2      	; 0xb2 <print_time+0x20>
      b0:	0a c1       	rjmp	.+532    	; 0x2c6 <print_time+0x234>
      b2:	40 91 6a 00 	lds	r20, 0x006A
      b6:	50 91 6b 00 	lds	r21, 0x006B
      ba:	4a 30       	cpi	r20, 0x0A	; 10
      bc:	51 05       	cpc	r21, r1
      be:	0c f0       	brlt	.+2      	; 0xc2 <print_time+0x30>
      c0:	fa c0       	rjmp	.+500    	; 0x2b6 <print_time+0x224>
	{
		sprintf(buf,"0%d:0%d:0%d",hrs,mins,secs);
      c2:	5f 93       	push	r21
      c4:	4f 93       	push	r20
      c6:	3f 93       	push	r19
      c8:	2f 93       	push	r18
      ca:	9f 93       	push	r25
      cc:	8f 93       	push	r24
      ce:	8c e6       	ldi	r24, 0x6C	; 108
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	9f 93       	push	r25
      d4:	8f 93       	push	r24
      d6:	8c ef       	ldi	r24, 0xFC	; 252
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	9f 93       	push	r25
      dc:	8f 93       	push	r24
      de:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <sprintf>
      e2:	8d b7       	in	r24, 0x3d	; 61
      e4:	9e b7       	in	r25, 0x3e	; 62
      e6:	0a 96       	adiw	r24, 0x0a	; 10
      e8:	0f b6       	in	r0, 0x3f	; 63
      ea:	f8 94       	cli
      ec:	9e bf       	out	0x3e, r25	; 62
      ee:	0f be       	out	0x3f, r0	; 63
      f0:	8d bf       	out	0x3d, r24	; 61
      f2:	dc c0       	rjmp	.+440    	; 0x2ac <print_time+0x21a>
	}
	else if (hrs <10 && mins<10 && secs >=10)
	{
		sprintf(buf,"0%d:0%d:%2d",hrs,mins,secs);
      f4:	5f 93       	push	r21
      f6:	4f 93       	push	r20
      f8:	3f 93       	push	r19
      fa:	2f 93       	push	r18
      fc:	9f 93       	push	r25
      fe:	8f 93       	push	r24
     100:	88 e7       	ldi	r24, 0x78	; 120
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	9f 93       	push	r25
     106:	8f 93       	push	r24
     108:	8c ef       	ldi	r24, 0xFC	; 252
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	9f 93       	push	r25
     10e:	8f 93       	push	r24
     110:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <sprintf>
     114:	8d b7       	in	r24, 0x3d	; 61
     116:	9e b7       	in	r25, 0x3e	; 62
     118:	0a 96       	adiw	r24, 0x0a	; 10
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	9e bf       	out	0x3e, r25	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	8d bf       	out	0x3d, r24	; 61
     124:	c3 c0       	rjmp	.+390    	; 0x2ac <print_time+0x21a>
	}
	else if(hrs <10 && mins>=10 && secs >=10)
     126:	40 91 6a 00 	lds	r20, 0x006A
     12a:	50 91 6b 00 	lds	r21, 0x006B
     12e:	4a 30       	cpi	r20, 0x0A	; 10
     130:	51 05       	cpc	r21, r1
     132:	0c f4       	brge	.+2      	; 0x136 <print_time+0xa4>
     134:	5b c0       	rjmp	.+182    	; 0x1ec <print_time+0x15a>
	{
		sprintf(buf,"0%d:%2d:%2d",hrs,mins,secs);
     136:	5f 93       	push	r21
     138:	4f 93       	push	r20
     13a:	3f 93       	push	r19
     13c:	2f 93       	push	r18
     13e:	9f 93       	push	r25
     140:	8f 93       	push	r24
     142:	84 e8       	ldi	r24, 0x84	; 132
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	9f 93       	push	r25
     148:	8f 93       	push	r24
     14a:	8c ef       	ldi	r24, 0xFC	; 252
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	9f 93       	push	r25
     150:	8f 93       	push	r24
     152:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <sprintf>
     156:	8d b7       	in	r24, 0x3d	; 61
     158:	9e b7       	in	r25, 0x3e	; 62
     15a:	0a 96       	adiw	r24, 0x0a	; 10
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	f8 94       	cli
     160:	9e bf       	out	0x3e, r25	; 62
     162:	0f be       	out	0x3f, r0	; 63
     164:	8d bf       	out	0x3d, r24	; 61
     166:	a2 c0       	rjmp	.+324    	; 0x2ac <print_time+0x21a>
	}
	else if(hrs>=10 && mins<10 && secs >=10)
     168:	20 91 68 00 	lds	r18, 0x0068
     16c:	30 91 69 00 	lds	r19, 0x0069
     170:	2a 30       	cpi	r18, 0x0A	; 10
     172:	31 05       	cpc	r19, r1
     174:	0c f0       	brlt	.+2      	; 0x178 <print_time+0xe6>
     176:	b5 c0       	rjmp	.+362    	; 0x2e2 <print_time+0x250>
     178:	40 91 6a 00 	lds	r20, 0x006A
     17c:	50 91 6b 00 	lds	r21, 0x006B
     180:	4a 30       	cpi	r20, 0x0A	; 10
     182:	51 05       	cpc	r21, r1
     184:	0c f4       	brge	.+2      	; 0x188 <print_time+0xf6>
     186:	a8 c0       	rjmp	.+336    	; 0x2d8 <print_time+0x246>
	{
		sprintf(buf,"%2d:0%d:%2d",hrs,mins,secs);
     188:	5f 93       	push	r21
     18a:	4f 93       	push	r20
     18c:	3f 93       	push	r19
     18e:	2f 93       	push	r18
     190:	9f 93       	push	r25
     192:	8f 93       	push	r24
     194:	80 e9       	ldi	r24, 0x90	; 144
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	9f 93       	push	r25
     19a:	8f 93       	push	r24
     19c:	8c ef       	ldi	r24, 0xFC	; 252
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	9f 93       	push	r25
     1a2:	8f 93       	push	r24
     1a4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <sprintf>
     1a8:	8d b7       	in	r24, 0x3d	; 61
     1aa:	9e b7       	in	r25, 0x3e	; 62
     1ac:	0a 96       	adiw	r24, 0x0a	; 10
     1ae:	0f b6       	in	r0, 0x3f	; 63
     1b0:	f8 94       	cli
     1b2:	9e bf       	out	0x3e, r25	; 62
     1b4:	0f be       	out	0x3f, r0	; 63
     1b6:	8d bf       	out	0x3d, r24	; 61
     1b8:	79 c0       	rjmp	.+242    	; 0x2ac <print_time+0x21a>
	}
	else if(hrs>=10 && mins>=10 && secs <10)
	{
		sprintf(buf,"%2d:%2d:0%d",hrs,mins,secs);
     1ba:	5f 93       	push	r21
     1bc:	4f 93       	push	r20
     1be:	3f 93       	push	r19
     1c0:	2f 93       	push	r18
     1c2:	9f 93       	push	r25
     1c4:	8f 93       	push	r24
     1c6:	8c e9       	ldi	r24, 0x9C	; 156
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	9f 93       	push	r25
     1cc:	8f 93       	push	r24
     1ce:	8c ef       	ldi	r24, 0xFC	; 252
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	9f 93       	push	r25
     1d4:	8f 93       	push	r24
     1d6:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <sprintf>
     1da:	8d b7       	in	r24, 0x3d	; 61
     1dc:	9e b7       	in	r25, 0x3e	; 62
     1de:	0a 96       	adiw	r24, 0x0a	; 10
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	9e bf       	out	0x3e, r25	; 62
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	8d bf       	out	0x3d, r24	; 61
     1ea:	60 c0       	rjmp	.+192    	; 0x2ac <print_time+0x21a>
	}
	else if(hrs <10 && mins>=10 && secs < 10)
     1ec:	40 91 6a 00 	lds	r20, 0x006A
     1f0:	50 91 6b 00 	lds	r21, 0x006B
     1f4:	4a 30       	cpi	r20, 0x0A	; 10
     1f6:	51 05       	cpc	r21, r1
     1f8:	cc f5       	brge	.+114    	; 0x26c <print_time+0x1da>
	{
		sprintf(buf,"0%d:%2d:0%d",hrs,mins,secs);
     1fa:	5f 93       	push	r21
     1fc:	4f 93       	push	r20
     1fe:	3f 93       	push	r19
     200:	2f 93       	push	r18
     202:	9f 93       	push	r25
     204:	8f 93       	push	r24
     206:	88 ea       	ldi	r24, 0xA8	; 168
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	9f 93       	push	r25
     20c:	8f 93       	push	r24
     20e:	8c ef       	ldi	r24, 0xFC	; 252
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	9f 93       	push	r25
     214:	8f 93       	push	r24
     216:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <sprintf>
     21a:	8d b7       	in	r24, 0x3d	; 61
     21c:	9e b7       	in	r25, 0x3e	; 62
     21e:	0a 96       	adiw	r24, 0x0a	; 10
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	f8 94       	cli
     224:	9e bf       	out	0x3e, r25	; 62
     226:	0f be       	out	0x3f, r0	; 63
     228:	8d bf       	out	0x3d, r24	; 61
     22a:	40 c0       	rjmp	.+128    	; 0x2ac <print_time+0x21a>
	}
	else if(hrs>=10 && mins<10 && secs <10)
     22c:	40 91 6a 00 	lds	r20, 0x006A
     230:	50 91 6b 00 	lds	r21, 0x006B
     234:	4a 30       	cpi	r20, 0x0A	; 10
     236:	51 05       	cpc	r21, r1
     238:	cc f4       	brge	.+50     	; 0x26c <print_time+0x1da>
	{
		sprintf(buf,"%2d:0%d:0%d",hrs,mins,secs);
     23a:	5f 93       	push	r21
     23c:	4f 93       	push	r20
     23e:	3f 93       	push	r19
     240:	2f 93       	push	r18
     242:	9f 93       	push	r25
     244:	8f 93       	push	r24
     246:	84 eb       	ldi	r24, 0xB4	; 180
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	9f 93       	push	r25
     24c:	8f 93       	push	r24
     24e:	8c ef       	ldi	r24, 0xFC	; 252
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	9f 93       	push	r25
     254:	8f 93       	push	r24
     256:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <sprintf>
     25a:	8d b7       	in	r24, 0x3d	; 61
     25c:	9e b7       	in	r25, 0x3e	; 62
     25e:	0a 96       	adiw	r24, 0x0a	; 10
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	f8 94       	cli
     264:	9e bf       	out	0x3e, r25	; 62
     266:	0f be       	out	0x3f, r0	; 63
     268:	8d bf       	out	0x3d, r24	; 61
     26a:	20 c0       	rjmp	.+64     	; 0x2ac <print_time+0x21a>
	}
	else {
		sprintf(buf,"%2d:%2d:%2d",hrs,mins,secs);
     26c:	20 91 6b 00 	lds	r18, 0x006B
     270:	2f 93       	push	r18
     272:	20 91 6a 00 	lds	r18, 0x006A
     276:	2f 93       	push	r18
     278:	20 91 69 00 	lds	r18, 0x0069
     27c:	2f 93       	push	r18
     27e:	20 91 68 00 	lds	r18, 0x0068
     282:	2f 93       	push	r18
     284:	9f 93       	push	r25
     286:	8f 93       	push	r24
     288:	80 ec       	ldi	r24, 0xC0	; 192
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	9f 93       	push	r25
     28e:	8f 93       	push	r24
     290:	8c ef       	ldi	r24, 0xFC	; 252
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	9f 93       	push	r25
     296:	8f 93       	push	r24
     298:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <sprintf>
     29c:	8d b7       	in	r24, 0x3d	; 61
     29e:	9e b7       	in	r25, 0x3e	; 62
     2a0:	0a 96       	adiw	r24, 0x0a	; 10
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	9e bf       	out	0x3e, r25	; 62
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	8d bf       	out	0x3d, r24	; 61
	}
	
	puts_lcd2(buf);
     2ac:	8c ef       	ldi	r24, 0xFC	; 252
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 99 05 	call	0xb32	; 0xb32 <puts_lcd2>
     2b4:	08 95       	ret
void print_time() {
	if (hrs<10 && mins < 10 && secs < 10)
	{
		sprintf(buf,"0%d:0%d:0%d",hrs,mins,secs);
	}
	else if (hrs <10 && mins<10 && secs >=10)
     2b6:	40 91 6a 00 	lds	r20, 0x006A
     2ba:	50 91 6b 00 	lds	r21, 0x006B
     2be:	4a 30       	cpi	r20, 0x0A	; 10
     2c0:	51 05       	cpc	r21, r1
     2c2:	34 f0       	brlt	.+12     	; 0x2d0 <print_time+0x23e>
     2c4:	17 cf       	rjmp	.-466    	; 0xf4 <print_time+0x62>
	{
		sprintf(buf,"0%d:0%d:%2d",hrs,mins,secs);
	}
	else if(hrs <10 && mins>=10 && secs >=10)
     2c6:	2a 30       	cpi	r18, 0x0A	; 10
     2c8:	31 05       	cpc	r19, r1
     2ca:	0c f0       	brlt	.+2      	; 0x2ce <print_time+0x23c>
     2cc:	2c cf       	rjmp	.-424    	; 0x126 <print_time+0x94>
     2ce:	ce cf       	rjmp	.-100    	; 0x26c <print_time+0x1da>
	}
	else if(hrs>=10 && mins>=10 && secs <10)
	{
		sprintf(buf,"%2d:%2d:0%d",hrs,mins,secs);
	}
	else if(hrs <10 && mins>=10 && secs < 10)
     2d0:	2a 30       	cpi	r18, 0x0A	; 10
     2d2:	31 05       	cpc	r19, r1
     2d4:	5c f2       	brlt	.-106    	; 0x26c <print_time+0x1da>
     2d6:	8a cf       	rjmp	.-236    	; 0x1ec <print_time+0x15a>
	{
		sprintf(buf,"0%d:%2d:0%d",hrs,mins,secs);
	}
	else if(hrs>=10 && mins<10 && secs <10)
     2d8:	2a 30       	cpi	r18, 0x0A	; 10
     2da:	31 05       	cpc	r19, r1
     2dc:	0c f4       	brge	.+2      	; 0x2e0 <print_time+0x24e>
     2de:	a6 cf       	rjmp	.-180    	; 0x22c <print_time+0x19a>
     2e0:	c5 cf       	rjmp	.-118    	; 0x26c <print_time+0x1da>
	}
	else if(hrs>=10 && mins<10 && secs >=10)
	{
		sprintf(buf,"%2d:0%d:%2d",hrs,mins,secs);
	}
	else if(hrs>=10 && mins>=10 && secs <10)
     2e2:	40 91 6a 00 	lds	r20, 0x006A
     2e6:	50 91 6b 00 	lds	r21, 0x006B
     2ea:	4a 30       	cpi	r20, 0x0A	; 10
     2ec:	51 05       	cpc	r21, r1
     2ee:	0c f0       	brlt	.+2      	; 0x2f2 <print_time+0x260>
     2f0:	bd cf       	rjmp	.-134    	; 0x26c <print_time+0x1da>
     2f2:	63 cf       	rjmp	.-314    	; 0x1ba <print_time+0x128>

000002f4 <print_date>:
  
  
}
void print_date() {
  
  	if (month<10 && day < 10)
     2f4:	80 91 64 00 	lds	r24, 0x0064
     2f8:	90 91 65 00 	lds	r25, 0x0065
     2fc:	8a 30       	cpi	r24, 0x0A	; 10
     2fe:	91 05       	cpc	r25, r1
     300:	0c f0       	brlt	.+2      	; 0x304 <print_date+0x10>
     302:	41 c0       	rjmp	.+130    	; 0x386 <print_date+0x92>
     304:	20 91 62 00 	lds	r18, 0x0062
     308:	30 91 63 00 	lds	r19, 0x0063
     30c:	2a 30       	cpi	r18, 0x0A	; 10
     30e:	31 05       	cpc	r19, r1
     310:	ec f4       	brge	.+58     	; 0x34c <print_date+0x58>
	{
		sprintf(buf,"0%d/0%d/%4d",month,day,year);
     312:	40 91 61 00 	lds	r20, 0x0061
     316:	4f 93       	push	r20
     318:	40 91 60 00 	lds	r20, 0x0060
     31c:	4f 93       	push	r20
     31e:	3f 93       	push	r19
     320:	2f 93       	push	r18
     322:	9f 93       	push	r25
     324:	8f 93       	push	r24
     326:	8c ec       	ldi	r24, 0xCC	; 204
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	9f 93       	push	r25
     32c:	8f 93       	push	r24
     32e:	8c ef       	ldi	r24, 0xFC	; 252
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	9f 93       	push	r25
     334:	8f 93       	push	r24
     336:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <sprintf>
     33a:	8d b7       	in	r24, 0x3d	; 61
     33c:	9e b7       	in	r25, 0x3e	; 62
     33e:	0a 96       	adiw	r24, 0x0a	; 10
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	9e bf       	out	0x3e, r25	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	8d bf       	out	0x3d, r24	; 61
     34a:	5d c0       	rjmp	.+186    	; 0x406 <print_date+0x112>
	}
	else if (month <10 && day>=10)
	{
		sprintf(buf,"0%d/%2d/%4d",month,day,year);
     34c:	40 91 61 00 	lds	r20, 0x0061
     350:	4f 93       	push	r20
     352:	40 91 60 00 	lds	r20, 0x0060
     356:	4f 93       	push	r20
     358:	3f 93       	push	r19
     35a:	2f 93       	push	r18
     35c:	9f 93       	push	r25
     35e:	8f 93       	push	r24
     360:	88 ed       	ldi	r24, 0xD8	; 216
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	9f 93       	push	r25
     366:	8f 93       	push	r24
     368:	8c ef       	ldi	r24, 0xFC	; 252
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <sprintf>
     374:	8d b7       	in	r24, 0x3d	; 61
     376:	9e b7       	in	r25, 0x3e	; 62
     378:	0a 96       	adiw	r24, 0x0a	; 10
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	9e bf       	out	0x3e, r25	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	8d bf       	out	0x3d, r24	; 61
     384:	40 c0       	rjmp	.+128    	; 0x406 <print_date+0x112>
	}
	else if(month >=10 && day<10)
     386:	20 91 62 00 	lds	r18, 0x0062
     38a:	30 91 63 00 	lds	r19, 0x0063
     38e:	2a 30       	cpi	r18, 0x0A	; 10
     390:	31 05       	cpc	r19, r1
     392:	ec f4       	brge	.+58     	; 0x3ce <print_date+0xda>
	{
		sprintf(buf,"%2d/0%d/%4d",month,day,year);
     394:	40 91 61 00 	lds	r20, 0x0061
     398:	4f 93       	push	r20
     39a:	40 91 60 00 	lds	r20, 0x0060
     39e:	4f 93       	push	r20
     3a0:	3f 93       	push	r19
     3a2:	2f 93       	push	r18
     3a4:	9f 93       	push	r25
     3a6:	8f 93       	push	r24
     3a8:	84 ee       	ldi	r24, 0xE4	; 228
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	9f 93       	push	r25
     3ae:	8f 93       	push	r24
     3b0:	8c ef       	ldi	r24, 0xFC	; 252
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	9f 93       	push	r25
     3b6:	8f 93       	push	r24
     3b8:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <sprintf>
     3bc:	8d b7       	in	r24, 0x3d	; 61
     3be:	9e b7       	in	r25, 0x3e	; 62
     3c0:	0a 96       	adiw	r24, 0x0a	; 10
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	9e bf       	out	0x3e, r25	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	8d bf       	out	0x3d, r24	; 61
     3cc:	1c c0       	rjmp	.+56     	; 0x406 <print_date+0x112>
	}
	else if(month>=10 && day>=10)
	{
		sprintf(buf,"%2d/%2d/%4d",month,day,year);
     3ce:	40 91 61 00 	lds	r20, 0x0061
     3d2:	4f 93       	push	r20
     3d4:	40 91 60 00 	lds	r20, 0x0060
     3d8:	4f 93       	push	r20
     3da:	3f 93       	push	r19
     3dc:	2f 93       	push	r18
     3de:	9f 93       	push	r25
     3e0:	8f 93       	push	r24
     3e2:	80 ef       	ldi	r24, 0xF0	; 240
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	9f 93       	push	r25
     3e8:	8f 93       	push	r24
     3ea:	8c ef       	ldi	r24, 0xFC	; 252
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	9f 93       	push	r25
     3f0:	8f 93       	push	r24
     3f2:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <sprintf>
     3f6:	8d b7       	in	r24, 0x3d	; 61
     3f8:	9e b7       	in	r25, 0x3e	; 62
     3fa:	0a 96       	adiw	r24, 0x0a	; 10
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	9e bf       	out	0x3e, r25	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	8d bf       	out	0x3d, r24	; 61
	}
	
  	pos_lcd(0,0);
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 85 05 	call	0xb0a	; 0xb0a <pos_lcd>
	puts_lcd2(buf);
     40e:	8c ef       	ldi	r24, 0xFC	; 252
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 99 05 	call	0xb32	; 0xb32 <puts_lcd2>
	pos_lcd(1,0);
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 85 05 	call	0xb0a	; 0xb0a <pos_lcd>
     41e:	08 95       	ret

00000420 <is31day>:
	
}

int is31day(int month) {
     420:	9c 01       	movw	r18, r24
	return (month == 1 || month == 3 || month == 5 ||month == 7 || month == 8 || month == 10 || month == 12);
     422:	8d 7f       	andi	r24, 0xFD	; 253
     424:	81 30       	cpi	r24, 0x01	; 1
     426:	91 05       	cpc	r25, r1
     428:	d9 f0       	breq	.+54     	; 0x460 <is31day+0x40>
     42a:	25 30       	cpi	r18, 0x05	; 5
     42c:	31 05       	cpc	r19, r1
     42e:	81 f0       	breq	.+32     	; 0x450 <is31day+0x30>
     430:	c9 01       	movw	r24, r18
     432:	07 97       	sbiw	r24, 0x07	; 7
     434:	02 97       	sbiw	r24, 0x02	; 2
     436:	78 f0       	brcs	.+30     	; 0x456 <is31day+0x36>
     438:	2a 30       	cpi	r18, 0x0A	; 10
     43a:	31 05       	cpc	r19, r1
     43c:	79 f0       	breq	.+30     	; 0x45c <is31day+0x3c>
     43e:	51 e0       	ldi	r21, 0x01	; 1
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	2c 30       	cpi	r18, 0x0C	; 12
     444:	31 05       	cpc	r19, r1
     446:	09 f0       	breq	.+2      	; 0x44a <is31day+0x2a>
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	85 2f       	mov	r24, r21
     44c:	94 2f       	mov	r25, r20
     44e:	08 95       	ret
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	08 95       	ret
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	08 95       	ret
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
}
     460:	08 95       	ret

00000462 <is30day>:

int is30day(int month) {
	return (month == 4 || month == 6 || month == 9 ||month == 11);
     462:	8d 7f       	andi	r24, 0xFD	; 253
     464:	84 30       	cpi	r24, 0x04	; 4
     466:	91 05       	cpc	r25, r1
     468:	41 f0       	breq	.+16     	; 0x47a <is30day+0x18>
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	09 97       	sbiw	r24, 0x09	; 9
     470:	09 f0       	breq	.+2      	; 0x474 <is30day+0x12>
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	82 2f       	mov	r24, r18
     476:	93 2f       	mov	r25, r19
     478:	08 95       	ret
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
}
     47e:	08 95       	ret

00000480 <is_leap>:

int is_leap(int year) {
     480:	9c 01       	movw	r18, r24
	return ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0);
     482:	83 70       	andi	r24, 0x03	; 3
     484:	99 27       	eor	r25, r25
     486:	89 2b       	or	r24, r25
     488:	39 f4       	brne	.+14     	; 0x498 <is_leap+0x18>
     48a:	c9 01       	movw	r24, r18
     48c:	64 e6       	ldi	r22, 0x64	; 100
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	0e 94 cc 05 	call	0xb98	; 0xb98 <__divmodhi4>
     494:	89 2b       	or	r24, r25
     496:	69 f4       	brne	.+26     	; 0x4b2 <is_leap+0x32>
     498:	c9 01       	movw	r24, r18
     49a:	60 e9       	ldi	r22, 0x90	; 144
     49c:	71 e0       	ldi	r23, 0x01	; 1
     49e:	0e 94 cc 05 	call	0xb98	; 0xb98 <__divmodhi4>
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	89 2b       	or	r24, r25
     4a8:	09 f0       	breq	.+2      	; 0x4ac <is_leap+0x2c>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	82 2f       	mov	r24, r18
     4ae:	93 2f       	mov	r25, r19
     4b0:	08 95       	ret
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	90 e0       	ldi	r25, 0x00	; 0
}
     4b6:	08 95       	ret

000004b8 <update_date>:
	}
	
	puts_lcd2(buf);
}

void update_date() {
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
  
	if (day >= 31 && is31day(month)){
     4c0:	c0 91 62 00 	lds	r28, 0x0062
     4c4:	d0 91 63 00 	lds	r29, 0x0063
     4c8:	cf 31       	cpi	r28, 0x1F	; 31
     4ca:	d1 05       	cpc	r29, r1
     4cc:	0c f1       	brlt	.+66     	; 0x510 <update_date+0x58>
     4ce:	00 91 64 00 	lds	r16, 0x0064
     4d2:	10 91 65 00 	lds	r17, 0x0065
     4d6:	c8 01       	movw	r24, r16
     4d8:	0e 94 10 02 	call	0x420	; 0x420 <is31day>
     4dc:	89 2b       	or	r24, r25
     4de:	c1 f0       	breq	.+48     	; 0x510 <update_date+0x58>
		day = 1;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	90 93 63 00 	sts	0x0063, r25
     4e8:	80 93 62 00 	sts	0x0062, r24
		if (month == 12){
     4ec:	0c 30       	cpi	r16, 0x0C	; 12
     4ee:	11 05       	cpc	r17, r1
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <update_date+0x3c>
     4f2:	57 c0       	rjmp	.+174    	; 0x5a2 <update_date+0xea>
			month = 1;
     4f4:	90 93 65 00 	sts	0x0065, r25
     4f8:	80 93 64 00 	sts	0x0064, r24
			year = year + 1;
     4fc:	80 91 60 00 	lds	r24, 0x0060
     500:	90 91 61 00 	lds	r25, 0x0061
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	90 93 61 00 	sts	0x0061, r25
     50a:	80 93 60 00 	sts	0x0060, r24
     50e:	49 c0       	rjmp	.+146    	; 0x5a2 <update_date+0xea>
		}
	}
	else if (day >= 30 && is30day(month)){
     510:	ce 31       	cpi	r28, 0x1E	; 30
     512:	d1 05       	cpc	r29, r1
     514:	b4 f0       	brlt	.+44     	; 0x542 <update_date+0x8a>
     516:	00 91 64 00 	lds	r16, 0x0064
     51a:	10 91 65 00 	lds	r17, 0x0065
     51e:	c8 01       	movw	r24, r16
     520:	0e 94 31 02 	call	0x462	; 0x462 <is30day>
     524:	89 2b       	or	r24, r25
     526:	69 f0       	breq	.+26     	; 0x542 <update_date+0x8a>
		day = 1;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	90 93 63 00 	sts	0x0063, r25
     530:	80 93 62 00 	sts	0x0062, r24
		month = month + 1;
     534:	0f 5f       	subi	r16, 0xFF	; 255
     536:	1f 4f       	sbci	r17, 0xFF	; 255
     538:	10 93 65 00 	sts	0x0065, r17
     53c:	00 93 64 00 	sts	0x0064, r16
     540:	30 c0       	rjmp	.+96     	; 0x5a2 <update_date+0xea>
	}
	else if(month == 2 && is_leap(year) && day >= 29){
     542:	80 91 64 00 	lds	r24, 0x0064
     546:	90 91 65 00 	lds	r25, 0x0065
     54a:	02 97       	sbiw	r24, 0x02	; 2
     54c:	29 f5       	brne	.+74     	; 0x598 <update_date+0xe0>
     54e:	80 91 60 00 	lds	r24, 0x0060
     552:	90 91 61 00 	lds	r25, 0x0061
     556:	0e 94 40 02 	call	0x480	; 0x480 <is_leap>
     55a:	89 2b       	or	r24, r25
     55c:	89 f1       	breq	.+98     	; 0x5c0 <update_date+0x108>
     55e:	cd 31       	cpi	r28, 0x1D	; 29
     560:	d1 05       	cpc	r29, r1
     562:	d4 f0       	brlt	.+52     	; 0x598 <update_date+0xe0>
  		day = 1;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	90 93 63 00 	sts	0x0063, r25
     56c:	80 93 62 00 	sts	0x0062, r24
		month = month + 1;
     570:	83 e0       	ldi	r24, 0x03	; 3
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	90 93 65 00 	sts	0x0065, r25
     578:	80 93 64 00 	sts	0x0064, r24
     57c:	12 c0       	rjmp	.+36     	; 0x5a2 <update_date+0xea>
	}
	else if(month == 2 && !is_leap(year) && day >= 28){
   		day = 1;
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	90 93 63 00 	sts	0x0063, r25
     586:	80 93 62 00 	sts	0x0062, r24
		month = month + 1;
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	90 93 65 00 	sts	0x0065, r25
     592:	80 93 64 00 	sts	0x0064, r24
     596:	05 c0       	rjmp	.+10     	; 0x5a2 <update_date+0xea>
	}
	else {
		day = day + 1;
     598:	21 96       	adiw	r28, 0x01	; 1
     59a:	d0 93 63 00 	sts	0x0063, r29
     59e:	c0 93 62 00 	sts	0x0062, r28
	}
	
	print_date(month,day,year);
     5a2:	40 91 60 00 	lds	r20, 0x0060
     5a6:	50 91 61 00 	lds	r21, 0x0061
     5aa:	60 91 62 00 	lds	r22, 0x0062
     5ae:	70 91 63 00 	lds	r23, 0x0063
     5b2:	80 91 64 00 	lds	r24, 0x0064
     5b6:	90 91 65 00 	lds	r25, 0x0065
     5ba:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <print_date>
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <update_date+0x110>
	}
	else if(month == 2 && is_leap(year) && day >= 29){
  		day = 1;
		month = month + 1;
	}
	else if(month == 2 && !is_leap(year) && day >= 28){
     5c0:	cc 31       	cpi	r28, 0x1C	; 28
     5c2:	d1 05       	cpc	r29, r1
     5c4:	4c f3       	brlt	.-46     	; 0x598 <update_date+0xe0>
     5c6:	db cf       	rjmp	.-74     	; 0x57e <update_date+0xc6>
	}
	
	print_date(month,day,year);
  
  
}
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	08 95       	ret

000005d2 <increment_month>:
int increment_hr(int hrs){
	return hrs +  1;
}

void increment_month() {
	if (month == 12) {
     5d2:	80 91 64 00 	lds	r24, 0x0064
     5d6:	90 91 65 00 	lds	r25, 0x0065
     5da:	8c 30       	cpi	r24, 0x0C	; 12
     5dc:	91 05       	cpc	r25, r1
     5de:	39 f4       	brne	.+14     	; 0x5ee <increment_month+0x1c>
		month = 1;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	90 93 65 00 	sts	0x0065, r25
     5e8:	80 93 64 00 	sts	0x0064, r24
     5ec:	08 95       	ret
	}
	else {
		month = month + 1;
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	90 93 65 00 	sts	0x0065, r25
     5f4:	80 93 64 00 	sts	0x0064, r24
     5f8:	08 95       	ret

000005fa <decrement_month>:
	}
}

void decrement_month() {
	if (month == 1) {
     5fa:	80 91 64 00 	lds	r24, 0x0064
     5fe:	90 91 65 00 	lds	r25, 0x0065
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	91 05       	cpc	r25, r1
     606:	39 f4       	brne	.+14     	; 0x616 <decrement_month+0x1c>
		month = 12;
     608:	8c e0       	ldi	r24, 0x0C	; 12
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	90 93 65 00 	sts	0x0065, r25
     610:	80 93 64 00 	sts	0x0064, r24
     614:	08 95       	ret
	}
	else {
		month = month - 1;
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	90 93 65 00 	sts	0x0065, r25
     61c:	80 93 64 00 	sts	0x0064, r24
     620:	08 95       	ret

00000622 <increment_day>:
	}
}

void increment_day() {
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
	if (day >= 31 && is31day(month)){
     626:	c0 91 62 00 	lds	r28, 0x0062
     62a:	d0 91 63 00 	lds	r29, 0x0063
     62e:	cf 31       	cpi	r28, 0x1F	; 31
     630:	d1 05       	cpc	r29, r1
     632:	7c f0       	brlt	.+30     	; 0x652 <increment_day+0x30>
     634:	80 91 64 00 	lds	r24, 0x0064
     638:	90 91 65 00 	lds	r25, 0x0065
     63c:	0e 94 10 02 	call	0x420	; 0x420 <is31day>
     640:	89 2b       	or	r24, r25
     642:	39 f0       	breq	.+14     	; 0x652 <increment_day+0x30>
		day = 1;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	90 93 63 00 	sts	0x0063, r25
     64c:	80 93 62 00 	sts	0x0062, r24
     650:	3b c0       	rjmp	.+118    	; 0x6c8 <increment_day+0xa6>
	}
	else if (day >= 30 && is30day(month)){
     652:	ce 31       	cpi	r28, 0x1E	; 30
     654:	d1 05       	cpc	r29, r1
     656:	7c f0       	brlt	.+30     	; 0x676 <increment_day+0x54>
     658:	80 91 64 00 	lds	r24, 0x0064
     65c:	90 91 65 00 	lds	r25, 0x0065
     660:	0e 94 31 02 	call	0x462	; 0x462 <is30day>
     664:	89 2b       	or	r24, r25
     666:	39 f0       	breq	.+14     	; 0x676 <increment_day+0x54>
		day = 1;
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	90 93 63 00 	sts	0x0063, r25
     670:	80 93 62 00 	sts	0x0062, r24
     674:	29 c0       	rjmp	.+82     	; 0x6c8 <increment_day+0xa6>
	}
	else if(month == 2 && is_leap(year) && day >= 29){
     676:	80 91 64 00 	lds	r24, 0x0064
     67a:	90 91 65 00 	lds	r25, 0x0065
     67e:	02 97       	sbiw	r24, 0x02	; 2
     680:	c9 f4       	brne	.+50     	; 0x6b4 <increment_day+0x92>
     682:	80 91 60 00 	lds	r24, 0x0060
     686:	90 91 61 00 	lds	r25, 0x0061
     68a:	0e 94 40 02 	call	0x480	; 0x480 <is_leap>
     68e:	89 2b       	or	r24, r25
     690:	b9 f0       	breq	.+46     	; 0x6c0 <increment_day+0x9e>
     692:	cd 31       	cpi	r28, 0x1D	; 29
     694:	d1 05       	cpc	r29, r1
     696:	74 f0       	brlt	.+28     	; 0x6b4 <increment_day+0x92>
		day = 1;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	90 93 63 00 	sts	0x0063, r25
     6a0:	80 93 62 00 	sts	0x0062, r24
     6a4:	11 c0       	rjmp	.+34     	; 0x6c8 <increment_day+0xa6>
	}
	else if(month == 2 && !is_leap(year) && day >= 28){
		day = 1;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	90 93 63 00 	sts	0x0063, r25
     6ae:	80 93 62 00 	sts	0x0062, r24
     6b2:	0a c0       	rjmp	.+20     	; 0x6c8 <increment_day+0xa6>
	}
	else {
		day = day + 1;
     6b4:	21 96       	adiw	r28, 0x01	; 1
     6b6:	d0 93 63 00 	sts	0x0063, r29
     6ba:	c0 93 62 00 	sts	0x0062, r28
     6be:	04 c0       	rjmp	.+8      	; 0x6c8 <increment_day+0xa6>
		day = 1;
	}
	else if(month == 2 && is_leap(year) && day >= 29){
		day = 1;
	}
	else if(month == 2 && !is_leap(year) && day >= 28){
     6c0:	cc 31       	cpi	r28, 0x1C	; 28
     6c2:	d1 05       	cpc	r29, r1
     6c4:	bc f3       	brlt	.-18     	; 0x6b4 <increment_day+0x92>
     6c6:	ef cf       	rjmp	.-34     	; 0x6a6 <increment_day+0x84>
		day = 1;
	}
	else {
		day = day + 1;
	}
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <decrement_day>:

void decrement_day() {
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
	if (day == 1 && is31day(month)){
     6d6:	c0 91 62 00 	lds	r28, 0x0062
     6da:	d0 91 63 00 	lds	r29, 0x0063
     6de:	c1 30       	cpi	r28, 0x01	; 1
     6e0:	d1 05       	cpc	r29, r1
     6e2:	e1 f4       	brne	.+56     	; 0x71c <decrement_day+0x4e>
     6e4:	00 91 64 00 	lds	r16, 0x0064
     6e8:	10 91 65 00 	lds	r17, 0x0065
     6ec:	c8 01       	movw	r24, r16
     6ee:	0e 94 10 02 	call	0x420	; 0x420 <is31day>
     6f2:	89 2b       	or	r24, r25
     6f4:	39 f0       	breq	.+14     	; 0x704 <decrement_day+0x36>
		day = 31;
     6f6:	8f e1       	ldi	r24, 0x1F	; 31
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	90 93 63 00 	sts	0x0063, r25
     6fe:	80 93 62 00 	sts	0x0062, r24
     702:	35 c0       	rjmp	.+106    	; 0x76e <decrement_day+0xa0>
	}
	else if (day == 1 && is30day(month)){
     704:	c8 01       	movw	r24, r16
     706:	0e 94 31 02 	call	0x462	; 0x462 <is30day>
     70a:	89 2b       	or	r24, r25
     70c:	39 f0       	breq	.+14     	; 0x71c <decrement_day+0x4e>
		day = 30;
     70e:	8e e1       	ldi	r24, 0x1E	; 30
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	90 93 63 00 	sts	0x0063, r25
     716:	80 93 62 00 	sts	0x0062, r24
     71a:	29 c0       	rjmp	.+82     	; 0x76e <decrement_day+0xa0>
	}
	else if(month == 2 && is_leap(year) && day == 1){
     71c:	80 91 64 00 	lds	r24, 0x0064
     720:	90 91 65 00 	lds	r25, 0x0065
     724:	02 97       	sbiw	r24, 0x02	; 2
     726:	c9 f4       	brne	.+50     	; 0x75a <decrement_day+0x8c>
     728:	80 91 60 00 	lds	r24, 0x0060
     72c:	90 91 61 00 	lds	r25, 0x0061
     730:	0e 94 40 02 	call	0x480	; 0x480 <is_leap>
     734:	89 2b       	or	r24, r25
     736:	b9 f0       	breq	.+46     	; 0x766 <decrement_day+0x98>
     738:	c1 30       	cpi	r28, 0x01	; 1
     73a:	d1 05       	cpc	r29, r1
     73c:	71 f4       	brne	.+28     	; 0x75a <decrement_day+0x8c>
		day = 29;
     73e:	8d e1       	ldi	r24, 0x1D	; 29
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	90 93 63 00 	sts	0x0063, r25
     746:	80 93 62 00 	sts	0x0062, r24
     74a:	11 c0       	rjmp	.+34     	; 0x76e <decrement_day+0xa0>
	}
	else if(month == 2 && !is_leap(year) && day == 1){
		day = 28;
     74c:	8c e1       	ldi	r24, 0x1C	; 28
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	90 93 63 00 	sts	0x0063, r25
     754:	80 93 62 00 	sts	0x0062, r24
     758:	0a c0       	rjmp	.+20     	; 0x76e <decrement_day+0xa0>
	}
	else {
		day = day - 1;
     75a:	21 97       	sbiw	r28, 0x01	; 1
     75c:	d0 93 63 00 	sts	0x0063, r29
     760:	c0 93 62 00 	sts	0x0062, r28
     764:	04 c0       	rjmp	.+8      	; 0x76e <decrement_day+0xa0>
		day = 30;
	}
	else if(month == 2 && is_leap(year) && day == 1){
		day = 29;
	}
	else if(month == 2 && !is_leap(year) && day == 1){
     766:	c1 30       	cpi	r28, 0x01	; 1
     768:	d1 05       	cpc	r29, r1
     76a:	b9 f7       	brne	.-18     	; 0x75a <decrement_day+0x8c>
     76c:	ef cf       	rjmp	.-34     	; 0x74c <decrement_day+0x7e>
		day = 28;
	}
	else {
		day = day - 1;
	}
}
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	08 95       	ret

00000778 <increment_year>:

void increment_year() {
	year = year + 1;
     778:	80 91 60 00 	lds	r24, 0x0060
     77c:	90 91 61 00 	lds	r25, 0x0061
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	90 93 61 00 	sts	0x0061, r25
     786:	80 93 60 00 	sts	0x0060, r24
     78a:	08 95       	ret

0000078c <decrement_year>:
}

void decrement_year() {
	year = year - 1;
     78c:	80 91 60 00 	lds	r24, 0x0060
     790:	90 91 61 00 	lds	r25, 0x0061
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	90 93 61 00 	sts	0x0061, r25
     79a:	80 93 60 00 	sts	0x0060, r24
     79e:	08 95       	ret

000007a0 <void_increment_hrs>:
}

void void_increment_hrs() {
	if (hrs == 23) {
     7a0:	80 91 66 00 	lds	r24, 0x0066
     7a4:	90 91 67 00 	lds	r25, 0x0067
     7a8:	87 31       	cpi	r24, 0x17	; 23
     7aa:	91 05       	cpc	r25, r1
     7ac:	29 f4       	brne	.+10     	; 0x7b8 <void_increment_hrs+0x18>
		hrs = 0;
     7ae:	10 92 67 00 	sts	0x0067, r1
     7b2:	10 92 66 00 	sts	0x0066, r1
     7b6:	08 95       	ret
	}
	else {
		hrs = hrs + 1;
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	90 93 67 00 	sts	0x0067, r25
     7be:	80 93 66 00 	sts	0x0066, r24
     7c2:	08 95       	ret

000007c4 <decrement_hrs>:
	}
}
void decrement_hrs() {
	if (hrs == 0) {
     7c4:	80 91 66 00 	lds	r24, 0x0066
     7c8:	90 91 67 00 	lds	r25, 0x0067
     7cc:	00 97       	sbiw	r24, 0x00	; 0
     7ce:	39 f4       	brne	.+14     	; 0x7de <decrement_hrs+0x1a>
		hrs = 23;
     7d0:	87 e1       	ldi	r24, 0x17	; 23
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	90 93 67 00 	sts	0x0067, r25
     7d8:	80 93 66 00 	sts	0x0066, r24
     7dc:	08 95       	ret
	}
	else {
		hrs = hrs - 1;
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	90 93 67 00 	sts	0x0067, r25
     7e4:	80 93 66 00 	sts	0x0066, r24
     7e8:	08 95       	ret

000007ea <void_increment_mins>:
	}	
}

void void_increment_mins() {
	if (mins == 59) {
     7ea:	80 91 68 00 	lds	r24, 0x0068
     7ee:	90 91 69 00 	lds	r25, 0x0069
     7f2:	8b 33       	cpi	r24, 0x3B	; 59
     7f4:	91 05       	cpc	r25, r1
     7f6:	29 f4       	brne	.+10     	; 0x802 <void_increment_mins+0x18>
		mins = 0;
     7f8:	10 92 69 00 	sts	0x0069, r1
     7fc:	10 92 68 00 	sts	0x0068, r1
     800:	08 95       	ret
	}
	else {
		mins = mins + 1;
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	90 93 69 00 	sts	0x0069, r25
     808:	80 93 68 00 	sts	0x0068, r24
     80c:	08 95       	ret

0000080e <decrement_mins>:
	}
}

void decrement_mins() {
	if (mins == 0) {
     80e:	80 91 68 00 	lds	r24, 0x0068
     812:	90 91 69 00 	lds	r25, 0x0069
     816:	00 97       	sbiw	r24, 0x00	; 0
     818:	39 f4       	brne	.+14     	; 0x828 <decrement_mins+0x1a>
		mins = 59;
     81a:	8b e3       	ldi	r24, 0x3B	; 59
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	90 93 69 00 	sts	0x0069, r25
     822:	80 93 68 00 	sts	0x0068, r24
     826:	08 95       	ret
	}
	else {
		mins = mins - 1;
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	90 93 69 00 	sts	0x0069, r25
     82e:	80 93 68 00 	sts	0x0068, r24
     832:	08 95       	ret

00000834 <void_increment_secs>:
	}
	
}

void void_increment_secs() {
	if (secs == 59) {
     834:	80 91 6a 00 	lds	r24, 0x006A
     838:	90 91 6b 00 	lds	r25, 0x006B
     83c:	8b 33       	cpi	r24, 0x3B	; 59
     83e:	91 05       	cpc	r25, r1
     840:	29 f4       	brne	.+10     	; 0x84c <void_increment_secs+0x18>
		secs = 0;
     842:	10 92 6b 00 	sts	0x006B, r1
     846:	10 92 6a 00 	sts	0x006A, r1
     84a:	08 95       	ret
	}
	else {
		secs = secs + 1;
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	90 93 6b 00 	sts	0x006B, r25
     852:	80 93 6a 00 	sts	0x006A, r24
     856:	08 95       	ret

00000858 <decrement_secs>:
	}
}

void decrement_secs() {
	if (secs == 0) {
     858:	80 91 6a 00 	lds	r24, 0x006A
     85c:	90 91 6b 00 	lds	r25, 0x006B
     860:	00 97       	sbiw	r24, 0x00	; 0
     862:	39 f4       	brne	.+14     	; 0x872 <__stack+0x13>
		secs = 59;
     864:	8b e3       	ldi	r24, 0x3B	; 59
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	90 93 6b 00 	sts	0x006B, r25
     86c:	80 93 6a 00 	sts	0x006A, r24
     870:	08 95       	ret
	}
	else {
		secs = secs - 1;
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	90 93 6b 00 	sts	0x006B, r25
     878:	80 93 6a 00 	sts	0x006A, r24
     87c:	08 95       	ret

0000087e <check_key>:
}



void check_key(unsigned char key) {
	if (key == 1) {
     87e:	81 30       	cpi	r24, 0x01	; 1
     880:	19 f4       	brne	.+6      	; 0x888 <check_key+0xa>
		increment_month();
     882:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <increment_month>
     886:	08 95       	ret
	}
	else if (key == 2) {
     888:	82 30       	cpi	r24, 0x02	; 2
     88a:	19 f4       	brne	.+6      	; 0x892 <check_key+0x14>
		decrement_month();
     88c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <decrement_month>
     890:	08 95       	ret
	}
	else if (key == 3) {
     892:	83 30       	cpi	r24, 0x03	; 3
     894:	19 f4       	brne	.+6      	; 0x89c <check_key+0x1e>
		increment_day();
     896:	0e 94 11 03 	call	0x622	; 0x622 <increment_day>
     89a:	08 95       	ret
	}
	else if (key == 4) { // keypad: A
     89c:	84 30       	cpi	r24, 0x04	; 4
     89e:	19 f4       	brne	.+6      	; 0x8a6 <check_key+0x28>
		decrement_day();
     8a0:	0e 94 67 03 	call	0x6ce	; 0x6ce <decrement_day>
     8a4:	08 95       	ret
	}
	
	else if (key == 5) { // keypad: 4
     8a6:	85 30       	cpi	r24, 0x05	; 5
     8a8:	19 f4       	brne	.+6      	; 0x8b0 <check_key+0x32>
		increment_year();
     8aa:	0e 94 bc 03 	call	0x778	; 0x778 <increment_year>
     8ae:	08 95       	ret
	}
	else if (key == 6) { // keypad: 5
     8b0:	86 30       	cpi	r24, 0x06	; 6
     8b2:	19 f4       	brne	.+6      	; 0x8ba <check_key+0x3c>
		decrement_year();
     8b4:	0e 94 c6 03 	call	0x78c	; 0x78c <decrement_year>
     8b8:	08 95       	ret
	}
	else if (key == 7) { // keypad: 6
     8ba:	87 30       	cpi	r24, 0x07	; 7
     8bc:	19 f4       	brne	.+6      	; 0x8c4 <check_key+0x46>
		void_increment_hrs();
     8be:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <void_increment_hrs>
     8c2:	08 95       	ret
	}
	else if (key == 8) { // keypad: B
     8c4:	88 30       	cpi	r24, 0x08	; 8
     8c6:	19 f4       	brne	.+6      	; 0x8ce <check_key+0x50>
		decrement_hrs();
     8c8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <decrement_hrs>
     8cc:	08 95       	ret
	}
	else if (key == 9) { // keypad: 7
     8ce:	89 30       	cpi	r24, 0x09	; 9
     8d0:	19 f4       	brne	.+6      	; 0x8d8 <check_key+0x5a>
		void_increment_mins();
     8d2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <void_increment_mins>
     8d6:	08 95       	ret
	}
	else if (key == 10) { // keypad: 8
     8d8:	8a 30       	cpi	r24, 0x0A	; 10
     8da:	19 f4       	brne	.+6      	; 0x8e2 <check_key+0x64>
		decrement_mins();
     8dc:	0e 94 07 04 	call	0x80e	; 0x80e <decrement_mins>
     8e0:	08 95       	ret
	}
	else if (key == 11) { // keypad: 9
     8e2:	8b 30       	cpi	r24, 0x0B	; 11
     8e4:	19 f4       	brne	.+6      	; 0x8ec <check_key+0x6e>
		void_increment_secs();
     8e6:	0e 94 1a 04 	call	0x834	; 0x834 <void_increment_secs>
     8ea:	08 95       	ret
	}
	else if (key == 12) { // keypad: C
     8ec:	8c 30       	cpi	r24, 0x0C	; 12
     8ee:	11 f4       	brne	.+4      	; 0x8f4 <check_key+0x76>
		decrement_secs();
     8f0:	0e 94 2c 04 	call	0x858	; 0x858 <decrement_secs>
     8f4:	08 95       	ret

000008f6 <pressed>:
	return 0;
}



unsigned char pressed(int r, int c) {
     8f6:	e8 2f       	mov	r30, r24
	// PUT ALL ROW AND COL PINS TO NO-CONNECT (DDR = 0, PORT = 0)
	// PUT THE r-th ROW TO '0'
	// PUT THE c-th COL to 'Z'
	// GET THE c-th COL (return 0 or 1, depending of PIN's status)
	DDRC = 0;
     8f8:	14 ba       	out	0x14, r1	; 20
	PORTC = 0;
     8fa:	15 ba       	out	0x15, r1	; 21

	SET_BIT(PORTC,r);
     8fc:	85 b3       	in	r24, 0x15	; 21
     8fe:	21 e0       	ldi	r18, 0x01	; 1
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	a9 01       	movw	r20, r18
     904:	0e 2e       	mov	r0, r30
     906:	02 c0       	rjmp	.+4      	; 0x90c <pressed+0x16>
     908:	44 0f       	add	r20, r20
     90a:	55 1f       	adc	r21, r21
     90c:	0a 94       	dec	r0
     90e:	e2 f7       	brpl	.-8      	; 0x908 <pressed+0x12>
     910:	48 2b       	or	r20, r24
     912:	45 bb       	out	0x15, r20	; 21
	SET_BIT(DDRC,c+4);
     914:	94 b3       	in	r25, 0x14	; 20
     916:	6c 5f       	subi	r22, 0xFC	; 252
     918:	7f 4f       	sbci	r23, 0xFF	; 255
     91a:	02 c0       	rjmp	.+4      	; 0x920 <pressed+0x2a>
     91c:	22 0f       	add	r18, r18
     91e:	33 1f       	adc	r19, r19
     920:	6a 95       	dec	r22
     922:	e2 f7       	brpl	.-8      	; 0x91c <pressed+0x26>
     924:	92 2b       	or	r25, r18
     926:	94 bb       	out	0x14, r25	; 20
	CLR_BIT(PORTC,c+4);
     928:	95 b3       	in	r25, 0x15	; 21
     92a:	20 95       	com	r18
     92c:	29 23       	and	r18, r25
     92e:	25 bb       	out	0x15, r18	; 21

	if(!GET_BIT(PINC,r))
     930:	93 b3       	in	r25, 0x13	; 19
     932:	89 2f       	mov	r24, r25
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	02 c0       	rjmp	.+4      	; 0x93c <pressed+0x46>
     938:	95 95       	asr	r25
     93a:	87 95       	ror	r24
     93c:	ea 95       	dec	r30
     93e:	e2 f7       	brpl	.-8      	; 0x938 <pressed+0x42>
     940:	21 e0       	ldi	r18, 0x01	; 1
     942:	82 27       	eor	r24, r18
		return 1;

	return 0;
	}
     944:	81 70       	andi	r24, 0x01	; 1
     946:	08 95       	ret

00000948 <get_key>:
		check_key(key);
	}
		
}

unsigned char get_key() {
     948:	cf 92       	push	r12
     94a:	df 92       	push	r13
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	00 e0       	ldi	r16, 0x00	; 0
     95a:	10 e0       	ldi	r17, 0x00	; 0
     95c:	c1 2c       	mov	r12, r1
     95e:	d1 2c       	mov	r13, r1
     960:	16 c0       	rjmp	.+44     	; 0x98e <get_key+0x46>
     962:	fc 2e       	mov	r15, r28
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
		for (c = 0; c < 4; ++c) {
			if (pressed(r,c)) {
     964:	be 01       	movw	r22, r28
     966:	c8 01       	movw	r24, r16
     968:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <pressed>
     96c:	88 23       	and	r24, r24
     96e:	31 f0       	breq	.+12     	; 0x97c <get_key+0x34>
     970:	f3 94       	inc	r15
				return (r*4) + c + 1;
     972:	8e 2d       	mov	r24, r14
     974:	88 0f       	add	r24, r24
     976:	88 0f       	add	r24, r24
     978:	8f 0d       	add	r24, r15
     97a:	0d c0       	rjmp	.+26     	; 0x996 <get_key+0x4e>
     97c:	21 96       	adiw	r28, 0x01	; 1
}

unsigned char get_key() {
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
		for (c = 0; c < 4; ++c) {
     97e:	c4 30       	cpi	r28, 0x04	; 4
     980:	d1 05       	cpc	r29, r1
     982:	79 f7       	brne	.-34     	; 0x962 <get_key+0x1a>
     984:	0f 5f       	subi	r16, 0xFF	; 255
     986:	1f 4f       	sbci	r17, 0xFF	; 255
		
}

unsigned char get_key() {
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
     988:	04 30       	cpi	r16, 0x04	; 4
     98a:	11 05       	cpc	r17, r1
     98c:	21 f0       	breq	.+8      	; 0x996 <get_key+0x4e>
     98e:	e0 2e       	mov	r14, r16
		check_key(key);
	}
		
}

unsigned char get_key() {
     990:	cc 2d       	mov	r28, r12
     992:	dd 2d       	mov	r29, r13
     994:	e6 cf       	rjmp	.-52     	; 0x962 <get_key+0x1a>
				return (r*4) + c + 1;
			}
		}
	}
	return 0;
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	08 95       	ret

000009a8 <run_clock>:
int month = 4;
int day = 26;
int year = 2016;

void run_clock()
{
     9a8:	cf 93       	push	r28
	unsigned char key = get_key();
     9aa:	0e 94 a4 04 	call	0x948	; 0x948 <get_key>
     9ae:	c8 2f       	mov	r28, r24
	//sprintf(buf, "0%d/%2d/%4d", month, day, year);
	//puts_lcd2(buf);
	print_date();
     9b0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <print_date>
}



int increment_sec(int secs){
	return secs + 1;
     9b4:	20 91 6a 00 	lds	r18, 0x006A
     9b8:	30 91 6b 00 	lds	r19, 0x006B
     9bc:	2f 5f       	subi	r18, 0xFF	; 255
     9be:	3f 4f       	sbci	r19, 0xFF	; 255
	//pos_lcd(1,0);
	
	
	
	
	if((secs = increment_sec(secs)) == 60)
     9c0:	2c 33       	cpi	r18, 0x3C	; 60
     9c2:	31 05       	cpc	r19, r1
     9c4:	29 f0       	breq	.+10     	; 0x9d0 <run_clock+0x28>
     9c6:	30 93 6b 00 	sts	0x006B, r19
     9ca:	20 93 6a 00 	sts	0x006A, r18
     9ce:	26 c0       	rjmp	.+76     	; 0xa1c <run_clock+0x74>
	{
		secs = 0;
     9d0:	10 92 6b 00 	sts	0x006B, r1
     9d4:	10 92 6a 00 	sts	0x006A, r1
int increment_sec(int secs){
	return secs + 1;
}

int increment_min(int mins){
	return mins + 1;
     9d8:	80 91 68 00 	lds	r24, 0x0068
     9dc:	90 91 69 00 	lds	r25, 0x0069
     9e0:	01 96       	adiw	r24, 0x01	; 1
	
	
	if((secs = increment_sec(secs)) == 60)
	{
		secs = 0;
		if((mins = increment_min(mins)) == 60)
     9e2:	8c 33       	cpi	r24, 0x3C	; 60
     9e4:	91 05       	cpc	r25, r1
     9e6:	29 f0       	breq	.+10     	; 0x9f2 <run_clock+0x4a>
     9e8:	90 93 69 00 	sts	0x0069, r25
     9ec:	80 93 68 00 	sts	0x0068, r24
     9f0:	15 c0       	rjmp	.+42     	; 0xa1c <run_clock+0x74>
		{
			mins = 0;
     9f2:	10 92 69 00 	sts	0x0069, r1
     9f6:	10 92 68 00 	sts	0x0068, r1
int increment_min(int mins){
	return mins + 1;
}

int increment_hr(int hrs){
	return hrs +  1;
     9fa:	80 91 66 00 	lds	r24, 0x0066
     9fe:	90 91 67 00 	lds	r25, 0x0067
     a02:	01 96       	adiw	r24, 0x01	; 1
	{
		secs = 0;
		if((mins = increment_min(mins)) == 60)
		{
			mins = 0;
			if((hrs = increment_hr(hrs)) == 24) {
     a04:	90 93 67 00 	sts	0x0067, r25
     a08:	80 93 66 00 	sts	0x0066, r24
     a0c:	48 97       	sbiw	r24, 0x18	; 24
     a0e:	31 f4       	brne	.+12     	; 0xa1c <run_clock+0x74>
				hrs = 0;
     a10:	10 92 67 00 	sts	0x0067, r1
     a14:	10 92 66 00 	sts	0x0066, r1
				update_date();
     a18:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <update_date>
			
		}
			
	}
		
	print_time(hrs,mins,secs);
     a1c:	40 91 6a 00 	lds	r20, 0x006A
     a20:	50 91 6b 00 	lds	r21, 0x006B
     a24:	60 91 68 00 	lds	r22, 0x0068
     a28:	70 91 69 00 	lds	r23, 0x0069
     a2c:	80 91 66 00 	lds	r24, 0x0066
     a30:	90 91 67 00 	lds	r25, 0x0067
     a34:	0e 94 49 00 	call	0x92	; 0x92 <print_time>
	if (key == 13) {
     a38:	cd 30       	cpi	r28, 0x0D	; 13
     a3a:	41 f0       	breq	.+16     	; 0xa4c <run_clock+0xa4>
		return;
	}
	wait_avr(1000);
     a3c:	88 ee       	ldi	r24, 0xE8	; 232
     a3e:	93 e0       	ldi	r25, 0x03	; 3
     a40:	0e 94 aa 05 	call	0xb54	; 0xb54 <wait_avr>
	pos_lcd(1,0);
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	0e 94 85 05 	call	0xb0a	; 0xb0a <pos_lcd>
	}
	*/
		
	

}
     a4c:	cf 91       	pop	r28
     a4e:	08 95       	ret

00000a50 <set_clock>:
			break;
		}
	}
}

void set_clock() {
     a50:	cf 93       	push	r28
	// blink_lcd();
	unsigned char key = get_key();
     a52:	0e 94 a4 04 	call	0x948	; 0x948 <get_key>
	while(1) {
		key = get_key();
     a56:	0e 94 a4 04 	call	0x948	; 0x948 <get_key>
     a5a:	c8 2f       	mov	r28, r24
		print_date(); // pause at current date
     a5c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <print_date>
		print_time(); // pause at current time
     a60:	0e 94 49 00 	call	0x92	; 0x92 <print_time>
		wait_avr(150);
     a64:	86 e9       	ldi	r24, 0x96	; 150
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 aa 05 	call	0xb54	; 0xb54 <wait_avr>
		if (key == 15) {
     a6c:	cf 30       	cpi	r28, 0x0F	; 15
     a6e:	21 f0       	breq	.+8      	; 0xa78 <set_clock+0x28>
			break;
		}
		check_key(key);
     a70:	8c 2f       	mov	r24, r28
     a72:	0e 94 3f 04 	call	0x87e	; 0x87e <check_key>
	}
     a76:	ef cf       	rjmp	.-34     	; 0xa56 <set_clock+0x6>
		
}
     a78:	cf 91       	pop	r28
     a7a:	08 95       	ret

00000a7c <output>:
}

static void
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
     a7c:	66 23       	and	r22, r22
     a7e:	11 f0       	breq	.+4      	; 0xa84 <output+0x8>
     a80:	c0 9a       	sbi	0x18, 0	; 24
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <output+0xa>
     a84:	c0 98       	cbi	0x18, 0	; 24
  CLR_BIT(PORT, RW_PIN);
     a86:	c1 98       	cbi	0x18, 1	; 24
#define EN_PIN  2

static inline void
set_data(unsigned char x)
{
  PORTD = x;
     a88:	82 bb       	out	0x12, r24	; 18
  DDRD = 0xff;
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	81 bb       	out	0x11, r24	; 17
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
     a8e:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
     a90:	00 00       	nop
  NOP();
     a92:	00 00       	nop
  NOP();
     a94:	00 00       	nop
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  CLR_BIT(PORT, EN_PIN);
     a96:	c2 98       	cbi	0x18, 2	; 24
     a98:	08 95       	ret

00000a9a <write>:

static unsigned char
input(unsigned char rs)
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
     a9a:	c0 98       	cbi	0x18, 0	; 24
  SET_BIT(PORT, RW_PIN);
     a9c:	c1 9a       	sbi	0x18, 1	; 24
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
     a9e:	11 ba       	out	0x11, r1	; 17
  return PIND;
     aa0:	90 b3       	in	r25, 0x10	; 16
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
     aa2:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
     aa4:	00 00       	nop
  NOP();
     aa6:	00 00       	nop
  NOP();
     aa8:	00 00       	nop
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
     aaa:	11 ba       	out	0x11, r1	; 17
  return PIND;
     aac:	90 b3       	in	r25, 0x10	; 16
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  d = get_data();
  CLR_BIT(PORT, EN_PIN);
     aae:	c2 98       	cbi	0x18, 2	; 24
}

static void
write(unsigned char c, unsigned char rs)
{
  while (input(0) & 0x80);
     ab0:	99 23       	and	r25, r25
     ab2:	9c f3       	brlt	.-26     	; 0xa9a <write>
  output(c, rs);
     ab4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <output>
     ab8:	08 95       	ret

00000aba <ini_lcd>:
}

void
ini_lcd(void)
{
  SET_BIT(DDR, RS_PIN);
     aba:	b8 9a       	sbi	0x17, 0	; 23
  SET_BIT(DDR, RW_PIN);
     abc:	b9 9a       	sbi	0x17, 1	; 23
  SET_BIT(DDR, EN_PIN);
     abe:	ba 9a       	sbi	0x17, 2	; 23
  wait_avr(16);
     ac0:	80 e1       	ldi	r24, 0x10	; 16
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 aa 05 	call	0xb54	; 0xb54 <wait_avr>
  output(0x30, 0);
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	80 e3       	ldi	r24, 0x30	; 48
     acc:	0e 94 3e 05 	call	0xa7c	; 0xa7c <output>
  wait_avr(5);
     ad0:	85 e0       	ldi	r24, 0x05	; 5
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 aa 05 	call	0xb54	; 0xb54 <wait_avr>
  output(0x30, 0);
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	80 e3       	ldi	r24, 0x30	; 48
     adc:	0e 94 3e 05 	call	0xa7c	; 0xa7c <output>
  wait_avr(1);
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 aa 05 	call	0xb54	; 0xb54 <wait_avr>
  write(0x3c, 0);
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	8c e3       	ldi	r24, 0x3C	; 60
     aec:	0e 94 4d 05 	call	0xa9a	; 0xa9a <write>
  write(0x0c, 0);
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	8c e0       	ldi	r24, 0x0C	; 12
     af4:	0e 94 4d 05 	call	0xa9a	; 0xa9a <write>
  write(0x06, 0);
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	86 e0       	ldi	r24, 0x06	; 6
     afc:	0e 94 4d 05 	call	0xa9a	; 0xa9a <write>
  write(0x01, 0);
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	0e 94 4d 05 	call	0xa9a	; 0xa9a <write>
     b08:	08 95       	ret

00000b0a <pos_lcd>:
  write(0x01, 0);
}

void
pos_lcd(unsigned char r, unsigned char c)
{
     b0a:	cf 93       	push	r28
  unsigned char n = r * 40 + c;
     b0c:	c6 2f       	mov	r28, r22
     b0e:	98 e2       	ldi	r25, 0x28	; 40
     b10:	89 9f       	mul	r24, r25
     b12:	c0 0d       	add	r28, r0
     b14:	11 24       	eor	r1, r1
  write(0x02, 0);
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <write>
  while (n--) {
     b1e:	cc 23       	and	r28, r28
     b20:	31 f0       	breq	.+12     	; 0xb2e <pos_lcd+0x24>
    write(0x14, 0);
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	84 e1       	ldi	r24, 0x14	; 20
     b26:	0e 94 4d 05 	call	0xa9a	; 0xa9a <write>
     b2a:	c1 50       	subi	r28, 0x01	; 1
void
pos_lcd(unsigned char r, unsigned char c)
{
  unsigned char n = r * 40 + c;
  write(0x02, 0);
  while (n--) {
     b2c:	d1 f7       	brne	.-12     	; 0xb22 <pos_lcd+0x18>
    write(0x14, 0);
  }
}
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <puts_lcd2>:
  }
}

void
puts_lcd2(const char *s)
{
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
  char c;
  while ((c = *(s++)) != 0) {
     b36:	ec 01       	movw	r28, r24
     b38:	21 96       	adiw	r28, 0x01	; 1
     b3a:	fc 01       	movw	r30, r24
     b3c:	80 81       	ld	r24, Z
     b3e:	88 23       	and	r24, r24
     b40:	31 f0       	breq	.+12     	; 0xb4e <puts_lcd2+0x1c>
    write(c, 1);
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	0e 94 4d 05 	call	0xa9a	; 0xa9a <write>

void
puts_lcd2(const char *s)
{
  char c;
  while ((c = *(s++)) != 0) {
     b48:	89 91       	ld	r24, Y+
     b4a:	81 11       	cpse	r24, r1
     b4c:	fa cf       	rjmp	.-12     	; 0xb42 <puts_lcd2+0x10>
    write(c, 1);
  }
}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	08 95       	ret

00000b54 <wait_avr>:
	WDTCR = 15;
}

void
wait_avr(unsigned short msec)
{
     b54:	9c 01       	movw	r18, r24
	TCCR0 = 3;
     b56:	83 e0       	ldi	r24, 0x03	; 3
     b58:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
     b5a:	83 e8       	ldi	r24, 0x83	; 131

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
     b5c:	08 c0       	rjmp	.+16     	; 0xb6e <wait_avr+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
     b5e:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
     b60:	98 b7       	in	r25, 0x38	; 56
     b62:	91 60       	ori	r25, 0x01	; 1
     b64:	98 bf       	out	0x38, r25	; 56
		WDR();
     b66:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
     b68:	08 b6       	in	r0, 0x38	; 56
     b6a:	00 fe       	sbrs	r0, 0
     b6c:	fd cf       	rjmp	.-6      	; 0xb68 <wait_avr+0x14>

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
     b6e:	21 50       	subi	r18, 0x01	; 1
     b70:	31 09       	sbc	r19, r1
     b72:	a8 f7       	brcc	.-22     	; 0xb5e <wait_avr+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
     b74:	13 be       	out	0x33, r1	; 51
     b76:	08 95       	ret

00000b78 <main>:


int main(void)
{
    /* Replace with your application code */
	ini_lcd();
     b78:	0e 94 5d 05 	call	0xaba	; 0xaba <ini_lcd>
	
	unsigned char key = get_key();
     b7c:	0e 94 a4 04 	call	0x948	; 0x948 <get_key>
	
	while (1) {
		key = get_key();
     b80:	0e 94 a4 04 	call	0x948	; 0x948 <get_key>
	
		if (key == 0){
     b84:	81 11       	cpse	r24, r1
     b86:	03 c0       	rjmp	.+6      	; 0xb8e <main+0x16>
			run_clock();
     b88:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <run_clock>
     b8c:	f9 cf       	rjmp	.-14     	; 0xb80 <main+0x8>
		}
	
		if(key == 13) {
     b8e:	8d 30       	cpi	r24, 0x0D	; 13
     b90:	b9 f7       	brne	.-18     	; 0xb80 <main+0x8>
			set_clock();
     b92:	0e 94 28 05 	call	0xa50	; 0xa50 <set_clock>
     b96:	f4 cf       	rjmp	.-24     	; 0xb80 <main+0x8>

00000b98 <__divmodhi4>:
     b98:	97 fb       	bst	r25, 7
     b9a:	07 2e       	mov	r0, r23
     b9c:	16 f4       	brtc	.+4      	; 0xba2 <__divmodhi4+0xa>
     b9e:	00 94       	com	r0
     ba0:	07 d0       	rcall	.+14     	; 0xbb0 <__divmodhi4_neg1>
     ba2:	77 fd       	sbrc	r23, 7
     ba4:	09 d0       	rcall	.+18     	; 0xbb8 <__divmodhi4_neg2>
     ba6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__udivmodhi4>
     baa:	07 fc       	sbrc	r0, 7
     bac:	05 d0       	rcall	.+10     	; 0xbb8 <__divmodhi4_neg2>
     bae:	3e f4       	brtc	.+14     	; 0xbbe <__divmodhi4_exit>

00000bb0 <__divmodhi4_neg1>:
     bb0:	90 95       	com	r25
     bb2:	81 95       	neg	r24
     bb4:	9f 4f       	sbci	r25, 0xFF	; 255
     bb6:	08 95       	ret

00000bb8 <__divmodhi4_neg2>:
     bb8:	70 95       	com	r23
     bba:	61 95       	neg	r22
     bbc:	7f 4f       	sbci	r23, 0xFF	; 255

00000bbe <__divmodhi4_exit>:
     bbe:	08 95       	ret

00000bc0 <__udivmodhi4>:
     bc0:	aa 1b       	sub	r26, r26
     bc2:	bb 1b       	sub	r27, r27
     bc4:	51 e1       	ldi	r21, 0x11	; 17
     bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <__udivmodhi4_ep>

00000bc8 <__udivmodhi4_loop>:
     bc8:	aa 1f       	adc	r26, r26
     bca:	bb 1f       	adc	r27, r27
     bcc:	a6 17       	cp	r26, r22
     bce:	b7 07       	cpc	r27, r23
     bd0:	10 f0       	brcs	.+4      	; 0xbd6 <__udivmodhi4_ep>
     bd2:	a6 1b       	sub	r26, r22
     bd4:	b7 0b       	sbc	r27, r23

00000bd6 <__udivmodhi4_ep>:
     bd6:	88 1f       	adc	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	5a 95       	dec	r21
     bdc:	a9 f7       	brne	.-22     	; 0xbc8 <__udivmodhi4_loop>
     bde:	80 95       	com	r24
     be0:	90 95       	com	r25
     be2:	bc 01       	movw	r22, r24
     be4:	cd 01       	movw	r24, r26
     be6:	08 95       	ret

00000be8 <sprintf>:
     be8:	ae e0       	ldi	r26, 0x0E	; 14
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ea ef       	ldi	r30, 0xFA	; 250
     bee:	f5 e0       	ldi	r31, 0x05	; 5
     bf0:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__prologue_saves__+0x1c>
     bf4:	0d 89       	ldd	r16, Y+21	; 0x15
     bf6:	1e 89       	ldd	r17, Y+22	; 0x16
     bf8:	86 e0       	ldi	r24, 0x06	; 6
     bfa:	8c 83       	std	Y+4, r24	; 0x04
     bfc:	1a 83       	std	Y+2, r17	; 0x02
     bfe:	09 83       	std	Y+1, r16	; 0x01
     c00:	8f ef       	ldi	r24, 0xFF	; 255
     c02:	9f e7       	ldi	r25, 0x7F	; 127
     c04:	9e 83       	std	Y+6, r25	; 0x06
     c06:	8d 83       	std	Y+5, r24	; 0x05
     c08:	ae 01       	movw	r20, r28
     c0a:	47 5e       	subi	r20, 0xE7	; 231
     c0c:	5f 4f       	sbci	r21, 0xFF	; 255
     c0e:	6f 89       	ldd	r22, Y+23	; 0x17
     c10:	78 8d       	ldd	r23, Y+24	; 0x18
     c12:	ce 01       	movw	r24, r28
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	0e 94 17 06 	call	0xc2e	; 0xc2e <vfprintf>
     c1a:	2f 81       	ldd	r18, Y+7	; 0x07
     c1c:	38 85       	ldd	r19, Y+8	; 0x08
     c1e:	f8 01       	movw	r30, r16
     c20:	e2 0f       	add	r30, r18
     c22:	f3 1f       	adc	r31, r19
     c24:	10 82       	st	Z, r1
     c26:	2e 96       	adiw	r28, 0x0e	; 14
     c28:	e4 e0       	ldi	r30, 0x04	; 4
     c2a:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__epilogue_restores__+0x1c>

00000c2e <vfprintf>:
     c2e:	ac e0       	ldi	r26, 0x0C	; 12
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	ed e1       	ldi	r30, 0x1D	; 29
     c34:	f6 e0       	ldi	r31, 0x06	; 6
     c36:	0c 94 95 08 	jmp	0x112a	; 0x112a <__prologue_saves__>
     c3a:	7c 01       	movw	r14, r24
     c3c:	6b 01       	movw	r12, r22
     c3e:	8a 01       	movw	r16, r20
     c40:	fc 01       	movw	r30, r24
     c42:	17 82       	std	Z+7, r1	; 0x07
     c44:	16 82       	std	Z+6, r1	; 0x06
     c46:	83 81       	ldd	r24, Z+3	; 0x03
     c48:	81 ff       	sbrs	r24, 1
     c4a:	bd c1       	rjmp	.+890    	; 0xfc6 <vfprintf+0x398>
     c4c:	ce 01       	movw	r24, r28
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	4c 01       	movw	r8, r24
     c52:	f7 01       	movw	r30, r14
     c54:	93 81       	ldd	r25, Z+3	; 0x03
     c56:	f6 01       	movw	r30, r12
     c58:	93 fd       	sbrc	r25, 3
     c5a:	85 91       	lpm	r24, Z+
     c5c:	93 ff       	sbrs	r25, 3
     c5e:	81 91       	ld	r24, Z+
     c60:	6f 01       	movw	r12, r30
     c62:	88 23       	and	r24, r24
     c64:	09 f4       	brne	.+2      	; 0xc68 <vfprintf+0x3a>
     c66:	ab c1       	rjmp	.+854    	; 0xfbe <vfprintf+0x390>
     c68:	85 32       	cpi	r24, 0x25	; 37
     c6a:	39 f4       	brne	.+14     	; 0xc7a <vfprintf+0x4c>
     c6c:	93 fd       	sbrc	r25, 3
     c6e:	85 91       	lpm	r24, Z+
     c70:	93 ff       	sbrs	r25, 3
     c72:	81 91       	ld	r24, Z+
     c74:	6f 01       	movw	r12, r30
     c76:	85 32       	cpi	r24, 0x25	; 37
     c78:	29 f4       	brne	.+10     	; 0xc84 <vfprintf+0x56>
     c7a:	b7 01       	movw	r22, r14
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
     c82:	e7 cf       	rjmp	.-50     	; 0xc52 <vfprintf+0x24>
     c84:	51 2c       	mov	r5, r1
     c86:	31 2c       	mov	r3, r1
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	20 32       	cpi	r18, 0x20	; 32
     c8c:	a0 f4       	brcc	.+40     	; 0xcb6 <vfprintf+0x88>
     c8e:	8b 32       	cpi	r24, 0x2B	; 43
     c90:	69 f0       	breq	.+26     	; 0xcac <vfprintf+0x7e>
     c92:	30 f4       	brcc	.+12     	; 0xca0 <vfprintf+0x72>
     c94:	80 32       	cpi	r24, 0x20	; 32
     c96:	59 f0       	breq	.+22     	; 0xcae <vfprintf+0x80>
     c98:	83 32       	cpi	r24, 0x23	; 35
     c9a:	69 f4       	brne	.+26     	; 0xcb6 <vfprintf+0x88>
     c9c:	20 61       	ori	r18, 0x10	; 16
     c9e:	2c c0       	rjmp	.+88     	; 0xcf8 <vfprintf+0xca>
     ca0:	8d 32       	cpi	r24, 0x2D	; 45
     ca2:	39 f0       	breq	.+14     	; 0xcb2 <vfprintf+0x84>
     ca4:	80 33       	cpi	r24, 0x30	; 48
     ca6:	39 f4       	brne	.+14     	; 0xcb6 <vfprintf+0x88>
     ca8:	21 60       	ori	r18, 0x01	; 1
     caa:	26 c0       	rjmp	.+76     	; 0xcf8 <vfprintf+0xca>
     cac:	22 60       	ori	r18, 0x02	; 2
     cae:	24 60       	ori	r18, 0x04	; 4
     cb0:	23 c0       	rjmp	.+70     	; 0xcf8 <vfprintf+0xca>
     cb2:	28 60       	ori	r18, 0x08	; 8
     cb4:	21 c0       	rjmp	.+66     	; 0xcf8 <vfprintf+0xca>
     cb6:	27 fd       	sbrc	r18, 7
     cb8:	27 c0       	rjmp	.+78     	; 0xd08 <vfprintf+0xda>
     cba:	30 ed       	ldi	r19, 0xD0	; 208
     cbc:	38 0f       	add	r19, r24
     cbe:	3a 30       	cpi	r19, 0x0A	; 10
     cc0:	78 f4       	brcc	.+30     	; 0xce0 <vfprintf+0xb2>
     cc2:	26 ff       	sbrs	r18, 6
     cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <vfprintf+0xa4>
     cc6:	fa e0       	ldi	r31, 0x0A	; 10
     cc8:	5f 9e       	mul	r5, r31
     cca:	30 0d       	add	r19, r0
     ccc:	11 24       	eor	r1, r1
     cce:	53 2e       	mov	r5, r19
     cd0:	13 c0       	rjmp	.+38     	; 0xcf8 <vfprintf+0xca>
     cd2:	8a e0       	ldi	r24, 0x0A	; 10
     cd4:	38 9e       	mul	r3, r24
     cd6:	30 0d       	add	r19, r0
     cd8:	11 24       	eor	r1, r1
     cda:	33 2e       	mov	r3, r19
     cdc:	20 62       	ori	r18, 0x20	; 32
     cde:	0c c0       	rjmp	.+24     	; 0xcf8 <vfprintf+0xca>
     ce0:	8e 32       	cpi	r24, 0x2E	; 46
     ce2:	21 f4       	brne	.+8      	; 0xcec <vfprintf+0xbe>
     ce4:	26 fd       	sbrc	r18, 6
     ce6:	6b c1       	rjmp	.+726    	; 0xfbe <vfprintf+0x390>
     ce8:	20 64       	ori	r18, 0x40	; 64
     cea:	06 c0       	rjmp	.+12     	; 0xcf8 <vfprintf+0xca>
     cec:	8c 36       	cpi	r24, 0x6C	; 108
     cee:	11 f4       	brne	.+4      	; 0xcf4 <vfprintf+0xc6>
     cf0:	20 68       	ori	r18, 0x80	; 128
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <vfprintf+0xca>
     cf4:	88 36       	cpi	r24, 0x68	; 104
     cf6:	41 f4       	brne	.+16     	; 0xd08 <vfprintf+0xda>
     cf8:	f6 01       	movw	r30, r12
     cfa:	93 fd       	sbrc	r25, 3
     cfc:	85 91       	lpm	r24, Z+
     cfe:	93 ff       	sbrs	r25, 3
     d00:	81 91       	ld	r24, Z+
     d02:	6f 01       	movw	r12, r30
     d04:	81 11       	cpse	r24, r1
     d06:	c1 cf       	rjmp	.-126    	; 0xc8a <vfprintf+0x5c>
     d08:	98 2f       	mov	r25, r24
     d0a:	9f 7d       	andi	r25, 0xDF	; 223
     d0c:	95 54       	subi	r25, 0x45	; 69
     d0e:	93 30       	cpi	r25, 0x03	; 3
     d10:	28 f4       	brcc	.+10     	; 0xd1c <vfprintf+0xee>
     d12:	0c 5f       	subi	r16, 0xFC	; 252
     d14:	1f 4f       	sbci	r17, 0xFF	; 255
     d16:	ff e3       	ldi	r31, 0x3F	; 63
     d18:	f9 83       	std	Y+1, r31	; 0x01
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <vfprintf+0x108>
     d1c:	83 36       	cpi	r24, 0x63	; 99
     d1e:	31 f0       	breq	.+12     	; 0xd2c <vfprintf+0xfe>
     d20:	83 37       	cpi	r24, 0x73	; 115
     d22:	71 f0       	breq	.+28     	; 0xd40 <vfprintf+0x112>
     d24:	83 35       	cpi	r24, 0x53	; 83
     d26:	09 f0       	breq	.+2      	; 0xd2a <vfprintf+0xfc>
     d28:	5b c0       	rjmp	.+182    	; 0xde0 <vfprintf+0x1b2>
     d2a:	22 c0       	rjmp	.+68     	; 0xd70 <vfprintf+0x142>
     d2c:	f8 01       	movw	r30, r16
     d2e:	80 81       	ld	r24, Z
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	0e 5f       	subi	r16, 0xFE	; 254
     d34:	1f 4f       	sbci	r17, 0xFF	; 255
     d36:	44 24       	eor	r4, r4
     d38:	43 94       	inc	r4
     d3a:	51 2c       	mov	r5, r1
     d3c:	54 01       	movw	r10, r8
     d3e:	15 c0       	rjmp	.+42     	; 0xd6a <vfprintf+0x13c>
     d40:	38 01       	movw	r6, r16
     d42:	f2 e0       	ldi	r31, 0x02	; 2
     d44:	6f 0e       	add	r6, r31
     d46:	71 1c       	adc	r7, r1
     d48:	f8 01       	movw	r30, r16
     d4a:	a0 80       	ld	r10, Z
     d4c:	b1 80       	ldd	r11, Z+1	; 0x01
     d4e:	26 ff       	sbrs	r18, 6
     d50:	03 c0       	rjmp	.+6      	; 0xd58 <vfprintf+0x12a>
     d52:	65 2d       	mov	r22, r5
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <vfprintf+0x12e>
     d58:	6f ef       	ldi	r22, 0xFF	; 255
     d5a:	7f ef       	ldi	r23, 0xFF	; 255
     d5c:	c5 01       	movw	r24, r10
     d5e:	2c 87       	std	Y+12, r18	; 0x0c
     d60:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <strnlen>
     d64:	2c 01       	movw	r4, r24
     d66:	83 01       	movw	r16, r6
     d68:	2c 85       	ldd	r18, Y+12	; 0x0c
     d6a:	2f 77       	andi	r18, 0x7F	; 127
     d6c:	22 2e       	mov	r2, r18
     d6e:	17 c0       	rjmp	.+46     	; 0xd9e <vfprintf+0x170>
     d70:	38 01       	movw	r6, r16
     d72:	f2 e0       	ldi	r31, 0x02	; 2
     d74:	6f 0e       	add	r6, r31
     d76:	71 1c       	adc	r7, r1
     d78:	f8 01       	movw	r30, r16
     d7a:	a0 80       	ld	r10, Z
     d7c:	b1 80       	ldd	r11, Z+1	; 0x01
     d7e:	26 ff       	sbrs	r18, 6
     d80:	03 c0       	rjmp	.+6      	; 0xd88 <vfprintf+0x15a>
     d82:	65 2d       	mov	r22, r5
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <vfprintf+0x15e>
     d88:	6f ef       	ldi	r22, 0xFF	; 255
     d8a:	7f ef       	ldi	r23, 0xFF	; 255
     d8c:	c5 01       	movw	r24, r10
     d8e:	2c 87       	std	Y+12, r18	; 0x0c
     d90:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <strnlen_P>
     d94:	2c 01       	movw	r4, r24
     d96:	2c 85       	ldd	r18, Y+12	; 0x0c
     d98:	20 68       	ori	r18, 0x80	; 128
     d9a:	22 2e       	mov	r2, r18
     d9c:	83 01       	movw	r16, r6
     d9e:	23 fc       	sbrc	r2, 3
     da0:	1b c0       	rjmp	.+54     	; 0xdd8 <vfprintf+0x1aa>
     da2:	83 2d       	mov	r24, r3
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	48 16       	cp	r4, r24
     da8:	59 06       	cpc	r5, r25
     daa:	b0 f4       	brcc	.+44     	; 0xdd8 <vfprintf+0x1aa>
     dac:	b7 01       	movw	r22, r14
     dae:	80 e2       	ldi	r24, 0x20	; 32
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
     db6:	3a 94       	dec	r3
     db8:	f4 cf       	rjmp	.-24     	; 0xda2 <vfprintf+0x174>
     dba:	f5 01       	movw	r30, r10
     dbc:	27 fc       	sbrc	r2, 7
     dbe:	85 91       	lpm	r24, Z+
     dc0:	27 fe       	sbrs	r2, 7
     dc2:	81 91       	ld	r24, Z+
     dc4:	5f 01       	movw	r10, r30
     dc6:	b7 01       	movw	r22, r14
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
     dce:	31 10       	cpse	r3, r1
     dd0:	3a 94       	dec	r3
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
     dd4:	4f 1a       	sub	r4, r31
     dd6:	51 08       	sbc	r5, r1
     dd8:	41 14       	cp	r4, r1
     dda:	51 04       	cpc	r5, r1
     ddc:	71 f7       	brne	.-36     	; 0xdba <vfprintf+0x18c>
     dde:	e5 c0       	rjmp	.+458    	; 0xfaa <vfprintf+0x37c>
     de0:	84 36       	cpi	r24, 0x64	; 100
     de2:	11 f0       	breq	.+4      	; 0xde8 <vfprintf+0x1ba>
     de4:	89 36       	cpi	r24, 0x69	; 105
     de6:	39 f5       	brne	.+78     	; 0xe36 <vfprintf+0x208>
     de8:	f8 01       	movw	r30, r16
     dea:	27 ff       	sbrs	r18, 7
     dec:	07 c0       	rjmp	.+14     	; 0xdfc <vfprintf+0x1ce>
     dee:	60 81       	ld	r22, Z
     df0:	71 81       	ldd	r23, Z+1	; 0x01
     df2:	82 81       	ldd	r24, Z+2	; 0x02
     df4:	93 81       	ldd	r25, Z+3	; 0x03
     df6:	0c 5f       	subi	r16, 0xFC	; 252
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
     dfa:	08 c0       	rjmp	.+16     	; 0xe0c <vfprintf+0x1de>
     dfc:	60 81       	ld	r22, Z
     dfe:	71 81       	ldd	r23, Z+1	; 0x01
     e00:	07 2e       	mov	r0, r23
     e02:	00 0c       	add	r0, r0
     e04:	88 0b       	sbc	r24, r24
     e06:	99 0b       	sbc	r25, r25
     e08:	0e 5f       	subi	r16, 0xFE	; 254
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	2f 76       	andi	r18, 0x6F	; 111
     e0e:	72 2e       	mov	r7, r18
     e10:	97 ff       	sbrs	r25, 7
     e12:	09 c0       	rjmp	.+18     	; 0xe26 <vfprintf+0x1f8>
     e14:	90 95       	com	r25
     e16:	80 95       	com	r24
     e18:	70 95       	com	r23
     e1a:	61 95       	neg	r22
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	8f 4f       	sbci	r24, 0xFF	; 255
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	20 68       	ori	r18, 0x80	; 128
     e24:	72 2e       	mov	r7, r18
     e26:	2a e0       	ldi	r18, 0x0A	; 10
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	a4 01       	movw	r20, r8
     e2c:	0e 94 37 08 	call	0x106e	; 0x106e <__ultoa_invert>
     e30:	a8 2e       	mov	r10, r24
     e32:	a8 18       	sub	r10, r8
     e34:	44 c0       	rjmp	.+136    	; 0xebe <vfprintf+0x290>
     e36:	85 37       	cpi	r24, 0x75	; 117
     e38:	29 f4       	brne	.+10     	; 0xe44 <vfprintf+0x216>
     e3a:	2f 7e       	andi	r18, 0xEF	; 239
     e3c:	b2 2e       	mov	r11, r18
     e3e:	2a e0       	ldi	r18, 0x0A	; 10
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	25 c0       	rjmp	.+74     	; 0xe8e <vfprintf+0x260>
     e44:	f2 2f       	mov	r31, r18
     e46:	f9 7f       	andi	r31, 0xF9	; 249
     e48:	bf 2e       	mov	r11, r31
     e4a:	8f 36       	cpi	r24, 0x6F	; 111
     e4c:	c1 f0       	breq	.+48     	; 0xe7e <vfprintf+0x250>
     e4e:	18 f4       	brcc	.+6      	; 0xe56 <vfprintf+0x228>
     e50:	88 35       	cpi	r24, 0x58	; 88
     e52:	79 f0       	breq	.+30     	; 0xe72 <vfprintf+0x244>
     e54:	b4 c0       	rjmp	.+360    	; 0xfbe <vfprintf+0x390>
     e56:	80 37       	cpi	r24, 0x70	; 112
     e58:	19 f0       	breq	.+6      	; 0xe60 <vfprintf+0x232>
     e5a:	88 37       	cpi	r24, 0x78	; 120
     e5c:	21 f0       	breq	.+8      	; 0xe66 <vfprintf+0x238>
     e5e:	af c0       	rjmp	.+350    	; 0xfbe <vfprintf+0x390>
     e60:	2f 2f       	mov	r18, r31
     e62:	20 61       	ori	r18, 0x10	; 16
     e64:	b2 2e       	mov	r11, r18
     e66:	b4 fe       	sbrs	r11, 4
     e68:	0d c0       	rjmp	.+26     	; 0xe84 <vfprintf+0x256>
     e6a:	8b 2d       	mov	r24, r11
     e6c:	84 60       	ori	r24, 0x04	; 4
     e6e:	b8 2e       	mov	r11, r24
     e70:	09 c0       	rjmp	.+18     	; 0xe84 <vfprintf+0x256>
     e72:	24 ff       	sbrs	r18, 4
     e74:	0a c0       	rjmp	.+20     	; 0xe8a <vfprintf+0x25c>
     e76:	9f 2f       	mov	r25, r31
     e78:	96 60       	ori	r25, 0x06	; 6
     e7a:	b9 2e       	mov	r11, r25
     e7c:	06 c0       	rjmp	.+12     	; 0xe8a <vfprintf+0x25c>
     e7e:	28 e0       	ldi	r18, 0x08	; 8
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	05 c0       	rjmp	.+10     	; 0xe8e <vfprintf+0x260>
     e84:	20 e1       	ldi	r18, 0x10	; 16
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <vfprintf+0x260>
     e8a:	20 e1       	ldi	r18, 0x10	; 16
     e8c:	32 e0       	ldi	r19, 0x02	; 2
     e8e:	f8 01       	movw	r30, r16
     e90:	b7 fe       	sbrs	r11, 7
     e92:	07 c0       	rjmp	.+14     	; 0xea2 <vfprintf+0x274>
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	0c 5f       	subi	r16, 0xFC	; 252
     e9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ea0:	06 c0       	rjmp	.+12     	; 0xeae <vfprintf+0x280>
     ea2:	60 81       	ld	r22, Z
     ea4:	71 81       	ldd	r23, Z+1	; 0x01
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 5f       	subi	r16, 0xFE	; 254
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
     eae:	a4 01       	movw	r20, r8
     eb0:	0e 94 37 08 	call	0x106e	; 0x106e <__ultoa_invert>
     eb4:	a8 2e       	mov	r10, r24
     eb6:	a8 18       	sub	r10, r8
     eb8:	fb 2d       	mov	r31, r11
     eba:	ff 77       	andi	r31, 0x7F	; 127
     ebc:	7f 2e       	mov	r7, r31
     ebe:	76 fe       	sbrs	r7, 6
     ec0:	0b c0       	rjmp	.+22     	; 0xed8 <vfprintf+0x2aa>
     ec2:	37 2d       	mov	r19, r7
     ec4:	3e 7f       	andi	r19, 0xFE	; 254
     ec6:	a5 14       	cp	r10, r5
     ec8:	50 f4       	brcc	.+20     	; 0xede <vfprintf+0x2b0>
     eca:	74 fe       	sbrs	r7, 4
     ecc:	0a c0       	rjmp	.+20     	; 0xee2 <vfprintf+0x2b4>
     ece:	72 fc       	sbrc	r7, 2
     ed0:	08 c0       	rjmp	.+16     	; 0xee2 <vfprintf+0x2b4>
     ed2:	37 2d       	mov	r19, r7
     ed4:	3e 7e       	andi	r19, 0xEE	; 238
     ed6:	05 c0       	rjmp	.+10     	; 0xee2 <vfprintf+0x2b4>
     ed8:	ba 2c       	mov	r11, r10
     eda:	37 2d       	mov	r19, r7
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <vfprintf+0x2b6>
     ede:	ba 2c       	mov	r11, r10
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <vfprintf+0x2b6>
     ee2:	b5 2c       	mov	r11, r5
     ee4:	34 ff       	sbrs	r19, 4
     ee6:	0d c0       	rjmp	.+26     	; 0xf02 <vfprintf+0x2d4>
     ee8:	fe 01       	movw	r30, r28
     eea:	ea 0d       	add	r30, r10
     eec:	f1 1d       	adc	r31, r1
     eee:	80 81       	ld	r24, Z
     ef0:	80 33       	cpi	r24, 0x30	; 48
     ef2:	11 f4       	brne	.+4      	; 0xef8 <vfprintf+0x2ca>
     ef4:	39 7e       	andi	r19, 0xE9	; 233
     ef6:	09 c0       	rjmp	.+18     	; 0xf0a <vfprintf+0x2dc>
     ef8:	32 ff       	sbrs	r19, 2
     efa:	06 c0       	rjmp	.+12     	; 0xf08 <vfprintf+0x2da>
     efc:	b3 94       	inc	r11
     efe:	b3 94       	inc	r11
     f00:	04 c0       	rjmp	.+8      	; 0xf0a <vfprintf+0x2dc>
     f02:	83 2f       	mov	r24, r19
     f04:	86 78       	andi	r24, 0x86	; 134
     f06:	09 f0       	breq	.+2      	; 0xf0a <vfprintf+0x2dc>
     f08:	b3 94       	inc	r11
     f0a:	33 fd       	sbrc	r19, 3
     f0c:	13 c0       	rjmp	.+38     	; 0xf34 <vfprintf+0x306>
     f0e:	30 ff       	sbrs	r19, 0
     f10:	06 c0       	rjmp	.+12     	; 0xf1e <vfprintf+0x2f0>
     f12:	5a 2c       	mov	r5, r10
     f14:	b3 14       	cp	r11, r3
     f16:	18 f4       	brcc	.+6      	; 0xf1e <vfprintf+0x2f0>
     f18:	53 0c       	add	r5, r3
     f1a:	5b 18       	sub	r5, r11
     f1c:	b3 2c       	mov	r11, r3
     f1e:	b3 14       	cp	r11, r3
     f20:	68 f4       	brcc	.+26     	; 0xf3c <vfprintf+0x30e>
     f22:	b7 01       	movw	r22, r14
     f24:	80 e2       	ldi	r24, 0x20	; 32
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	3c 87       	std	Y+12, r19	; 0x0c
     f2a:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
     f2e:	b3 94       	inc	r11
     f30:	3c 85       	ldd	r19, Y+12	; 0x0c
     f32:	f5 cf       	rjmp	.-22     	; 0xf1e <vfprintf+0x2f0>
     f34:	b3 14       	cp	r11, r3
     f36:	10 f4       	brcc	.+4      	; 0xf3c <vfprintf+0x30e>
     f38:	3b 18       	sub	r3, r11
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <vfprintf+0x310>
     f3c:	31 2c       	mov	r3, r1
     f3e:	34 ff       	sbrs	r19, 4
     f40:	12 c0       	rjmp	.+36     	; 0xf66 <vfprintf+0x338>
     f42:	b7 01       	movw	r22, r14
     f44:	80 e3       	ldi	r24, 0x30	; 48
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	3c 87       	std	Y+12, r19	; 0x0c
     f4a:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
     f4e:	3c 85       	ldd	r19, Y+12	; 0x0c
     f50:	32 ff       	sbrs	r19, 2
     f52:	17 c0       	rjmp	.+46     	; 0xf82 <vfprintf+0x354>
     f54:	31 fd       	sbrc	r19, 1
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <vfprintf+0x330>
     f58:	88 e7       	ldi	r24, 0x78	; 120
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <vfprintf+0x334>
     f5e:	88 e5       	ldi	r24, 0x58	; 88
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	b7 01       	movw	r22, r14
     f64:	0c c0       	rjmp	.+24     	; 0xf7e <vfprintf+0x350>
     f66:	83 2f       	mov	r24, r19
     f68:	86 78       	andi	r24, 0x86	; 134
     f6a:	59 f0       	breq	.+22     	; 0xf82 <vfprintf+0x354>
     f6c:	31 ff       	sbrs	r19, 1
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <vfprintf+0x346>
     f70:	8b e2       	ldi	r24, 0x2B	; 43
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <vfprintf+0x348>
     f74:	80 e2       	ldi	r24, 0x20	; 32
     f76:	37 fd       	sbrc	r19, 7
     f78:	8d e2       	ldi	r24, 0x2D	; 45
     f7a:	b7 01       	movw	r22, r14
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
     f82:	a5 14       	cp	r10, r5
     f84:	38 f4       	brcc	.+14     	; 0xf94 <vfprintf+0x366>
     f86:	b7 01       	movw	r22, r14
     f88:	80 e3       	ldi	r24, 0x30	; 48
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
     f90:	5a 94       	dec	r5
     f92:	f7 cf       	rjmp	.-18     	; 0xf82 <vfprintf+0x354>
     f94:	aa 94       	dec	r10
     f96:	f4 01       	movw	r30, r8
     f98:	ea 0d       	add	r30, r10
     f9a:	f1 1d       	adc	r31, r1
     f9c:	80 81       	ld	r24, Z
     f9e:	b7 01       	movw	r22, r14
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
     fa6:	a1 10       	cpse	r10, r1
     fa8:	f5 cf       	rjmp	.-22     	; 0xf94 <vfprintf+0x366>
     faa:	33 20       	and	r3, r3
     fac:	09 f4       	brne	.+2      	; 0xfb0 <vfprintf+0x382>
     fae:	51 ce       	rjmp	.-862    	; 0xc52 <vfprintf+0x24>
     fb0:	b7 01       	movw	r22, r14
     fb2:	80 e2       	ldi	r24, 0x20	; 32
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
     fba:	3a 94       	dec	r3
     fbc:	f6 cf       	rjmp	.-20     	; 0xfaa <vfprintf+0x37c>
     fbe:	f7 01       	movw	r30, r14
     fc0:	86 81       	ldd	r24, Z+6	; 0x06
     fc2:	97 81       	ldd	r25, Z+7	; 0x07
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <vfprintf+0x39c>
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	9f ef       	ldi	r25, 0xFF	; 255
     fca:	2c 96       	adiw	r28, 0x0c	; 12
     fcc:	e2 e1       	ldi	r30, 0x12	; 18
     fce:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__epilogue_restores__>

00000fd2 <strnlen_P>:
     fd2:	fc 01       	movw	r30, r24
     fd4:	05 90       	lpm	r0, Z+
     fd6:	61 50       	subi	r22, 0x01	; 1
     fd8:	70 40       	sbci	r23, 0x00	; 0
     fda:	01 10       	cpse	r0, r1
     fdc:	d8 f7       	brcc	.-10     	; 0xfd4 <strnlen_P+0x2>
     fde:	80 95       	com	r24
     fe0:	90 95       	com	r25
     fe2:	8e 0f       	add	r24, r30
     fe4:	9f 1f       	adc	r25, r31
     fe6:	08 95       	ret

00000fe8 <strnlen>:
     fe8:	fc 01       	movw	r30, r24
     fea:	61 50       	subi	r22, 0x01	; 1
     fec:	70 40       	sbci	r23, 0x00	; 0
     fee:	01 90       	ld	r0, Z+
     ff0:	01 10       	cpse	r0, r1
     ff2:	d8 f7       	brcc	.-10     	; 0xfea <strnlen+0x2>
     ff4:	80 95       	com	r24
     ff6:	90 95       	com	r25
     ff8:	8e 0f       	add	r24, r30
     ffa:	9f 1f       	adc	r25, r31
     ffc:	08 95       	ret

00000ffe <fputc>:
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	fb 01       	movw	r30, r22
    1008:	23 81       	ldd	r18, Z+3	; 0x03
    100a:	21 fd       	sbrc	r18, 1
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <fputc+0x16>
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	9f ef       	ldi	r25, 0xFF	; 255
    1012:	28 c0       	rjmp	.+80     	; 0x1064 <fputc+0x66>
    1014:	22 ff       	sbrs	r18, 2
    1016:	16 c0       	rjmp	.+44     	; 0x1044 <fputc+0x46>
    1018:	46 81       	ldd	r20, Z+6	; 0x06
    101a:	57 81       	ldd	r21, Z+7	; 0x07
    101c:	24 81       	ldd	r18, Z+4	; 0x04
    101e:	35 81       	ldd	r19, Z+5	; 0x05
    1020:	42 17       	cp	r20, r18
    1022:	53 07       	cpc	r21, r19
    1024:	44 f4       	brge	.+16     	; 0x1036 <fputc+0x38>
    1026:	a0 81       	ld	r26, Z
    1028:	b1 81       	ldd	r27, Z+1	; 0x01
    102a:	9d 01       	movw	r18, r26
    102c:	2f 5f       	subi	r18, 0xFF	; 255
    102e:	3f 4f       	sbci	r19, 0xFF	; 255
    1030:	31 83       	std	Z+1, r19	; 0x01
    1032:	20 83       	st	Z, r18
    1034:	8c 93       	st	X, r24
    1036:	26 81       	ldd	r18, Z+6	; 0x06
    1038:	37 81       	ldd	r19, Z+7	; 0x07
    103a:	2f 5f       	subi	r18, 0xFF	; 255
    103c:	3f 4f       	sbci	r19, 0xFF	; 255
    103e:	37 83       	std	Z+7, r19	; 0x07
    1040:	26 83       	std	Z+6, r18	; 0x06
    1042:	10 c0       	rjmp	.+32     	; 0x1064 <fputc+0x66>
    1044:	eb 01       	movw	r28, r22
    1046:	09 2f       	mov	r16, r25
    1048:	18 2f       	mov	r17, r24
    104a:	00 84       	ldd	r0, Z+8	; 0x08
    104c:	f1 85       	ldd	r31, Z+9	; 0x09
    104e:	e0 2d       	mov	r30, r0
    1050:	09 95       	icall
    1052:	89 2b       	or	r24, r25
    1054:	e1 f6       	brne	.-72     	; 0x100e <fputc+0x10>
    1056:	8e 81       	ldd	r24, Y+6	; 0x06
    1058:	9f 81       	ldd	r25, Y+7	; 0x07
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	9f 83       	std	Y+7, r25	; 0x07
    105e:	8e 83       	std	Y+6, r24	; 0x06
    1060:	81 2f       	mov	r24, r17
    1062:	90 2f       	mov	r25, r16
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	08 95       	ret

0000106e <__ultoa_invert>:
    106e:	fa 01       	movw	r30, r20
    1070:	aa 27       	eor	r26, r26
    1072:	28 30       	cpi	r18, 0x08	; 8
    1074:	51 f1       	breq	.+84     	; 0x10ca <__ultoa_invert+0x5c>
    1076:	20 31       	cpi	r18, 0x10	; 16
    1078:	81 f1       	breq	.+96     	; 0x10da <__ultoa_invert+0x6c>
    107a:	e8 94       	clt
    107c:	6f 93       	push	r22
    107e:	6e 7f       	andi	r22, 0xFE	; 254
    1080:	6e 5f       	subi	r22, 0xFE	; 254
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	8f 4f       	sbci	r24, 0xFF	; 255
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	af 4f       	sbci	r26, 0xFF	; 255
    108a:	b1 e0       	ldi	r27, 0x01	; 1
    108c:	3e d0       	rcall	.+124    	; 0x110a <__ultoa_invert+0x9c>
    108e:	b4 e0       	ldi	r27, 0x04	; 4
    1090:	3c d0       	rcall	.+120    	; 0x110a <__ultoa_invert+0x9c>
    1092:	67 0f       	add	r22, r23
    1094:	78 1f       	adc	r23, r24
    1096:	89 1f       	adc	r24, r25
    1098:	9a 1f       	adc	r25, r26
    109a:	a1 1d       	adc	r26, r1
    109c:	68 0f       	add	r22, r24
    109e:	79 1f       	adc	r23, r25
    10a0:	8a 1f       	adc	r24, r26
    10a2:	91 1d       	adc	r25, r1
    10a4:	a1 1d       	adc	r26, r1
    10a6:	6a 0f       	add	r22, r26
    10a8:	71 1d       	adc	r23, r1
    10aa:	81 1d       	adc	r24, r1
    10ac:	91 1d       	adc	r25, r1
    10ae:	a1 1d       	adc	r26, r1
    10b0:	20 d0       	rcall	.+64     	; 0x10f2 <__ultoa_invert+0x84>
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <__ultoa_invert+0x48>
    10b4:	68 94       	set
    10b6:	3f 91       	pop	r19
    10b8:	2a e0       	ldi	r18, 0x0A	; 10
    10ba:	26 9f       	mul	r18, r22
    10bc:	11 24       	eor	r1, r1
    10be:	30 19       	sub	r19, r0
    10c0:	30 5d       	subi	r19, 0xD0	; 208
    10c2:	31 93       	st	Z+, r19
    10c4:	de f6       	brtc	.-74     	; 0x107c <__ultoa_invert+0xe>
    10c6:	cf 01       	movw	r24, r30
    10c8:	08 95       	ret
    10ca:	46 2f       	mov	r20, r22
    10cc:	47 70       	andi	r20, 0x07	; 7
    10ce:	40 5d       	subi	r20, 0xD0	; 208
    10d0:	41 93       	st	Z+, r20
    10d2:	b3 e0       	ldi	r27, 0x03	; 3
    10d4:	0f d0       	rcall	.+30     	; 0x10f4 <__ultoa_invert+0x86>
    10d6:	c9 f7       	brne	.-14     	; 0x10ca <__ultoa_invert+0x5c>
    10d8:	f6 cf       	rjmp	.-20     	; 0x10c6 <__ultoa_invert+0x58>
    10da:	46 2f       	mov	r20, r22
    10dc:	4f 70       	andi	r20, 0x0F	; 15
    10de:	40 5d       	subi	r20, 0xD0	; 208
    10e0:	4a 33       	cpi	r20, 0x3A	; 58
    10e2:	18 f0       	brcs	.+6      	; 0x10ea <__ultoa_invert+0x7c>
    10e4:	49 5d       	subi	r20, 0xD9	; 217
    10e6:	31 fd       	sbrc	r19, 1
    10e8:	40 52       	subi	r20, 0x20	; 32
    10ea:	41 93       	st	Z+, r20
    10ec:	02 d0       	rcall	.+4      	; 0x10f2 <__ultoa_invert+0x84>
    10ee:	a9 f7       	brne	.-22     	; 0x10da <__ultoa_invert+0x6c>
    10f0:	ea cf       	rjmp	.-44     	; 0x10c6 <__ultoa_invert+0x58>
    10f2:	b4 e0       	ldi	r27, 0x04	; 4
    10f4:	a6 95       	lsr	r26
    10f6:	97 95       	ror	r25
    10f8:	87 95       	ror	r24
    10fa:	77 95       	ror	r23
    10fc:	67 95       	ror	r22
    10fe:	ba 95       	dec	r27
    1100:	c9 f7       	brne	.-14     	; 0x10f4 <__ultoa_invert+0x86>
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	61 05       	cpc	r22, r1
    1106:	71 05       	cpc	r23, r1
    1108:	08 95       	ret
    110a:	9b 01       	movw	r18, r22
    110c:	ac 01       	movw	r20, r24
    110e:	0a 2e       	mov	r0, r26
    1110:	06 94       	lsr	r0
    1112:	57 95       	ror	r21
    1114:	47 95       	ror	r20
    1116:	37 95       	ror	r19
    1118:	27 95       	ror	r18
    111a:	ba 95       	dec	r27
    111c:	c9 f7       	brne	.-14     	; 0x1110 <__ultoa_invert+0xa2>
    111e:	62 0f       	add	r22, r18
    1120:	73 1f       	adc	r23, r19
    1122:	84 1f       	adc	r24, r20
    1124:	95 1f       	adc	r25, r21
    1126:	a0 1d       	adc	r26, r0
    1128:	08 95       	ret

0000112a <__prologue_saves__>:
    112a:	2f 92       	push	r2
    112c:	3f 92       	push	r3
    112e:	4f 92       	push	r4
    1130:	5f 92       	push	r5
    1132:	6f 92       	push	r6
    1134:	7f 92       	push	r7
    1136:	8f 92       	push	r8
    1138:	9f 92       	push	r9
    113a:	af 92       	push	r10
    113c:	bf 92       	push	r11
    113e:	cf 92       	push	r12
    1140:	df 92       	push	r13
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	ca 1b       	sub	r28, r26
    1154:	db 0b       	sbc	r29, r27
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	09 94       	ijmp

00001162 <__epilogue_restores__>:
    1162:	2a 88       	ldd	r2, Y+18	; 0x12
    1164:	39 88       	ldd	r3, Y+17	; 0x11
    1166:	48 88       	ldd	r4, Y+16	; 0x10
    1168:	5f 84       	ldd	r5, Y+15	; 0x0f
    116a:	6e 84       	ldd	r6, Y+14	; 0x0e
    116c:	7d 84       	ldd	r7, Y+13	; 0x0d
    116e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1170:	9b 84       	ldd	r9, Y+11	; 0x0b
    1172:	aa 84       	ldd	r10, Y+10	; 0x0a
    1174:	b9 84       	ldd	r11, Y+9	; 0x09
    1176:	c8 84       	ldd	r12, Y+8	; 0x08
    1178:	df 80       	ldd	r13, Y+7	; 0x07
    117a:	ee 80       	ldd	r14, Y+6	; 0x06
    117c:	fd 80       	ldd	r15, Y+5	; 0x05
    117e:	0c 81       	ldd	r16, Y+4	; 0x04
    1180:	1b 81       	ldd	r17, Y+3	; 0x03
    1182:	aa 81       	ldd	r26, Y+2	; 0x02
    1184:	b9 81       	ldd	r27, Y+1	; 0x01
    1186:	ce 0f       	add	r28, r30
    1188:	d1 1d       	adc	r29, r1
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	ed 01       	movw	r28, r26
    1196:	08 95       	ret

00001198 <_exit>:
    1198:	f8 94       	cli

0000119a <__stop_program>:
    119a:	ff cf       	rjmp	.-2      	; 0x119a <__stop_program>
