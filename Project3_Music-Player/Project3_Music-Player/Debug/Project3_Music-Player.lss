
Project3_Music-Player.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000085e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  0000085e  000008d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d3b  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000517  00000000  00000000  00001873  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000530  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f4  00000000  00000000  000022bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031c  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c12  00000000  00000000  000028cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000034de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 34       	cpi	r26, 0x4A	; 74
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 15 02 	call	0x42a	; 0x42a <main>
  7a:	0c 94 2d 04 	jmp	0x85a	; 0x85a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <wait_avr>:
  WDTCR = 15;
}

void
wait_avr(unsigned short msec)
{
  82:	9c 01       	movw	r18, r24
  TCCR0 = 2;
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	83 bf       	out	0x33, r24	; 51
  while (msec--) {
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
  88:	86 ef       	ldi	r24, 0xF6	; 246

void
wait_avr(unsigned short msec)
{
  TCCR0 = 2;
  while (msec--) {
  8a:	08 c0       	rjmp	.+16     	; 0x9c <wait_avr+0x1a>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
  8c:	82 bf       	out	0x32, r24	; 50
    SET_BIT(TIFR, TOV0);
  8e:	98 b7       	in	r25, 0x38	; 56
  90:	91 60       	ori	r25, 0x01	; 1
  92:	98 bf       	out	0x38, r25	; 56
    WDR();
  94:	a8 95       	wdr
    while (!GET_BIT(TIFR, TOV0));
  96:	08 b6       	in	r0, 0x38	; 56
  98:	00 fe       	sbrs	r0, 0
  9a:	fd cf       	rjmp	.-6      	; 0x96 <wait_avr+0x14>

void
wait_avr(unsigned short msec)
{
  TCCR0 = 2;
  while (msec--) {
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	31 09       	sbc	r19, r1
  a0:	a8 f7       	brcc	.-22     	; 0x8c <wait_avr+0xa>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
    SET_BIT(TIFR, TOV0);
    WDR();
    while (!GET_BIT(TIFR, TOV0));
  }
  TCCR0 = 0;
  a2:	13 be       	out	0x33, r1	; 51
  a4:	08 95       	ret

000000a6 <pressed>:
 */ 

#include "keypad.h"
#include "avr.h"

unsigned char pressed(int r, int c) {
  a6:	e8 2f       	mov	r30, r24
	// PUT ALL ROW AND COL PINS TO NO-CONNECT (DDR = 0, PORT = 0)
	// PUT THE r-th ROW TO '0'
	// PUT THE c-th COL to 'Z'
	// GET THE c-th COL (return 0 or 1, depending of PIN's status)
	DDRC = 0;
  a8:	14 ba       	out	0x14, r1	; 20
	PORTC = 0;
  aa:	15 ba       	out	0x15, r1	; 21

	SET_BIT(PORTC,r);
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	a9 01       	movw	r20, r18
  b4:	0e 2e       	mov	r0, r30
  b6:	02 c0       	rjmp	.+4      	; 0xbc <pressed+0x16>
  b8:	44 0f       	add	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <pressed+0x12>
  c0:	48 2b       	or	r20, r24
  c2:	45 bb       	out	0x15, r20	; 21
	SET_BIT(DDRC,c+4);
  c4:	94 b3       	in	r25, 0x14	; 20
  c6:	6c 5f       	subi	r22, 0xFC	; 252
  c8:	7f 4f       	sbci	r23, 0xFF	; 255
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <pressed+0x2a>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <pressed+0x26>
  d4:	92 2b       	or	r25, r18
  d6:	94 bb       	out	0x14, r25	; 20
	CLR_BIT(PORTC,c+4);
  d8:	95 b3       	in	r25, 0x15	; 21
  da:	20 95       	com	r18
  dc:	29 23       	and	r18, r25
  de:	25 bb       	out	0x15, r18	; 21

	if(!GET_BIT(PINC,r))
  e0:	93 b3       	in	r25, 0x13	; 19
  e2:	89 2f       	mov	r24, r25
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <pressed+0x46>
  e8:	95 95       	asr	r25
  ea:	87 95       	ror	r24
  ec:	ea 95       	dec	r30
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <pressed+0x42>
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	82 27       	eor	r24, r18
	return 1;

	return 0;
}
  f4:	81 70       	andi	r24, 0x01	; 1
  f6:	08 95       	ret

000000f8 <get_key>:

unsigned char get_key() {
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 e0       	ldi	r16, 0x00	; 0
 10a:	10 e0       	ldi	r17, 0x00	; 0
 10c:	c1 2c       	mov	r12, r1
 10e:	d1 2c       	mov	r13, r1
 110:	16 c0       	rjmp	.+44     	; 0x13e <get_key+0x46>
 112:	fc 2e       	mov	r15, r28
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
		for (c = 0; c < 4; ++c) {
			if (pressed(r,c)) {
 114:	be 01       	movw	r22, r28
 116:	c8 01       	movw	r24, r16
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <pressed>
 11c:	88 23       	and	r24, r24
 11e:	31 f0       	breq	.+12     	; 0x12c <get_key+0x34>
 120:	f3 94       	inc	r15
				return (r*4) + c + 1;
 122:	8e 2d       	mov	r24, r14
 124:	88 0f       	add	r24, r24
 126:	88 0f       	add	r24, r24
 128:	8f 0d       	add	r24, r15
 12a:	0d c0       	rjmp	.+26     	; 0x146 <get_key+0x4e>
 12c:	21 96       	adiw	r28, 0x01	; 1
}

unsigned char get_key() {
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
		for (c = 0; c < 4; ++c) {
 12e:	c4 30       	cpi	r28, 0x04	; 4
 130:	d1 05       	cpc	r29, r1
 132:	79 f7       	brne	.-34     	; 0x112 <get_key+0x1a>
 134:	0f 5f       	subi	r16, 0xFF	; 255
 136:	1f 4f       	sbci	r17, 0xFF	; 255
	return 0;
}

unsigned char get_key() {
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
 138:	04 30       	cpi	r16, 0x04	; 4
 13a:	11 05       	cpc	r17, r1
 13c:	21 f0       	breq	.+8      	; 0x146 <get_key+0x4e>
 13e:	e0 2e       	mov	r14, r16
	return 1;

	return 0;
}

unsigned char get_key() {
 140:	cc 2d       	mov	r28, r12
 142:	dd 2d       	mov	r29, r13
 144:	e6 cf       	rjmp	.-52     	; 0x112 <get_key+0x1a>
				return (r*4) + c + 1;
			}
		}
	}
	return 0;
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	df 90       	pop	r13
 154:	cf 90       	pop	r12
 156:	08 95       	ret

00000158 <play_note_volume>:
		wait_avr(freq);
	}
	
}

void play_note_volume(int freq, int dur, double ratio, int tempo) {
 158:	4f 92       	push	r4
 15a:	5f 92       	push	r5
 15c:	6f 92       	push	r6
 15e:	7f 92       	push	r7
 160:	af 92       	push	r10
 162:	bf 92       	push	r11
 164:	cf 92       	push	r12
 166:	df 92       	push	r13
 168:	ef 92       	push	r14
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	fc 01       	movw	r30, r24
 176:	cb 01       	movw	r24, r22
 178:	69 01       	movw	r12, r18
 17a:	7a 01       	movw	r14, r20
	int duration = (dur)/tempo;
 17c:	b8 01       	movw	r22, r16
 17e:	0e 94 05 04 	call	0x80a	; 0x80a <__divmodhi4>
	for(int i = 0; i < duration; i++)
 182:	16 16       	cp	r1, r22
 184:	17 06       	cpc	r1, r23
 186:	8c f5       	brge	.+98     	; 0x1ea <play_note_volume+0x92>
 188:	8b 01       	movw	r16, r22
 18a:	bf 01       	movw	r22, r30
	{
		SET_BIT(PORTB,3);
		wait_avr(freq*(1-ratio));
 18c:	07 2e       	mov	r0, r23
 18e:	00 0c       	add	r0, r0
 190:	88 0b       	sbc	r24, r24
 192:	99 0b       	sbc	r25, r25
 194:	0e 94 0c 03 	call	0x618	; 0x618 <__floatsisf>
 198:	2b 01       	movw	r4, r22
 19a:	3c 01       	movw	r6, r24
 19c:	a7 01       	movw	r20, r14
 19e:	96 01       	movw	r18, r12
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	9f e3       	ldi	r25, 0x3F	; 63
 1a8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__subsf3>
 1ac:	9b 01       	movw	r18, r22
 1ae:	ac 01       	movw	r20, r24
 1b0:	c3 01       	movw	r24, r6
 1b2:	b2 01       	movw	r22, r4
 1b4:	0e 94 98 03 	call	0x730	; 0x730 <__mulsf3>
 1b8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__fixunssfsi>
 1bc:	5b 01       	movw	r10, r22
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	d0 e0       	ldi	r29, 0x00	; 0

void play_note_volume(int freq, int dur, double ratio, int tempo) {
	int duration = (dur)/tempo;
	for(int i = 0; i < duration; i++)
	{
		SET_BIT(PORTB,3);
 1c2:	c3 9a       	sbi	0x18, 3	; 24
		wait_avr(freq*(1-ratio));
 1c4:	c5 01       	movw	r24, r10
 1c6:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
		CLR_BIT(PORTB,3);
 1ca:	c3 98       	cbi	0x18, 3	; 24
		wait_avr(freq*ratio);
 1cc:	a7 01       	movw	r20, r14
 1ce:	96 01       	movw	r18, r12
 1d0:	c3 01       	movw	r24, r6
 1d2:	b2 01       	movw	r22, r4
 1d4:	0e 94 98 03 	call	0x730	; 0x730 <__mulsf3>
 1d8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__fixunssfsi>
 1dc:	cb 01       	movw	r24, r22
 1de:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
	
}

void play_note_volume(int freq, int dur, double ratio, int tempo) {
	int duration = (dur)/tempo;
	for(int i = 0; i < duration; i++)
 1e2:	21 96       	adiw	r28, 0x01	; 1
 1e4:	c0 17       	cp	r28, r16
 1e6:	d1 07       	cpc	r29, r17
 1e8:	61 f7       	brne	.-40     	; 0x1c2 <play_note_volume+0x6a>
		wait_avr(freq*(1-ratio));
		CLR_BIT(PORTB,3);
		wait_avr(freq*ratio);
	}
	
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	bf 90       	pop	r11
 1fc:	af 90       	pop	r10
 1fe:	7f 90       	pop	r7
 200:	6f 90       	pop	r6
 202:	5f 90       	pop	r5
 204:	4f 90       	pop	r4
 206:	08 95       	ret

00000208 <play_music_volume>:
		
	}
}

void play_music_volume(struct note *song,int numNotes, double ratio, int tempo)
{
 208:	4f 92       	push	r4
 20a:	5f 92       	push	r5
 20c:	6f 92       	push	r6
 20e:	7f 92       	push	r7
 210:	8f 92       	push	r8
 212:	9f 92       	push	r9
 214:	af 92       	push	r10
 216:	bf 92       	push	r11
 218:	cf 92       	push	r12
 21a:	df 92       	push	r13
 21c:	ef 92       	push	r14
 21e:	ff 92       	push	r15
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
	for (int i = 0;  i < numNotes; i++)
 228:	16 16       	cp	r1, r22
 22a:	17 06       	cpc	r1, r23
 22c:	5c f5       	brge	.+86     	; 0x284 <play_music_volume+0x7c>
 22e:	48 01       	movw	r8, r16
 230:	29 01       	movw	r4, r18
 232:	3a 01       	movw	r6, r20
 234:	5b 01       	movw	r10, r22
 236:	c8 2f       	mov	r28, r24
 238:	d9 2f       	mov	r29, r25
 23a:	e1 2c       	mov	r14, r1
 23c:	f1 2c       	mov	r15, r1
 23e:	10 c0       	rjmp	.+32     	; 0x260 <play_music_volume+0x58>
	{
		if ((i > 0) && (song[i].freq == song[i-1].freq)) {
 240:	1e 14       	cp	r1, r14
 242:	1f 04       	cpc	r1, r15
 244:	64 f4       	brge	.+24     	; 0x25e <play_music_volume+0x56>
 246:	f6 01       	movw	r30, r12
 248:	24 81       	ldd	r18, Z+4	; 0x04
 24a:	35 81       	ldd	r19, Z+5	; 0x05
 24c:	80 81       	ld	r24, Z
 24e:	91 81       	ldd	r25, Z+1	; 0x01
 250:	28 17       	cp	r18, r24
 252:	39 07       	cpc	r19, r25
 254:	21 f4       	brne	.+8      	; 0x25e <play_music_volume+0x56>
			// int delay = song[i].duration * 0.01;
			wait_avr(5);
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
 25e:	24 96       	adiw	r28, 0x04	; 4
 260:	6e 01       	movw	r12, r28
		}
		play_note_volume(song[i].freq*2, (song[i].duration), ratio, tempo);
 262:	6a 81       	ldd	r22, Y+2	; 0x02
 264:	7b 81       	ldd	r23, Y+3	; 0x03
 266:	88 81       	ld	r24, Y
 268:	99 81       	ldd	r25, Y+1	; 0x01
 26a:	84 01       	movw	r16, r8
 26c:	a3 01       	movw	r20, r6
 26e:	92 01       	movw	r18, r4
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	0e 94 ac 00 	call	0x158	; 0x158 <play_note_volume>
	}
}

void play_music_volume(struct note *song,int numNotes, double ratio, int tempo)
{
	for (int i = 0;  i < numNotes; i++)
 278:	ff ef       	ldi	r31, 0xFF	; 255
 27a:	ef 1a       	sub	r14, r31
 27c:	ff 0a       	sbc	r15, r31
 27e:	ea 14       	cp	r14, r10
 280:	fb 04       	cpc	r15, r11
 282:	f1 f6       	brne	.-68     	; 0x240 <play_music_volume+0x38>
		}
		play_note_volume(song[i].freq*2, (song[i].duration), ratio, tempo);
		
		
	}
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	ff 90       	pop	r15
 28e:	ef 90       	pop	r14
 290:	df 90       	pop	r13
 292:	cf 90       	pop	r12
 294:	bf 90       	pop	r11
 296:	af 90       	pop	r10
 298:	9f 90       	pop	r9
 29a:	8f 90       	pop	r8
 29c:	7f 90       	pop	r7
 29e:	6f 90       	pop	r6
 2a0:	5f 90       	pop	r5
 2a2:	4f 90       	pop	r4
 2a4:	08 95       	ret

000002a6 <playHotCrossBuns>:

void playHotCrossBuns(int tempo, double volumeRatio) {
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	c4 54       	subi	r28, 0x44	; 68
 2b4:	d1 09       	sbc	r29, r1
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	8c 01       	movw	r16, r24
	//hot cross buns: bb aa gggg bb aa gggg g g g g a a a a gg bb aa
	int numNotesCross = 17;

	struct note hot_cross_buns[] = {
 2c2:	94 e4       	ldi	r25, 0x44	; 68
 2c4:	e0 e6       	ldi	r30, 0x60	; 96
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	de 01       	movw	r26, r28
 2ca:	11 96       	adiw	r26, 0x01	; 1
 2cc:	01 90       	ld	r0, Z+
 2ce:	0d 92       	st	X+, r0
 2d0:	9a 95       	dec	r25
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <playHotCrossBuns+0x26>
		{101.2391674,493.88},
		{113.6363636,440},
		{127.5510204,(392*2)}
	};
	   
	play_music_volume(hot_cross_buns, numNotesCross, volumeRatio, tempo);
 2d4:	9a 01       	movw	r18, r20
 2d6:	ab 01       	movw	r20, r22
 2d8:	61 e1       	ldi	r22, 0x11	; 17
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	0e 94 04 01 	call	0x208	; 0x208 <play_music_volume>
}
 2e4:	cc 5b       	subi	r28, 0xBC	; 188
 2e6:	df 4f       	sbci	r29, 0xFF	; 255
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	08 95       	ret

000002fc <playABC>:

void playABC(int tempo, double volumeRatio) {
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	cc 58       	subi	r28, 0x8C	; 140
 30a:	d1 09       	sbc	r29, r1
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	de bf       	out	0x3e, r29	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	cd bf       	out	0x3d, r28	; 61
 316:	8c 01       	movw	r16, r24
	// twinkle twinkle little star (Same as ABC's)
	// c c g g a a gg f f e e d d cc g g f f e e dd c c g g a a gg f f e e d d cc
	
	int numNotesABC = 35;
	   
	struct note twinkle[] = {
 318:	9c e8       	ldi	r25, 0x8C	; 140
 31a:	e4 ea       	ldi	r30, 0xA4	; 164
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	de 01       	movw	r26, r28
 320:	11 96       	adiw	r26, 0x01	; 1
 322:	01 90       	ld	r0, Z+
 324:	0d 92       	st	X+, r0
 326:	9a 95       	dec	r25
 328:	e1 f7       	brne	.-8      	; 0x322 <playABC+0x26>
		{191.1095822,(261.63*2)},
				 
   };
   
   
   play_music_volume(twinkle, numNotesABC, volumeRatio, tempo);
 32a:	9a 01       	movw	r18, r20
 32c:	ab 01       	movw	r20, r22
 32e:	63 e2       	ldi	r22, 0x23	; 35
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	ce 01       	movw	r24, r28
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	0e 94 04 01 	call	0x208	; 0x208 <play_music_volume>
 33a:	c4 57       	subi	r28, 0x74	; 116
 33c:	df 4f       	sbci	r29, 0xFF	; 255
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	de bf       	out	0x3e, r29	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	cd bf       	out	0x3d, r28	; 61
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	08 95       	ret

00000352 <output>:
}

static void
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
 352:	66 23       	and	r22, r22
 354:	11 f0       	breq	.+4      	; 0x35a <output+0x8>
 356:	c0 9a       	sbi	0x18, 0	; 24
 358:	01 c0       	rjmp	.+2      	; 0x35c <output+0xa>
 35a:	c0 98       	cbi	0x18, 0	; 24
  CLR_BIT(PORT, RW_PIN);
 35c:	c1 98       	cbi	0x18, 1	; 24
#define EN_PIN  2

static inline void
set_data(unsigned char x)
{
  PORTD = x;
 35e:	82 bb       	out	0x12, r24	; 18
  DDRD = 0xff;
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	81 bb       	out	0x11, r24	; 17
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
 364:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
 366:	00 00       	nop
  NOP();
 368:	00 00       	nop
  NOP();
 36a:	00 00       	nop
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  CLR_BIT(PORT, EN_PIN);
 36c:	c2 98       	cbi	0x18, 2	; 24
 36e:	08 95       	ret

00000370 <write>:

static unsigned char
input(unsigned char rs)
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
 370:	c0 98       	cbi	0x18, 0	; 24
  SET_BIT(PORT, RW_PIN);
 372:	c1 9a       	sbi	0x18, 1	; 24
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
 374:	11 ba       	out	0x11, r1	; 17
  return PIND;
 376:	90 b3       	in	r25, 0x10	; 16
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
 378:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
 37a:	00 00       	nop
  NOP();
 37c:	00 00       	nop
  NOP();
 37e:	00 00       	nop
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
 380:	11 ba       	out	0x11, r1	; 17
  return PIND;
 382:	90 b3       	in	r25, 0x10	; 16
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  d = get_data();
  CLR_BIT(PORT, EN_PIN);
 384:	c2 98       	cbi	0x18, 2	; 24
}

static void
write(unsigned char c, unsigned char rs)
{
  while (input(0) & 0x80);
 386:	99 23       	and	r25, r25
 388:	9c f3       	brlt	.-26     	; 0x370 <write>
  output(c, rs);
 38a:	0e 94 a9 01 	call	0x352	; 0x352 <output>
 38e:	08 95       	ret

00000390 <ini_lcd>:
}

void
ini_lcd(void)
{
  SET_BIT(DDR, RS_PIN);
 390:	b8 9a       	sbi	0x17, 0	; 23
  SET_BIT(DDR, RW_PIN);
 392:	b9 9a       	sbi	0x17, 1	; 23
  SET_BIT(DDR, EN_PIN);
 394:	ba 9a       	sbi	0x17, 2	; 23
  wait_avr(16);
 396:	80 e1       	ldi	r24, 0x10	; 16
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  output(0x30, 0);
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	80 e3       	ldi	r24, 0x30	; 48
 3a2:	0e 94 a9 01 	call	0x352	; 0x352 <output>
  wait_avr(5);
 3a6:	85 e0       	ldi	r24, 0x05	; 5
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  output(0x30, 0);
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	80 e3       	ldi	r24, 0x30	; 48
 3b2:	0e 94 a9 01 	call	0x352	; 0x352 <output>
  wait_avr(1);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  write(0x3c, 0);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	8c e3       	ldi	r24, 0x3C	; 60
 3c2:	0e 94 b8 01 	call	0x370	; 0x370 <write>
  write(0x0c, 0);
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	8c e0       	ldi	r24, 0x0C	; 12
 3ca:	0e 94 b8 01 	call	0x370	; 0x370 <write>
  write(0x06, 0);
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	86 e0       	ldi	r24, 0x06	; 6
 3d2:	0e 94 b8 01 	call	0x370	; 0x370 <write>
  write(0x01, 0);
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 b8 01 	call	0x370	; 0x370 <write>
 3de:	08 95       	ret

000003e0 <pos_lcd>:
  write(0x01, 0);
}

void
pos_lcd(unsigned char r, unsigned char c)
{
 3e0:	cf 93       	push	r28
  unsigned char n = r * 40 + c;
 3e2:	c6 2f       	mov	r28, r22
 3e4:	98 e2       	ldi	r25, 0x28	; 40
 3e6:	89 9f       	mul	r24, r25
 3e8:	c0 0d       	add	r28, r0
 3ea:	11 24       	eor	r1, r1
  write(0x02, 0);
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	0e 94 b8 01 	call	0x370	; 0x370 <write>
  while (n--) {
 3f4:	cc 23       	and	r28, r28
 3f6:	31 f0       	breq	.+12     	; 0x404 <pos_lcd+0x24>
    write(0x14, 0);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	84 e1       	ldi	r24, 0x14	; 20
 3fc:	0e 94 b8 01 	call	0x370	; 0x370 <write>
 400:	c1 50       	subi	r28, 0x01	; 1
void
pos_lcd(unsigned char r, unsigned char c)
{
  unsigned char n = r * 40 + c;
  write(0x02, 0);
  while (n--) {
 402:	d1 f7       	brne	.-12     	; 0x3f8 <pos_lcd+0x18>
    write(0x14, 0);
  }
}
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <puts_lcd2>:
  }
}

void
puts_lcd2(const char *s)
{
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
  char c;
  while ((c = *(s++)) != 0) {
 40c:	ec 01       	movw	r28, r24
 40e:	21 96       	adiw	r28, 0x01	; 1
 410:	fc 01       	movw	r30, r24
 412:	80 81       	ld	r24, Z
 414:	88 23       	and	r24, r24
 416:	31 f0       	breq	.+12     	; 0x424 <puts_lcd2+0x1c>
    write(c, 1);
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	0e 94 b8 01 	call	0x370	; 0x370 <write>

void
puts_lcd2(const char *s)
{
  char c;
  while ((c = *(s++)) != 0) {
 41e:	89 91       	ld	r24, Y+
 420:	81 11       	cpse	r24, r1
 422:	fa cf       	rjmp	.-12     	; 0x418 <puts_lcd2+0x10>
    write(c, 1);
  }
}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <main>:

int main(void)
{
   /* Replace with your application code */
   
   DDRB = 0x01 << 3;
 42a:	88 e0       	ldi	r24, 0x08	; 8
 42c:	87 bb       	out	0x17, r24	; 23
   
   ini_lcd();
 42e:	0e 94 c8 01 	call	0x390	; 0x390 <ini_lcd>
   pos_lcd(0,0);
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <pos_lcd>
   puts_lcd2("1:Hot Cross Buns");
 43a:	80 e3       	ldi	r24, 0x30	; 48
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 04 02 	call	0x408	; 0x408 <puts_lcd2>
   pos_lcd(1,0);
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <pos_lcd>
   puts_lcd2("2:ABC's");
 44a:	81 e4       	ldi	r24, 0x41	; 65
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 04 02 	call	0x408	; 0x408 <puts_lcd2>
   //LCD HAS 16 CHARACTERS MAX
   
	while (1) {
		for (;;) {
			unsigned char key = get_key();
 452:	0e 94 7c 00 	call	0xf8	; 0xf8 <get_key>
 456:	c8 2f       	mov	r28, r24
			if (key == 1) {
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	49 f4       	brne	.+18     	; 0x46e <main+0x44>
				playHotCrossBuns(1,0.5);
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	7f e3       	ldi	r23, 0x3F	; 63
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 53 01 	call	0x2a6	; 0x2a6 <playHotCrossBuns>
 46c:	16 c0       	rjmp	.+44     	; 0x49a <main+0x70>
			}
			if (key == 2) {
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	49 f4       	brne	.+18     	; 0x484 <main+0x5a>
				playABC(1,0.5);
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	7f e3       	ldi	r23, 0x3F	; 63
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <playABC>
 482:	16 c0       	rjmp	.+44     	; 0x4b0 <main+0x86>
			}
			if (key == 5) { // keypad: 4
 484:	85 30       	cpi	r24, 0x05	; 5
 486:	49 f4       	brne	.+18     	; 0x49a <main+0x70>
				playHotCrossBuns(1,0.99); // lower volume
 488:	44 ea       	ldi	r20, 0xA4	; 164
 48a:	50 e7       	ldi	r21, 0x70	; 112
 48c:	6d e7       	ldi	r22, 0x7D	; 125
 48e:	7f e3       	ldi	r23, 0x3F	; 63
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 53 01 	call	0x2a6	; 0x2a6 <playHotCrossBuns>
 498:	16 c0       	rjmp	.+44     	; 0x4c6 <main+0x9c>
			}
			if (key == 6) { // keypad: 5
 49a:	c6 30       	cpi	r28, 0x06	; 6
 49c:	49 f4       	brne	.+18     	; 0x4b0 <main+0x86>
				playABC(1,0.99); // lower volume
 49e:	44 ea       	ldi	r20, 0xA4	; 164
 4a0:	50 e7       	ldi	r21, 0x70	; 112
 4a2:	6d e7       	ldi	r22, 0x7D	; 125
 4a4:	7f e3       	ldi	r23, 0x3F	; 63
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <playABC>
 4ae:	d1 cf       	rjmp	.-94     	; 0x452 <main+0x28>
			}
			if (key == 9) { // keypad: 7
 4b0:	c9 30       	cpi	r28, 0x09	; 9
 4b2:	49 f4       	brne	.+18     	; 0x4c6 <main+0x9c>
				playHotCrossBuns(2,0.5); // twice as fast
 4b4:	40 e0       	ldi	r20, 0x00	; 0
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	7f e3       	ldi	r23, 0x3F	; 63
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <playHotCrossBuns>
 4c4:	c6 cf       	rjmp	.-116    	; 0x452 <main+0x28>
			}
			if (key == 10) { // keypad: 8
 4c6:	ca 30       	cpi	r28, 0x0A	; 10
 4c8:	21 f6       	brne	.-120    	; 0x452 <main+0x28>
				playABC(2,0.5); // twice as fast
 4ca:	40 e0       	ldi	r20, 0x00	; 0
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	7f e3       	ldi	r23, 0x3F	; 63
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <playABC>
 4da:	bb cf       	rjmp	.-138    	; 0x452 <main+0x28>

000004dc <__subsf3>:
 4dc:	50 58       	subi	r21, 0x80	; 128

000004de <__addsf3>:
 4de:	bb 27       	eor	r27, r27
 4e0:	aa 27       	eor	r26, r26
 4e2:	0e 94 86 02 	call	0x50c	; 0x50c <__addsf3x>
 4e6:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_round>
 4ea:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__fp_pscA>
 4ee:	38 f0       	brcs	.+14     	; 0x4fe <__addsf3+0x20>
 4f0:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fp_pscB>
 4f4:	20 f0       	brcs	.+8      	; 0x4fe <__addsf3+0x20>
 4f6:	39 f4       	brne	.+14     	; 0x506 <__addsf3+0x28>
 4f8:	9f 3f       	cpi	r25, 0xFF	; 255
 4fa:	19 f4       	brne	.+6      	; 0x502 <__addsf3+0x24>
 4fc:	26 f4       	brtc	.+8      	; 0x506 <__addsf3+0x28>
 4fe:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_nan>
 502:	0e f4       	brtc	.+2      	; 0x506 <__addsf3+0x28>
 504:	e0 95       	com	r30
 506:	e7 fb       	bst	r30, 7
 508:	0c 94 47 03 	jmp	0x68e	; 0x68e <__fp_inf>

0000050c <__addsf3x>:
 50c:	e9 2f       	mov	r30, r25
 50e:	0e 94 6f 03 	call	0x6de	; 0x6de <__fp_split3>
 512:	58 f3       	brcs	.-42     	; 0x4ea <__addsf3+0xc>
 514:	ba 17       	cp	r27, r26
 516:	62 07       	cpc	r22, r18
 518:	73 07       	cpc	r23, r19
 51a:	84 07       	cpc	r24, r20
 51c:	95 07       	cpc	r25, r21
 51e:	20 f0       	brcs	.+8      	; 0x528 <__addsf3x+0x1c>
 520:	79 f4       	brne	.+30     	; 0x540 <__addsf3x+0x34>
 522:	a6 f5       	brtc	.+104    	; 0x58c <__addsf3x+0x80>
 524:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_zero>
 528:	0e f4       	brtc	.+2      	; 0x52c <__addsf3x+0x20>
 52a:	e0 95       	com	r30
 52c:	0b 2e       	mov	r0, r27
 52e:	ba 2f       	mov	r27, r26
 530:	a0 2d       	mov	r26, r0
 532:	0b 01       	movw	r0, r22
 534:	b9 01       	movw	r22, r18
 536:	90 01       	movw	r18, r0
 538:	0c 01       	movw	r0, r24
 53a:	ca 01       	movw	r24, r20
 53c:	a0 01       	movw	r20, r0
 53e:	11 24       	eor	r1, r1
 540:	ff 27       	eor	r31, r31
 542:	59 1b       	sub	r21, r25
 544:	99 f0       	breq	.+38     	; 0x56c <__addsf3x+0x60>
 546:	59 3f       	cpi	r21, 0xF9	; 249
 548:	50 f4       	brcc	.+20     	; 0x55e <__addsf3x+0x52>
 54a:	50 3e       	cpi	r21, 0xE0	; 224
 54c:	68 f1       	brcs	.+90     	; 0x5a8 <__addsf3x+0x9c>
 54e:	1a 16       	cp	r1, r26
 550:	f0 40       	sbci	r31, 0x00	; 0
 552:	a2 2f       	mov	r26, r18
 554:	23 2f       	mov	r18, r19
 556:	34 2f       	mov	r19, r20
 558:	44 27       	eor	r20, r20
 55a:	58 5f       	subi	r21, 0xF8	; 248
 55c:	f3 cf       	rjmp	.-26     	; 0x544 <__addsf3x+0x38>
 55e:	46 95       	lsr	r20
 560:	37 95       	ror	r19
 562:	27 95       	ror	r18
 564:	a7 95       	ror	r26
 566:	f0 40       	sbci	r31, 0x00	; 0
 568:	53 95       	inc	r21
 56a:	c9 f7       	brne	.-14     	; 0x55e <__addsf3x+0x52>
 56c:	7e f4       	brtc	.+30     	; 0x58c <__addsf3x+0x80>
 56e:	1f 16       	cp	r1, r31
 570:	ba 0b       	sbc	r27, r26
 572:	62 0b       	sbc	r22, r18
 574:	73 0b       	sbc	r23, r19
 576:	84 0b       	sbc	r24, r20
 578:	ba f0       	brmi	.+46     	; 0x5a8 <__addsf3x+0x9c>
 57a:	91 50       	subi	r25, 0x01	; 1
 57c:	a1 f0       	breq	.+40     	; 0x5a6 <__addsf3x+0x9a>
 57e:	ff 0f       	add	r31, r31
 580:	bb 1f       	adc	r27, r27
 582:	66 1f       	adc	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	88 1f       	adc	r24, r24
 588:	c2 f7       	brpl	.-16     	; 0x57a <__addsf3x+0x6e>
 58a:	0e c0       	rjmp	.+28     	; 0x5a8 <__addsf3x+0x9c>
 58c:	ba 0f       	add	r27, r26
 58e:	62 1f       	adc	r22, r18
 590:	73 1f       	adc	r23, r19
 592:	84 1f       	adc	r24, r20
 594:	48 f4       	brcc	.+18     	; 0x5a8 <__addsf3x+0x9c>
 596:	87 95       	ror	r24
 598:	77 95       	ror	r23
 59a:	67 95       	ror	r22
 59c:	b7 95       	ror	r27
 59e:	f7 95       	ror	r31
 5a0:	9e 3f       	cpi	r25, 0xFE	; 254
 5a2:	08 f0       	brcs	.+2      	; 0x5a6 <__addsf3x+0x9a>
 5a4:	b0 cf       	rjmp	.-160    	; 0x506 <__addsf3+0x28>
 5a6:	93 95       	inc	r25
 5a8:	88 0f       	add	r24, r24
 5aa:	08 f0       	brcs	.+2      	; 0x5ae <__addsf3x+0xa2>
 5ac:	99 27       	eor	r25, r25
 5ae:	ee 0f       	add	r30, r30
 5b0:	97 95       	ror	r25
 5b2:	87 95       	ror	r24
 5b4:	08 95       	ret

000005b6 <__fixunssfsi>:
 5b6:	0e 94 77 03 	call	0x6ee	; 0x6ee <__fp_splitA>
 5ba:	88 f0       	brcs	.+34     	; 0x5de <__fixunssfsi+0x28>
 5bc:	9f 57       	subi	r25, 0x7F	; 127
 5be:	98 f0       	brcs	.+38     	; 0x5e6 <__fixunssfsi+0x30>
 5c0:	b9 2f       	mov	r27, r25
 5c2:	99 27       	eor	r25, r25
 5c4:	b7 51       	subi	r27, 0x17	; 23
 5c6:	b0 f0       	brcs	.+44     	; 0x5f4 <__fixunssfsi+0x3e>
 5c8:	e1 f0       	breq	.+56     	; 0x602 <__fixunssfsi+0x4c>
 5ca:	66 0f       	add	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	88 1f       	adc	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	1a f0       	brmi	.+6      	; 0x5da <__fixunssfsi+0x24>
 5d4:	ba 95       	dec	r27
 5d6:	c9 f7       	brne	.-14     	; 0x5ca <__fixunssfsi+0x14>
 5d8:	14 c0       	rjmp	.+40     	; 0x602 <__fixunssfsi+0x4c>
 5da:	b1 30       	cpi	r27, 0x01	; 1
 5dc:	91 f0       	breq	.+36     	; 0x602 <__fixunssfsi+0x4c>
 5de:	0e 94 91 03 	call	0x722	; 0x722 <__fp_zero>
 5e2:	b1 e0       	ldi	r27, 0x01	; 1
 5e4:	08 95       	ret
 5e6:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_zero>
 5ea:	67 2f       	mov	r22, r23
 5ec:	78 2f       	mov	r23, r24
 5ee:	88 27       	eor	r24, r24
 5f0:	b8 5f       	subi	r27, 0xF8	; 248
 5f2:	39 f0       	breq	.+14     	; 0x602 <__fixunssfsi+0x4c>
 5f4:	b9 3f       	cpi	r27, 0xF9	; 249
 5f6:	cc f3       	brlt	.-14     	; 0x5ea <__fixunssfsi+0x34>
 5f8:	86 95       	lsr	r24
 5fa:	77 95       	ror	r23
 5fc:	67 95       	ror	r22
 5fe:	b3 95       	inc	r27
 600:	d9 f7       	brne	.-10     	; 0x5f8 <__fixunssfsi+0x42>
 602:	3e f4       	brtc	.+14     	; 0x612 <__fixunssfsi+0x5c>
 604:	90 95       	com	r25
 606:	80 95       	com	r24
 608:	70 95       	com	r23
 60a:	61 95       	neg	r22
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f 4f       	sbci	r24, 0xFF	; 255
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	08 95       	ret

00000614 <__floatunsisf>:
 614:	e8 94       	clt
 616:	09 c0       	rjmp	.+18     	; 0x62a <__floatsisf+0x12>

00000618 <__floatsisf>:
 618:	97 fb       	bst	r25, 7
 61a:	3e f4       	brtc	.+14     	; 0x62a <__floatsisf+0x12>
 61c:	90 95       	com	r25
 61e:	80 95       	com	r24
 620:	70 95       	com	r23
 622:	61 95       	neg	r22
 624:	7f 4f       	sbci	r23, 0xFF	; 255
 626:	8f 4f       	sbci	r24, 0xFF	; 255
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	99 23       	and	r25, r25
 62c:	a9 f0       	breq	.+42     	; 0x658 <__floatsisf+0x40>
 62e:	f9 2f       	mov	r31, r25
 630:	96 e9       	ldi	r25, 0x96	; 150
 632:	bb 27       	eor	r27, r27
 634:	93 95       	inc	r25
 636:	f6 95       	lsr	r31
 638:	87 95       	ror	r24
 63a:	77 95       	ror	r23
 63c:	67 95       	ror	r22
 63e:	b7 95       	ror	r27
 640:	f1 11       	cpse	r31, r1
 642:	f8 cf       	rjmp	.-16     	; 0x634 <__floatsisf+0x1c>
 644:	fa f4       	brpl	.+62     	; 0x684 <__floatsisf+0x6c>
 646:	bb 0f       	add	r27, r27
 648:	11 f4       	brne	.+4      	; 0x64e <__floatsisf+0x36>
 64a:	60 ff       	sbrs	r22, 0
 64c:	1b c0       	rjmp	.+54     	; 0x684 <__floatsisf+0x6c>
 64e:	6f 5f       	subi	r22, 0xFF	; 255
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	8f 4f       	sbci	r24, 0xFF	; 255
 654:	9f 4f       	sbci	r25, 0xFF	; 255
 656:	16 c0       	rjmp	.+44     	; 0x684 <__floatsisf+0x6c>
 658:	88 23       	and	r24, r24
 65a:	11 f0       	breq	.+4      	; 0x660 <__floatsisf+0x48>
 65c:	96 e9       	ldi	r25, 0x96	; 150
 65e:	11 c0       	rjmp	.+34     	; 0x682 <__floatsisf+0x6a>
 660:	77 23       	and	r23, r23
 662:	21 f0       	breq	.+8      	; 0x66c <__floatsisf+0x54>
 664:	9e e8       	ldi	r25, 0x8E	; 142
 666:	87 2f       	mov	r24, r23
 668:	76 2f       	mov	r23, r22
 66a:	05 c0       	rjmp	.+10     	; 0x676 <__floatsisf+0x5e>
 66c:	66 23       	and	r22, r22
 66e:	71 f0       	breq	.+28     	; 0x68c <__floatsisf+0x74>
 670:	96 e8       	ldi	r25, 0x86	; 134
 672:	86 2f       	mov	r24, r22
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	2a f0       	brmi	.+10     	; 0x684 <__floatsisf+0x6c>
 67a:	9a 95       	dec	r25
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	da f7       	brpl	.-10     	; 0x67a <__floatsisf+0x62>
 684:	88 0f       	add	r24, r24
 686:	96 95       	lsr	r25
 688:	87 95       	ror	r24
 68a:	97 f9       	bld	r25, 7
 68c:	08 95       	ret

0000068e <__fp_inf>:
 68e:	97 f9       	bld	r25, 7
 690:	9f 67       	ori	r25, 0x7F	; 127
 692:	80 e8       	ldi	r24, 0x80	; 128
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	60 e0       	ldi	r22, 0x00	; 0
 698:	08 95       	ret

0000069a <__fp_nan>:
 69a:	9f ef       	ldi	r25, 0xFF	; 255
 69c:	80 ec       	ldi	r24, 0xC0	; 192
 69e:	08 95       	ret

000006a0 <__fp_pscA>:
 6a0:	00 24       	eor	r0, r0
 6a2:	0a 94       	dec	r0
 6a4:	16 16       	cp	r1, r22
 6a6:	17 06       	cpc	r1, r23
 6a8:	18 06       	cpc	r1, r24
 6aa:	09 06       	cpc	r0, r25
 6ac:	08 95       	ret

000006ae <__fp_pscB>:
 6ae:	00 24       	eor	r0, r0
 6b0:	0a 94       	dec	r0
 6b2:	12 16       	cp	r1, r18
 6b4:	13 06       	cpc	r1, r19
 6b6:	14 06       	cpc	r1, r20
 6b8:	05 06       	cpc	r0, r21
 6ba:	08 95       	ret

000006bc <__fp_round>:
 6bc:	09 2e       	mov	r0, r25
 6be:	03 94       	inc	r0
 6c0:	00 0c       	add	r0, r0
 6c2:	11 f4       	brne	.+4      	; 0x6c8 <__fp_round+0xc>
 6c4:	88 23       	and	r24, r24
 6c6:	52 f0       	brmi	.+20     	; 0x6dc <__fp_round+0x20>
 6c8:	bb 0f       	add	r27, r27
 6ca:	40 f4       	brcc	.+16     	; 0x6dc <__fp_round+0x20>
 6cc:	bf 2b       	or	r27, r31
 6ce:	11 f4       	brne	.+4      	; 0x6d4 <__fp_round+0x18>
 6d0:	60 ff       	sbrs	r22, 0
 6d2:	04 c0       	rjmp	.+8      	; 0x6dc <__fp_round+0x20>
 6d4:	6f 5f       	subi	r22, 0xFF	; 255
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255
 6d8:	8f 4f       	sbci	r24, 0xFF	; 255
 6da:	9f 4f       	sbci	r25, 0xFF	; 255
 6dc:	08 95       	ret

000006de <__fp_split3>:
 6de:	57 fd       	sbrc	r21, 7
 6e0:	90 58       	subi	r25, 0x80	; 128
 6e2:	44 0f       	add	r20, r20
 6e4:	55 1f       	adc	r21, r21
 6e6:	59 f0       	breq	.+22     	; 0x6fe <__fp_splitA+0x10>
 6e8:	5f 3f       	cpi	r21, 0xFF	; 255
 6ea:	71 f0       	breq	.+28     	; 0x708 <__fp_splitA+0x1a>
 6ec:	47 95       	ror	r20

000006ee <__fp_splitA>:
 6ee:	88 0f       	add	r24, r24
 6f0:	97 fb       	bst	r25, 7
 6f2:	99 1f       	adc	r25, r25
 6f4:	61 f0       	breq	.+24     	; 0x70e <__fp_splitA+0x20>
 6f6:	9f 3f       	cpi	r25, 0xFF	; 255
 6f8:	79 f0       	breq	.+30     	; 0x718 <__fp_splitA+0x2a>
 6fa:	87 95       	ror	r24
 6fc:	08 95       	ret
 6fe:	12 16       	cp	r1, r18
 700:	13 06       	cpc	r1, r19
 702:	14 06       	cpc	r1, r20
 704:	55 1f       	adc	r21, r21
 706:	f2 cf       	rjmp	.-28     	; 0x6ec <__fp_split3+0xe>
 708:	46 95       	lsr	r20
 70a:	f1 df       	rcall	.-30     	; 0x6ee <__fp_splitA>
 70c:	08 c0       	rjmp	.+16     	; 0x71e <__fp_splitA+0x30>
 70e:	16 16       	cp	r1, r22
 710:	17 06       	cpc	r1, r23
 712:	18 06       	cpc	r1, r24
 714:	99 1f       	adc	r25, r25
 716:	f1 cf       	rjmp	.-30     	; 0x6fa <__fp_splitA+0xc>
 718:	86 95       	lsr	r24
 71a:	71 05       	cpc	r23, r1
 71c:	61 05       	cpc	r22, r1
 71e:	08 94       	sec
 720:	08 95       	ret

00000722 <__fp_zero>:
 722:	e8 94       	clt

00000724 <__fp_szero>:
 724:	bb 27       	eor	r27, r27
 726:	66 27       	eor	r22, r22
 728:	77 27       	eor	r23, r23
 72a:	cb 01       	movw	r24, r22
 72c:	97 f9       	bld	r25, 7
 72e:	08 95       	ret

00000730 <__mulsf3>:
 730:	0e 94 ab 03 	call	0x756	; 0x756 <__mulsf3x>
 734:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_round>
 738:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__fp_pscA>
 73c:	38 f0       	brcs	.+14     	; 0x74c <__mulsf3+0x1c>
 73e:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fp_pscB>
 742:	20 f0       	brcs	.+8      	; 0x74c <__mulsf3+0x1c>
 744:	95 23       	and	r25, r21
 746:	11 f0       	breq	.+4      	; 0x74c <__mulsf3+0x1c>
 748:	0c 94 47 03 	jmp	0x68e	; 0x68e <__fp_inf>
 74c:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_nan>
 750:	11 24       	eor	r1, r1
 752:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_szero>

00000756 <__mulsf3x>:
 756:	0e 94 6f 03 	call	0x6de	; 0x6de <__fp_split3>
 75a:	70 f3       	brcs	.-36     	; 0x738 <__mulsf3+0x8>

0000075c <__mulsf3_pse>:
 75c:	95 9f       	mul	r25, r21
 75e:	c1 f3       	breq	.-16     	; 0x750 <__mulsf3+0x20>
 760:	95 0f       	add	r25, r21
 762:	50 e0       	ldi	r21, 0x00	; 0
 764:	55 1f       	adc	r21, r21
 766:	62 9f       	mul	r22, r18
 768:	f0 01       	movw	r30, r0
 76a:	72 9f       	mul	r23, r18
 76c:	bb 27       	eor	r27, r27
 76e:	f0 0d       	add	r31, r0
 770:	b1 1d       	adc	r27, r1
 772:	63 9f       	mul	r22, r19
 774:	aa 27       	eor	r26, r26
 776:	f0 0d       	add	r31, r0
 778:	b1 1d       	adc	r27, r1
 77a:	aa 1f       	adc	r26, r26
 77c:	64 9f       	mul	r22, r20
 77e:	66 27       	eor	r22, r22
 780:	b0 0d       	add	r27, r0
 782:	a1 1d       	adc	r26, r1
 784:	66 1f       	adc	r22, r22
 786:	82 9f       	mul	r24, r18
 788:	22 27       	eor	r18, r18
 78a:	b0 0d       	add	r27, r0
 78c:	a1 1d       	adc	r26, r1
 78e:	62 1f       	adc	r22, r18
 790:	73 9f       	mul	r23, r19
 792:	b0 0d       	add	r27, r0
 794:	a1 1d       	adc	r26, r1
 796:	62 1f       	adc	r22, r18
 798:	83 9f       	mul	r24, r19
 79a:	a0 0d       	add	r26, r0
 79c:	61 1d       	adc	r22, r1
 79e:	22 1f       	adc	r18, r18
 7a0:	74 9f       	mul	r23, r20
 7a2:	33 27       	eor	r19, r19
 7a4:	a0 0d       	add	r26, r0
 7a6:	61 1d       	adc	r22, r1
 7a8:	23 1f       	adc	r18, r19
 7aa:	84 9f       	mul	r24, r20
 7ac:	60 0d       	add	r22, r0
 7ae:	21 1d       	adc	r18, r1
 7b0:	82 2f       	mov	r24, r18
 7b2:	76 2f       	mov	r23, r22
 7b4:	6a 2f       	mov	r22, r26
 7b6:	11 24       	eor	r1, r1
 7b8:	9f 57       	subi	r25, 0x7F	; 127
 7ba:	50 40       	sbci	r21, 0x00	; 0
 7bc:	9a f0       	brmi	.+38     	; 0x7e4 <__mulsf3_pse+0x88>
 7be:	f1 f0       	breq	.+60     	; 0x7fc <__mulsf3_pse+0xa0>
 7c0:	88 23       	and	r24, r24
 7c2:	4a f0       	brmi	.+18     	; 0x7d6 <__mulsf3_pse+0x7a>
 7c4:	ee 0f       	add	r30, r30
 7c6:	ff 1f       	adc	r31, r31
 7c8:	bb 1f       	adc	r27, r27
 7ca:	66 1f       	adc	r22, r22
 7cc:	77 1f       	adc	r23, r23
 7ce:	88 1f       	adc	r24, r24
 7d0:	91 50       	subi	r25, 0x01	; 1
 7d2:	50 40       	sbci	r21, 0x00	; 0
 7d4:	a9 f7       	brne	.-22     	; 0x7c0 <__mulsf3_pse+0x64>
 7d6:	9e 3f       	cpi	r25, 0xFE	; 254
 7d8:	51 05       	cpc	r21, r1
 7da:	80 f0       	brcs	.+32     	; 0x7fc <__mulsf3_pse+0xa0>
 7dc:	0c 94 47 03 	jmp	0x68e	; 0x68e <__fp_inf>
 7e0:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_szero>
 7e4:	5f 3f       	cpi	r21, 0xFF	; 255
 7e6:	e4 f3       	brlt	.-8      	; 0x7e0 <__mulsf3_pse+0x84>
 7e8:	98 3e       	cpi	r25, 0xE8	; 232
 7ea:	d4 f3       	brlt	.-12     	; 0x7e0 <__mulsf3_pse+0x84>
 7ec:	86 95       	lsr	r24
 7ee:	77 95       	ror	r23
 7f0:	67 95       	ror	r22
 7f2:	b7 95       	ror	r27
 7f4:	f7 95       	ror	r31
 7f6:	e7 95       	ror	r30
 7f8:	9f 5f       	subi	r25, 0xFF	; 255
 7fa:	c1 f7       	brne	.-16     	; 0x7ec <__mulsf3_pse+0x90>
 7fc:	fe 2b       	or	r31, r30
 7fe:	88 0f       	add	r24, r24
 800:	91 1d       	adc	r25, r1
 802:	96 95       	lsr	r25
 804:	87 95       	ror	r24
 806:	97 f9       	bld	r25, 7
 808:	08 95       	ret

0000080a <__divmodhi4>:
 80a:	97 fb       	bst	r25, 7
 80c:	07 2e       	mov	r0, r23
 80e:	16 f4       	brtc	.+4      	; 0x814 <__divmodhi4+0xa>
 810:	00 94       	com	r0
 812:	07 d0       	rcall	.+14     	; 0x822 <__divmodhi4_neg1>
 814:	77 fd       	sbrc	r23, 7
 816:	09 d0       	rcall	.+18     	; 0x82a <__divmodhi4_neg2>
 818:	0e 94 19 04 	call	0x832	; 0x832 <__udivmodhi4>
 81c:	07 fc       	sbrc	r0, 7
 81e:	05 d0       	rcall	.+10     	; 0x82a <__divmodhi4_neg2>
 820:	3e f4       	brtc	.+14     	; 0x830 <__divmodhi4_exit>

00000822 <__divmodhi4_neg1>:
 822:	90 95       	com	r25
 824:	81 95       	neg	r24
 826:	9f 4f       	sbci	r25, 0xFF	; 255
 828:	08 95       	ret

0000082a <__divmodhi4_neg2>:
 82a:	70 95       	com	r23
 82c:	61 95       	neg	r22
 82e:	7f 4f       	sbci	r23, 0xFF	; 255

00000830 <__divmodhi4_exit>:
 830:	08 95       	ret

00000832 <__udivmodhi4>:
 832:	aa 1b       	sub	r26, r26
 834:	bb 1b       	sub	r27, r27
 836:	51 e1       	ldi	r21, 0x11	; 17
 838:	07 c0       	rjmp	.+14     	; 0x848 <__udivmodhi4_ep>

0000083a <__udivmodhi4_loop>:
 83a:	aa 1f       	adc	r26, r26
 83c:	bb 1f       	adc	r27, r27
 83e:	a6 17       	cp	r26, r22
 840:	b7 07       	cpc	r27, r23
 842:	10 f0       	brcs	.+4      	; 0x848 <__udivmodhi4_ep>
 844:	a6 1b       	sub	r26, r22
 846:	b7 0b       	sbc	r27, r23

00000848 <__udivmodhi4_ep>:
 848:	88 1f       	adc	r24, r24
 84a:	99 1f       	adc	r25, r25
 84c:	5a 95       	dec	r21
 84e:	a9 f7       	brne	.-22     	; 0x83a <__udivmodhi4_loop>
 850:	80 95       	com	r24
 852:	90 95       	com	r25
 854:	bc 01       	movw	r22, r24
 856:	cd 01       	movw	r24, r26
 858:	08 95       	ret

0000085a <_exit>:
 85a:	f8 94       	cli

0000085c <__stop_program>:
 85c:	ff cf       	rjmp	.-2      	; 0x85c <__stop_program>
