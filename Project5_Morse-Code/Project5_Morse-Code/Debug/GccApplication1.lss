
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00800060  00000fbe  00001052  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800126  00800126  00001118  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000159a  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f9  00000000  00000000  0000287a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b5b  00000000  00000000  00002e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  000039d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d5  00000000  00000000  00003e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001209  00000000  00000000  000041d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000053de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 32       	cpi	r26, 0x26	; 38
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e2       	ldi	r26, 0x26	; 38
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 34       	cpi	r26, 0x4E	; 78
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ca 03 	call	0x794	; 0x794 <main>
  8a:	0c 94 dd 07 	jmp	0xfba	; 0xfba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wait_avr>:
	WDTCR = 15;
}

void
wait_avr(unsigned short msec)
{
  92:	9c 01       	movw	r18, r24
	TCCR0 = 3;
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  98:	83 e8       	ldi	r24, 0x83	; 131

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  9a:	08 c0       	rjmp	.+16     	; 0xac <wait_avr+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  9c:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
  9e:	98 b7       	in	r25, 0x38	; 56
  a0:	91 60       	ori	r25, 0x01	; 1
  a2:	98 bf       	out	0x38, r25	; 56
		WDR();
  a4:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
  a6:	08 b6       	in	r0, 0x38	; 56
  a8:	00 fe       	sbrs	r0, 0
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <wait_avr+0x14>

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	31 09       	sbc	r19, r1
  b0:	a8 f7       	brcc	.-22     	; 0x9c <wait_avr+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
  b2:	13 be       	out	0x33, r1	; 51
  b4:	08 95       	ret

000000b6 <pressed>:
 */ 

#include "keypad.h"
#include "avr.h"

unsigned char pressed(int r, int c) {
  b6:	e8 2f       	mov	r30, r24
	// PUT ALL ROW AND COL PINS TO NO-CONNECT (DDR = 0, PORT = 0)
	// PUT THE r-th ROW TO '0'
	// PUT THE c-th COL to 'Z'
	// GET THE c-th COL (return 0 or 1, depending of PIN's status)
	DDRC = 0;
  b8:	14 ba       	out	0x14, r1	; 20
	PORTC = 0;
  ba:	15 ba       	out	0x15, r1	; 21

	SET_BIT(PORTC,r);
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	a9 01       	movw	r20, r18
  c4:	0e 2e       	mov	r0, r30
  c6:	02 c0       	rjmp	.+4      	; 0xcc <pressed+0x16>
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <pressed+0x12>
  d0:	48 2b       	or	r20, r24
  d2:	45 bb       	out	0x15, r20	; 21
	SET_BIT(DDRC,c+4);
  d4:	94 b3       	in	r25, 0x14	; 20
  d6:	6c 5f       	subi	r22, 0xFC	; 252
  d8:	7f 4f       	sbci	r23, 0xFF	; 255
  da:	02 c0       	rjmp	.+4      	; 0xe0 <pressed+0x2a>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <pressed+0x26>
  e4:	92 2b       	or	r25, r18
  e6:	94 bb       	out	0x14, r25	; 20
	CLR_BIT(PORTC,c+4);
  e8:	95 b3       	in	r25, 0x15	; 21
  ea:	20 95       	com	r18
  ec:	29 23       	and	r18, r25
  ee:	25 bb       	out	0x15, r18	; 21

	if(!GET_BIT(PINC,r))
  f0:	93 b3       	in	r25, 0x13	; 19
  f2:	89 2f       	mov	r24, r25
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <pressed+0x46>
  f8:	95 95       	asr	r25
  fa:	87 95       	ror	r24
  fc:	ea 95       	dec	r30
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <pressed+0x42>
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	82 27       	eor	r24, r18
	return 1;

	return 0;
}
 104:	81 70       	andi	r24, 0x01	; 1
 106:	08 95       	ret

00000108 <get_key>:

unsigned char get_key() {
 108:	cf 92       	push	r12
 10a:	df 92       	push	r13
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	00 e0       	ldi	r16, 0x00	; 0
 11a:	10 e0       	ldi	r17, 0x00	; 0
 11c:	c1 2c       	mov	r12, r1
 11e:	d1 2c       	mov	r13, r1
 120:	16 c0       	rjmp	.+44     	; 0x14e <get_key+0x46>
 122:	fc 2e       	mov	r15, r28
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
		for (c = 0; c < 4; ++c) {
			if (pressed(r,c)) {
 124:	be 01       	movw	r22, r28
 126:	c8 01       	movw	r24, r16
 128:	0e 94 5b 00 	call	0xb6	; 0xb6 <pressed>
 12c:	88 23       	and	r24, r24
 12e:	31 f0       	breq	.+12     	; 0x13c <get_key+0x34>
 130:	f3 94       	inc	r15
				return (r*4) + c + 1;
 132:	8e 2d       	mov	r24, r14
 134:	88 0f       	add	r24, r24
 136:	88 0f       	add	r24, r24
 138:	8f 0d       	add	r24, r15
 13a:	0d c0       	rjmp	.+26     	; 0x156 <get_key+0x4e>
 13c:	21 96       	adiw	r28, 0x01	; 1
}

unsigned char get_key() {
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
		for (c = 0; c < 4; ++c) {
 13e:	c4 30       	cpi	r28, 0x04	; 4
 140:	d1 05       	cpc	r29, r1
 142:	79 f7       	brne	.-34     	; 0x122 <get_key+0x1a>
 144:	0f 5f       	subi	r16, 0xFF	; 255
 146:	1f 4f       	sbci	r17, 0xFF	; 255
	return 0;
}

unsigned char get_key() {
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
 148:	04 30       	cpi	r16, 0x04	; 4
 14a:	11 05       	cpc	r17, r1
 14c:	21 f0       	breq	.+8      	; 0x156 <get_key+0x4e>
 14e:	e0 2e       	mov	r14, r16
	return 1;

	return 0;
}

unsigned char get_key() {
 150:	cc 2d       	mov	r28, r12
 152:	dd 2d       	mov	r29, r13
 154:	e6 cf       	rjmp	.-52     	; 0x122 <get_key+0x1a>
				return (r*4) + c + 1;
			}
		}
	}
	return 0;
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	ef 90       	pop	r14
 162:	df 90       	pop	r13
 164:	cf 90       	pop	r12
 166:	08 95       	ret

00000168 <output>:
{
  char c;
  while ((c = pgm_read_byte(s++)) != 0) {
    write(c, 1);
  }
}
 168:	66 23       	and	r22, r22
 16a:	11 f0       	breq	.+4      	; 0x170 <output+0x8>
 16c:	c0 9a       	sbi	0x18, 0	; 24
 16e:	01 c0       	rjmp	.+2      	; 0x172 <output+0xa>
 170:	c0 98       	cbi	0x18, 0	; 24
 172:	c1 98       	cbi	0x18, 1	; 24
 174:	82 bb       	out	0x12, r24	; 18
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	81 bb       	out	0x11, r24	; 17
 17a:	c2 9a       	sbi	0x18, 2	; 24
 17c:	00 00       	nop
 17e:	00 00       	nop
 180:	00 00       	nop
 182:	c2 98       	cbi	0x18, 2	; 24
 184:	08 95       	ret

00000186 <write>:
 186:	c0 98       	cbi	0x18, 0	; 24
 188:	c1 9a       	sbi	0x18, 1	; 24
 18a:	11 ba       	out	0x11, r1	; 17
 18c:	90 b3       	in	r25, 0x10	; 16
 18e:	c2 9a       	sbi	0x18, 2	; 24
 190:	00 00       	nop
 192:	00 00       	nop
 194:	00 00       	nop
 196:	11 ba       	out	0x11, r1	; 17
 198:	90 b3       	in	r25, 0x10	; 16
 19a:	c2 98       	cbi	0x18, 2	; 24
 19c:	99 23       	and	r25, r25
 19e:	9c f3       	brlt	.-26     	; 0x186 <write>
 1a0:	0e 94 b4 00 	call	0x168	; 0x168 <output>
 1a4:	08 95       	ret

000001a6 <ini_lcd>:
 1a6:	b8 9a       	sbi	0x17, 0	; 23
 1a8:	b9 9a       	sbi	0x17, 1	; 23
 1aa:	ba 9a       	sbi	0x17, 2	; 23
 1ac:	80 e1       	ldi	r24, 0x10	; 16
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	80 e3       	ldi	r24, 0x30	; 48
 1b8:	0e 94 b4 00 	call	0x168	; 0x168 <output>
 1bc:	85 e0       	ldi	r24, 0x05	; 5
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	0e 94 b4 00 	call	0x168	; 0x168 <output>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	8c e3       	ldi	r24, 0x3C	; 60
 1d8:	0e 94 c3 00 	call	0x186	; 0x186 <write>
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	8c e0       	ldi	r24, 0x0C	; 12
 1e0:	0e 94 c3 00 	call	0x186	; 0x186 <write>
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	0e 94 c3 00 	call	0x186	; 0x186 <write>
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 c3 00 	call	0x186	; 0x186 <write>
 1f4:	08 95       	ret

000001f6 <clr_lcd>:
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 c3 00 	call	0x186	; 0x186 <write>
 1fe:	08 95       	ret

00000200 <pos_lcd>:
 200:	cf 93       	push	r28
 202:	c6 2f       	mov	r28, r22
 204:	98 e2       	ldi	r25, 0x28	; 40
 206:	89 9f       	mul	r24, r25
 208:	c0 0d       	add	r28, r0
 20a:	11 24       	eor	r1, r1
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	0e 94 c3 00 	call	0x186	; 0x186 <write>
 214:	cc 23       	and	r28, r28
 216:	31 f0       	breq	.+12     	; 0x224 <pos_lcd+0x24>
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	84 e1       	ldi	r24, 0x14	; 20
 21c:	0e 94 c3 00 	call	0x186	; 0x186 <write>
 220:	c1 50       	subi	r28, 0x01	; 1
 222:	d1 f7       	brne	.-12     	; 0x218 <pos_lcd+0x18>
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <puts_lcd2>:

void
puts_lcd2(const char *s)
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
  char c;
  while ((c = *(s++)) != 0) {
 22c:	ec 01       	movw	r28, r24
 22e:	21 96       	adiw	r28, 0x01	; 1
 230:	fc 01       	movw	r30, r24
 232:	80 81       	ld	r24, Z
 234:	88 23       	and	r24, r24
 236:	31 f0       	breq	.+12     	; 0x244 <puts_lcd2+0x1c>
    write(c, 1);
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	0e 94 c3 00 	call	0x186	; 0x186 <write>

void
puts_lcd2(const char *s)
{
  char c;
  while ((c = *(s++)) != 0) {
 23e:	89 91       	ld	r24, Y+
 240:	81 11       	cpse	r24, r1
 242:	fa cf       	rjmp	.-12     	; 0x238 <puts_lcd2+0x10>
    write(c, 1);
  }
}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <set_lcd_lines>:

void set_lcd_lines(const char *line1,const char *line2) {
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	8c 01       	movw	r16, r24
 254:	eb 01       	movw	r28, r22
	pos_lcd(0,0);
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 00 01 	call	0x200	; 0x200 <pos_lcd>
	puts_lcd2(line1);
 25e:	c8 01       	movw	r24, r16
 260:	0e 94 14 01 	call	0x228	; 0x228 <puts_lcd2>
	pos_lcd(1,0);
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 00 01 	call	0x200	; 0x200 <pos_lcd>
	puts_lcd2(line2);
 26c:	ce 01       	movw	r24, r28
 26e:	0e 94 14 01 	call	0x228	; 0x228 <puts_lcd2>
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <get_morse_char>:
// ascii for . is 46
// ascii for - is 45


int get_morse_char(int* gmc)
{
 27c:	af 92       	push	r10
 27e:	bf 92       	push	r11
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	7c 01       	movw	r14, r24
	set_lcd_lines("1 .|2 -|D STOP", "# END CHAR|* END");
 290:	62 ee       	ldi	r22, 0xE2	; 226
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	83 ef       	ldi	r24, 0xF3	; 243
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 25 01 	call	0x24a	; 0x24a <set_lcd_lines>
	//wait_avr(1000);
	//static int morse_char[5];
	int counter = 0;
	while (1) {
		//wait_avr(150);
		unsigned char key_1 = get_key();
 29c:	0e 94 84 00 	call	0x108	; 0x108 <get_key>
int get_morse_char(int* gmc)
{
	set_lcd_lines("1 .|2 -|D STOP", "# END CHAR|* END");
	//wait_avr(1000);
	//static int morse_char[5];
	int counter = 0;
 2a0:	00 e0       	ldi	r16, 0x00	; 0
 2a2:	10 e0       	ldi	r17, 0x00	; 0
				clr_lcd();
				//wait_avr(20);
			}
		}
		else if (key_1 == 2){
			gmc[counter] = 2;
 2a4:	68 94       	set
 2a6:	aa 24       	eor	r10, r10
 2a8:	a1 f8       	bld	r10, 1
 2aa:	b1 2c       	mov	r11, r1
		unsigned char key_1 = get_key();
		//wait_avr(100);
		if (counter >= 4)
			return counter;
		if (key_1 == 1) {
			gmc[counter] = 1;
 2ac:	cc 24       	eor	r12, r12
 2ae:	c3 94       	inc	r12
 2b0:	d1 2c       	mov	r13, r1
 2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <get_morse_char+0x44>
	//wait_avr(1000);
	//static int morse_char[5];
	int counter = 0;
	while (1) {
		//wait_avr(150);
		unsigned char key_1 = get_key();
 2b4:	0e 94 84 00 	call	0x108	; 0x108 <get_key>
		//wait_avr(100);
		if (counter >= 4)
 2b8:	04 30       	cpi	r16, 0x04	; 4
 2ba:	11 05       	cpc	r17, r1
 2bc:	0c f0       	brlt	.+2      	; 0x2c0 <get_morse_char+0x44>
 2be:	44 c0       	rjmp	.+136    	; 0x348 <get_morse_char+0xcc>
			return counter;
		if (key_1 == 1) {
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	d9 f4       	brne	.+54     	; 0x2fa <get_morse_char+0x7e>
			gmc[counter] = 1;
 2c4:	f8 01       	movw	r30, r16
 2c6:	ee 0f       	add	r30, r30
 2c8:	ff 1f       	adc	r31, r31
 2ca:	ee 0d       	add	r30, r14
 2cc:	ff 1d       	adc	r31, r15
 2ce:	d1 82       	std	Z+1, r13	; 0x01
 2d0:	c0 82       	st	Z, r12
			counter++;
 2d2:	0f 5f       	subi	r16, 0xFF	; 255
 2d4:	1f 4f       	sbci	r17, 0xFF	; 255
			play_note(90.9090909,550/6); // 550 Hz for 0.25 sec
 2d6:	6b e5       	ldi	r22, 0x5B	; 91
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	8a e5       	ldi	r24, 0x5A	; 90
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 b4 04 	call	0x968	; 0x968 <play_note>
			key_1 = get_key();
 2e2:	0e 94 84 00 	call	0x108	; 0x108 <get_key>
			while(key_1 == 1)
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	29 f7       	brne	.-54     	; 0x2b4 <get_morse_char+0x38>
			{
				key_1 = get_key();
 2ea:	0e 94 84 00 	call	0x108	; 0x108 <get_key>
 2ee:	c8 2f       	mov	r28, r24
				clr_lcd();
 2f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <clr_lcd>
		if (key_1 == 1) {
			gmc[counter] = 1;
			counter++;
			play_note(90.9090909,550/6); // 550 Hz for 0.25 sec
			key_1 = get_key();
			while(key_1 == 1)
 2f4:	c1 30       	cpi	r28, 0x01	; 1
 2f6:	c9 f3       	breq	.-14     	; 0x2ea <get_morse_char+0x6e>
 2f8:	dd cf       	rjmp	.-70     	; 0x2b4 <get_morse_char+0x38>
				key_1 = get_key();
				clr_lcd();
				//wait_avr(20);
			}
		}
		else if (key_1 == 2){
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	d9 f4       	brne	.+54     	; 0x334 <get_morse_char+0xb8>
			gmc[counter] = 2;
 2fe:	f8 01       	movw	r30, r16
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	ee 0d       	add	r30, r14
 306:	ff 1d       	adc	r31, r15
 308:	b1 82       	std	Z+1, r11	; 0x01
 30a:	a0 82       	st	Z, r10
			counter++;
 30c:	0f 5f       	subi	r16, 0xFF	; 255
 30e:	1f 4f       	sbci	r17, 0xFF	; 255
			play_note(90.9090909,550/3); // 550 Hz for 0.5 sec
 310:	67 eb       	ldi	r22, 0xB7	; 183
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	8a e5       	ldi	r24, 0x5A	; 90
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 b4 04 	call	0x968	; 0x968 <play_note>
			key_1 = get_key();
 31c:	0e 94 84 00 	call	0x108	; 0x108 <get_key>
			while(key_1 == 2)
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	41 f6       	brne	.-112    	; 0x2b4 <get_morse_char+0x38>
			{
				key_1 = get_key();
 324:	0e 94 84 00 	call	0x108	; 0x108 <get_key>
 328:	c8 2f       	mov	r28, r24
				clr_lcd();
 32a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <clr_lcd>
		else if (key_1 == 2){
			gmc[counter] = 2;
			counter++;
			play_note(90.9090909,550/3); // 550 Hz for 0.5 sec
			key_1 = get_key();
			while(key_1 == 2)
 32e:	c2 30       	cpi	r28, 0x02	; 2
 330:	c9 f3       	breq	.-14     	; 0x324 <get_morse_char+0xa8>
 332:	c0 cf       	rjmp	.-128    	; 0x2b4 <get_morse_char+0x38>
				key_1 = get_key();
				clr_lcd();
				//wait_avr(20);
			}
		}
		else if (key_1 == 13)
 334:	8d 30       	cpi	r24, 0x0D	; 13
 336:	59 f0       	breq	.+22     	; 0x34e <get_morse_char+0xd2>
			return 0;
		else if (key_1 == 15)
 338:	8f 30       	cpi	r24, 0x0F	; 15
 33a:	61 f0       	breq	.+24     	; 0x354 <get_morse_char+0xd8>
			return counter;
		else if(key_1 == 16)
 33c:	80 31       	cpi	r24, 0x10	; 16
 33e:	09 f0       	breq	.+2      	; 0x342 <get_morse_char+0xc6>
 340:	b9 cf       	rjmp	.-142    	; 0x2b4 <get_morse_char+0x38>
			return -1;
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	9f ef       	ldi	r25, 0xFF	; 255
 346:	08 c0       	rjmp	.+16     	; 0x358 <get_morse_char+0xdc>
 348:	80 2f       	mov	r24, r16
 34a:	91 2f       	mov	r25, r17
 34c:	05 c0       	rjmp	.+10     	; 0x358 <get_morse_char+0xdc>
				clr_lcd();
				//wait_avr(20);
			}
		}
		else if (key_1 == 13)
			return 0;
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <get_morse_char+0xdc>
 354:	80 2f       	mov	r24, r16
 356:	91 2f       	mov	r25, r17
			return -1;
		
	}
	
	
}
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	df 90       	pop	r13
 364:	cf 90       	pop	r12
 366:	bf 90       	pop	r11
 368:	af 90       	pop	r10
 36a:	08 95       	ret

0000036c <get_morse_word>:

void get_morse_word(char* letter, char* buf, int* gmc, int gmc_size, char* gmw)
{
 36c:	6f 92       	push	r6
 36e:	7f 92       	push	r7
 370:	8f 92       	push	r8
 372:	9f 92       	push	r9
 374:	af 92       	push	r10
 376:	bf 92       	push	r11
 378:	cf 92       	push	r12
 37a:	df 92       	push	r13
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
	if(!gmw || gmc_size < 1)
 388:	01 15       	cp	r16, r1
 38a:	11 05       	cpc	r17, r1
 38c:	09 f4       	brne	.+2      	; 0x390 <get_morse_word+0x24>
 38e:	f3 c1       	rjmp	.+998    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
 390:	12 16       	cp	r1, r18
 392:	13 06       	cpc	r1, r19
 394:	0c f0       	brlt	.+2      	; 0x398 <get_morse_word+0x2c>
 396:	ef c1       	rjmp	.+990    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
 398:	48 01       	movw	r8, r16
 39a:	79 01       	movw	r14, r18
 39c:	3a 01       	movw	r6, r20
 39e:	07 2f       	mov	r16, r23
 3a0:	16 2f       	mov	r17, r22
 3a2:	5c 01       	movw	r10, r24
		return;
	//puts_lcd2(gmw);
	//wait_avr(1000);
	clr_lcd();
 3a4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <clr_lcd>
	memset(&letter[0], 0, sizeof(letter));
 3a8:	f5 01       	movw	r30, r10
 3aa:	11 82       	std	Z+1, r1	; 0x01
 3ac:	10 82       	st	Z, r1
 3ae:	e3 01       	movw	r28, r6
 3b0:	67 01       	movw	r12, r14
 3b2:	cc 0c       	add	r12, r12
 3b4:	dd 1c       	adc	r13, r13
 3b6:	c6 0c       	add	r12, r6
 3b8:	d7 1c       	adc	r13, r7
	for(int i = 0; i < gmc_size; i++)
	{
		sprintf(buf, "%d", gmc[i]);
 3ba:	0f 2e       	mov	r0, r31
 3bc:	f2 e0       	ldi	r31, 0x02	; 2
 3be:	ef 2e       	mov	r14, r31
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	ff 2e       	mov	r15, r31
 3c4:	f0 2d       	mov	r31, r0
 3c6:	88 81       	ld	r24, Y
 3c8:	99 81       	ldd	r25, Y+1	; 0x01
 3ca:	22 96       	adiw	r28, 0x02	; 2
 3cc:	9f 93       	push	r25
 3ce:	8f 93       	push	r24
 3d0:	ff 92       	push	r15
 3d2:	ef 92       	push	r14
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	0e 94 05 05 	call	0xa0a	; 0xa0a <sprintf>
		strcat(letter, buf);
 3dc:	61 2f       	mov	r22, r17
 3de:	70 2f       	mov	r23, r16
 3e0:	c5 01       	movw	r24, r10
 3e2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <strcat>
		return;
	//puts_lcd2(gmw);
	//wait_avr(1000);
	clr_lcd();
	memset(&letter[0], 0, sizeof(letter));
	for(int i = 0; i < gmc_size; i++)
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	cc 15       	cp	r28, r12
 3f4:	dd 05       	cpc	r29, r13
 3f6:	39 f7       	brne	.-50     	; 0x3c6 <get_morse_word+0x5a>
		strcat(letter, buf);
	}
	//puts_lcd2("Letter:");
	//puts_lcd2(letter);
	//wait_avr(1000);
	clr_lcd();
 3f8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <clr_lcd>
	if (atoi(letter) == atoi(a))
 3fc:	c5 01       	movw	r24, r10
 3fe:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 402:	ec 01       	movw	r28, r24
 404:	8d ed       	ldi	r24, 0xDD	; 221
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 40c:	c8 17       	cp	r28, r24
 40e:	d9 07       	cpc	r29, r25
 410:	51 f4       	brne	.+20     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
		strcat(gmw, "A");		
 412:	f4 01       	movw	r30, r8
 414:	01 90       	ld	r0, Z+
 416:	00 20       	and	r0, r0
 418:	e9 f7       	brne	.-6      	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
 41a:	31 97       	sbiw	r30, 0x01	; 1
 41c:	81 e4       	ldi	r24, 0x41	; 65
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	91 83       	std	Z+1, r25	; 0x01
 422:	80 83       	st	Z, r24
 424:	a8 c1       	rjmp	.+848    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(b))
 426:	88 ed       	ldi	r24, 0xD8	; 216
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 42e:	c8 17       	cp	r28, r24
 430:	d9 07       	cpc	r29, r25
 432:	51 f4       	brne	.+20     	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
		strcat(gmw, "B");
 434:	f4 01       	movw	r30, r8
 436:	01 90       	ld	r0, Z+
 438:	00 20       	and	r0, r0
 43a:	e9 f7       	brne	.-6      	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	82 e4       	ldi	r24, 0x42	; 66
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	91 83       	std	Z+1, r25	; 0x01
 444:	80 83       	st	Z, r24
 446:	97 c1       	rjmp	.+814    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(c))
 448:	83 ed       	ldi	r24, 0xD3	; 211
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 450:	c8 17       	cp	r28, r24
 452:	d9 07       	cpc	r29, r25
 454:	51 f4       	brne	.+20     	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
		strcat(gmw, "C");
 456:	f4 01       	movw	r30, r8
 458:	01 90       	ld	r0, Z+
 45a:	00 20       	and	r0, r0
 45c:	e9 f7       	brne	.-6      	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
 45e:	31 97       	sbiw	r30, 0x01	; 1
 460:	83 e4       	ldi	r24, 0x43	; 67
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	91 83       	std	Z+1, r25	; 0x01
 466:	80 83       	st	Z, r24
 468:	86 c1       	rjmp	.+780    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(d))
 46a:	8e ec       	ldi	r24, 0xCE	; 206
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 472:	c8 17       	cp	r28, r24
 474:	d9 07       	cpc	r29, r25
 476:	51 f4       	brne	.+20     	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
		strcat(gmw, "D");
 478:	f4 01       	movw	r30, r8
 47a:	01 90       	ld	r0, Z+
 47c:	00 20       	and	r0, r0
 47e:	e9 f7       	brne	.-6      	; 0x47a <__FUSE_REGION_LENGTH__+0x7a>
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	84 e4       	ldi	r24, 0x44	; 68
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	91 83       	std	Z+1, r25	; 0x01
 488:	80 83       	st	Z, r24
 48a:	75 c1       	rjmp	.+746    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(e))
 48c:	89 ec       	ldi	r24, 0xC9	; 201
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 494:	c8 17       	cp	r28, r24
 496:	d9 07       	cpc	r29, r25
 498:	51 f4       	brne	.+20     	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
		strcat(gmw, "E");
 49a:	f4 01       	movw	r30, r8
 49c:	01 90       	ld	r0, Z+
 49e:	00 20       	and	r0, r0
 4a0:	e9 f7       	brne	.-6      	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
 4a2:	31 97       	sbiw	r30, 0x01	; 1
 4a4:	85 e4       	ldi	r24, 0x45	; 69
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	91 83       	std	Z+1, r25	; 0x01
 4aa:	80 83       	st	Z, r24
 4ac:	64 c1       	rjmp	.+712    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(f))
 4ae:	84 ec       	ldi	r24, 0xC4	; 196
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 4b6:	c8 17       	cp	r28, r24
 4b8:	d9 07       	cpc	r29, r25
 4ba:	51 f4       	brne	.+20     	; 0x4d0 <__FUSE_REGION_LENGTH__+0xd0>
		strcat(gmw, "F");
 4bc:	f4 01       	movw	r30, r8
 4be:	01 90       	ld	r0, Z+
 4c0:	00 20       	and	r0, r0
 4c2:	e9 f7       	brne	.-6      	; 0x4be <__FUSE_REGION_LENGTH__+0xbe>
 4c4:	31 97       	sbiw	r30, 0x01	; 1
 4c6:	86 e4       	ldi	r24, 0x46	; 70
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	91 83       	std	Z+1, r25	; 0x01
 4cc:	80 83       	st	Z, r24
 4ce:	53 c1       	rjmp	.+678    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(g))
 4d0:	8f eb       	ldi	r24, 0xBF	; 191
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 4d8:	c8 17       	cp	r28, r24
 4da:	d9 07       	cpc	r29, r25
 4dc:	51 f4       	brne	.+20     	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
		strcat(gmw, "G");
 4de:	f4 01       	movw	r30, r8
 4e0:	01 90       	ld	r0, Z+
 4e2:	00 20       	and	r0, r0
 4e4:	e9 f7       	brne	.-6      	; 0x4e0 <__FUSE_REGION_LENGTH__+0xe0>
 4e6:	31 97       	sbiw	r30, 0x01	; 1
 4e8:	87 e4       	ldi	r24, 0x47	; 71
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	91 83       	std	Z+1, r25	; 0x01
 4ee:	80 83       	st	Z, r24
 4f0:	42 c1       	rjmp	.+644    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(h))
 4f2:	8a eb       	ldi	r24, 0xBA	; 186
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 4fa:	c8 17       	cp	r28, r24
 4fc:	d9 07       	cpc	r29, r25
 4fe:	51 f4       	brne	.+20     	; 0x514 <__FUSE_REGION_LENGTH__+0x114>
		strcat(gmw, "H");
 500:	f4 01       	movw	r30, r8
 502:	01 90       	ld	r0, Z+
 504:	00 20       	and	r0, r0
 506:	e9 f7       	brne	.-6      	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
 508:	31 97       	sbiw	r30, 0x01	; 1
 50a:	88 e4       	ldi	r24, 0x48	; 72
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	91 83       	std	Z+1, r25	; 0x01
 510:	80 83       	st	Z, r24
 512:	31 c1       	rjmp	.+610    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(i))
 514:	85 eb       	ldi	r24, 0xB5	; 181
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 51c:	c8 17       	cp	r28, r24
 51e:	d9 07       	cpc	r29, r25
 520:	51 f4       	brne	.+20     	; 0x536 <__FUSE_REGION_LENGTH__+0x136>
		strcat(gmw, "I");
 522:	f4 01       	movw	r30, r8
 524:	01 90       	ld	r0, Z+
 526:	00 20       	and	r0, r0
 528:	e9 f7       	brne	.-6      	; 0x524 <__FUSE_REGION_LENGTH__+0x124>
 52a:	31 97       	sbiw	r30, 0x01	; 1
 52c:	89 e4       	ldi	r24, 0x49	; 73
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	91 83       	std	Z+1, r25	; 0x01
 532:	80 83       	st	Z, r24
 534:	20 c1       	rjmp	.+576    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(j))
 536:	80 eb       	ldi	r24, 0xB0	; 176
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 53e:	c8 17       	cp	r28, r24
 540:	d9 07       	cpc	r29, r25
 542:	51 f4       	brne	.+20     	; 0x558 <__FUSE_REGION_LENGTH__+0x158>
		strcat(gmw, "J");
 544:	f4 01       	movw	r30, r8
 546:	01 90       	ld	r0, Z+
 548:	00 20       	and	r0, r0
 54a:	e9 f7       	brne	.-6      	; 0x546 <__FUSE_REGION_LENGTH__+0x146>
 54c:	31 97       	sbiw	r30, 0x01	; 1
 54e:	8a e4       	ldi	r24, 0x4A	; 74
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	91 83       	std	Z+1, r25	; 0x01
 554:	80 83       	st	Z, r24
 556:	0f c1       	rjmp	.+542    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(k))
 558:	8b ea       	ldi	r24, 0xAB	; 171
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 560:	c8 17       	cp	r28, r24
 562:	d9 07       	cpc	r29, r25
 564:	51 f4       	brne	.+20     	; 0x57a <__FUSE_REGION_LENGTH__+0x17a>
		strcat(gmw, "K");
 566:	f4 01       	movw	r30, r8
 568:	01 90       	ld	r0, Z+
 56a:	00 20       	and	r0, r0
 56c:	e9 f7       	brne	.-6      	; 0x568 <__FUSE_REGION_LENGTH__+0x168>
 56e:	31 97       	sbiw	r30, 0x01	; 1
 570:	8b e4       	ldi	r24, 0x4B	; 75
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	91 83       	std	Z+1, r25	; 0x01
 576:	80 83       	st	Z, r24
 578:	fe c0       	rjmp	.+508    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(l))
 57a:	86 ea       	ldi	r24, 0xA6	; 166
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 582:	c8 17       	cp	r28, r24
 584:	d9 07       	cpc	r29, r25
 586:	51 f4       	brne	.+20     	; 0x59c <__FUSE_REGION_LENGTH__+0x19c>
		strcat(gmw, "L");
 588:	f4 01       	movw	r30, r8
 58a:	01 90       	ld	r0, Z+
 58c:	00 20       	and	r0, r0
 58e:	e9 f7       	brne	.-6      	; 0x58a <__FUSE_REGION_LENGTH__+0x18a>
 590:	31 97       	sbiw	r30, 0x01	; 1
 592:	8c e4       	ldi	r24, 0x4C	; 76
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	91 83       	std	Z+1, r25	; 0x01
 598:	80 83       	st	Z, r24
 59a:	ed c0       	rjmp	.+474    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(m))
 59c:	81 ea       	ldi	r24, 0xA1	; 161
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 5a4:	c8 17       	cp	r28, r24
 5a6:	d9 07       	cpc	r29, r25
 5a8:	51 f4       	brne	.+20     	; 0x5be <__FUSE_REGION_LENGTH__+0x1be>
		strcat(gmw, "M");
 5aa:	f4 01       	movw	r30, r8
 5ac:	01 90       	ld	r0, Z+
 5ae:	00 20       	and	r0, r0
 5b0:	e9 f7       	brne	.-6      	; 0x5ac <__FUSE_REGION_LENGTH__+0x1ac>
 5b2:	31 97       	sbiw	r30, 0x01	; 1
 5b4:	8d e4       	ldi	r24, 0x4D	; 77
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	91 83       	std	Z+1, r25	; 0x01
 5ba:	80 83       	st	Z, r24
 5bc:	dc c0       	rjmp	.+440    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(n))
 5be:	8c e9       	ldi	r24, 0x9C	; 156
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 5c6:	c8 17       	cp	r28, r24
 5c8:	d9 07       	cpc	r29, r25
 5ca:	51 f4       	brne	.+20     	; 0x5e0 <__FUSE_REGION_LENGTH__+0x1e0>
		strcat(gmw, "N");
 5cc:	f4 01       	movw	r30, r8
 5ce:	01 90       	ld	r0, Z+
 5d0:	00 20       	and	r0, r0
 5d2:	e9 f7       	brne	.-6      	; 0x5ce <__FUSE_REGION_LENGTH__+0x1ce>
 5d4:	31 97       	sbiw	r30, 0x01	; 1
 5d6:	8e e4       	ldi	r24, 0x4E	; 78
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	91 83       	std	Z+1, r25	; 0x01
 5dc:	80 83       	st	Z, r24
 5de:	cb c0       	rjmp	.+406    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(o))
 5e0:	87 e9       	ldi	r24, 0x97	; 151
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 5e8:	c8 17       	cp	r28, r24
 5ea:	d9 07       	cpc	r29, r25
 5ec:	51 f4       	brne	.+20     	; 0x602 <__FUSE_REGION_LENGTH__+0x202>
		strcat(gmw, "O");
 5ee:	f4 01       	movw	r30, r8
 5f0:	01 90       	ld	r0, Z+
 5f2:	00 20       	and	r0, r0
 5f4:	e9 f7       	brne	.-6      	; 0x5f0 <__FUSE_REGION_LENGTH__+0x1f0>
 5f6:	31 97       	sbiw	r30, 0x01	; 1
 5f8:	8f e4       	ldi	r24, 0x4F	; 79
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	91 83       	std	Z+1, r25	; 0x01
 5fe:	80 83       	st	Z, r24
 600:	ba c0       	rjmp	.+372    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(p))
 602:	82 e9       	ldi	r24, 0x92	; 146
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 60a:	c8 17       	cp	r28, r24
 60c:	d9 07       	cpc	r29, r25
 60e:	51 f4       	brne	.+20     	; 0x624 <__FUSE_REGION_LENGTH__+0x224>
		strcat(gmw, "P");
 610:	f4 01       	movw	r30, r8
 612:	01 90       	ld	r0, Z+
 614:	00 20       	and	r0, r0
 616:	e9 f7       	brne	.-6      	; 0x612 <__FUSE_REGION_LENGTH__+0x212>
 618:	31 97       	sbiw	r30, 0x01	; 1
 61a:	80 e5       	ldi	r24, 0x50	; 80
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	91 83       	std	Z+1, r25	; 0x01
 620:	80 83       	st	Z, r24
 622:	a9 c0       	rjmp	.+338    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(q))
 624:	8d e8       	ldi	r24, 0x8D	; 141
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 62c:	c8 17       	cp	r28, r24
 62e:	d9 07       	cpc	r29, r25
 630:	51 f4       	brne	.+20     	; 0x646 <__FUSE_REGION_LENGTH__+0x246>
		strcat(gmw, "Q");
 632:	f4 01       	movw	r30, r8
 634:	01 90       	ld	r0, Z+
 636:	00 20       	and	r0, r0
 638:	e9 f7       	brne	.-6      	; 0x634 <__FUSE_REGION_LENGTH__+0x234>
 63a:	31 97       	sbiw	r30, 0x01	; 1
 63c:	81 e5       	ldi	r24, 0x51	; 81
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	91 83       	std	Z+1, r25	; 0x01
 642:	80 83       	st	Z, r24
 644:	98 c0       	rjmp	.+304    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(r))
 646:	88 e8       	ldi	r24, 0x88	; 136
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 64e:	c8 17       	cp	r28, r24
 650:	d9 07       	cpc	r29, r25
 652:	51 f4       	brne	.+20     	; 0x668 <__FUSE_REGION_LENGTH__+0x268>
		strcat(gmw, "R");
 654:	f4 01       	movw	r30, r8
 656:	01 90       	ld	r0, Z+
 658:	00 20       	and	r0, r0
 65a:	e9 f7       	brne	.-6      	; 0x656 <__FUSE_REGION_LENGTH__+0x256>
 65c:	31 97       	sbiw	r30, 0x01	; 1
 65e:	82 e5       	ldi	r24, 0x52	; 82
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	91 83       	std	Z+1, r25	; 0x01
 664:	80 83       	st	Z, r24
 666:	87 c0       	rjmp	.+270    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(s))
 668:	83 e8       	ldi	r24, 0x83	; 131
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 670:	c8 17       	cp	r28, r24
 672:	d9 07       	cpc	r29, r25
 674:	51 f4       	brne	.+20     	; 0x68a <__FUSE_REGION_LENGTH__+0x28a>
		strcat(gmw, "S");
 676:	f4 01       	movw	r30, r8
 678:	01 90       	ld	r0, Z+
 67a:	00 20       	and	r0, r0
 67c:	e9 f7       	brne	.-6      	; 0x678 <__FUSE_REGION_LENGTH__+0x278>
 67e:	31 97       	sbiw	r30, 0x01	; 1
 680:	83 e5       	ldi	r24, 0x53	; 83
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	91 83       	std	Z+1, r25	; 0x01
 686:	80 83       	st	Z, r24
 688:	76 c0       	rjmp	.+236    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(t))
 68a:	8e e7       	ldi	r24, 0x7E	; 126
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 692:	c8 17       	cp	r28, r24
 694:	d9 07       	cpc	r29, r25
 696:	51 f4       	brne	.+20     	; 0x6ac <__FUSE_REGION_LENGTH__+0x2ac>
		strcat(gmw, "T");
 698:	f4 01       	movw	r30, r8
 69a:	01 90       	ld	r0, Z+
 69c:	00 20       	and	r0, r0
 69e:	e9 f7       	brne	.-6      	; 0x69a <__FUSE_REGION_LENGTH__+0x29a>
 6a0:	31 97       	sbiw	r30, 0x01	; 1
 6a2:	84 e5       	ldi	r24, 0x54	; 84
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	91 83       	std	Z+1, r25	; 0x01
 6a8:	80 83       	st	Z, r24
 6aa:	65 c0       	rjmp	.+202    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(u))
 6ac:	89 e7       	ldi	r24, 0x79	; 121
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 6b4:	c8 17       	cp	r28, r24
 6b6:	d9 07       	cpc	r29, r25
 6b8:	51 f4       	brne	.+20     	; 0x6ce <__FUSE_REGION_LENGTH__+0x2ce>
		strcat(gmw, "U");
 6ba:	f4 01       	movw	r30, r8
 6bc:	01 90       	ld	r0, Z+
 6be:	00 20       	and	r0, r0
 6c0:	e9 f7       	brne	.-6      	; 0x6bc <__FUSE_REGION_LENGTH__+0x2bc>
 6c2:	31 97       	sbiw	r30, 0x01	; 1
 6c4:	85 e5       	ldi	r24, 0x55	; 85
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	91 83       	std	Z+1, r25	; 0x01
 6ca:	80 83       	st	Z, r24
 6cc:	54 c0       	rjmp	.+168    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(v))
 6ce:	84 e7       	ldi	r24, 0x74	; 116
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 6d6:	c8 17       	cp	r28, r24
 6d8:	d9 07       	cpc	r29, r25
 6da:	51 f4       	brne	.+20     	; 0x6f0 <__FUSE_REGION_LENGTH__+0x2f0>
		strcat(gmw, "V");
 6dc:	f4 01       	movw	r30, r8
 6de:	01 90       	ld	r0, Z+
 6e0:	00 20       	and	r0, r0
 6e2:	e9 f7       	brne	.-6      	; 0x6de <__FUSE_REGION_LENGTH__+0x2de>
 6e4:	31 97       	sbiw	r30, 0x01	; 1
 6e6:	86 e5       	ldi	r24, 0x56	; 86
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	91 83       	std	Z+1, r25	; 0x01
 6ec:	80 83       	st	Z, r24
 6ee:	43 c0       	rjmp	.+134    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(w))
 6f0:	8f e6       	ldi	r24, 0x6F	; 111
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 6f8:	c8 17       	cp	r28, r24
 6fa:	d9 07       	cpc	r29, r25
 6fc:	51 f4       	brne	.+20     	; 0x712 <__FUSE_REGION_LENGTH__+0x312>
		strcat(gmw, "W");
 6fe:	f4 01       	movw	r30, r8
 700:	01 90       	ld	r0, Z+
 702:	00 20       	and	r0, r0
 704:	e9 f7       	brne	.-6      	; 0x700 <__FUSE_REGION_LENGTH__+0x300>
 706:	31 97       	sbiw	r30, 0x01	; 1
 708:	87 e5       	ldi	r24, 0x57	; 87
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	91 83       	std	Z+1, r25	; 0x01
 70e:	80 83       	st	Z, r24
 710:	32 c0       	rjmp	.+100    	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(x))
 712:	8a e6       	ldi	r24, 0x6A	; 106
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 71a:	c8 17       	cp	r28, r24
 71c:	d9 07       	cpc	r29, r25
 71e:	51 f4       	brne	.+20     	; 0x734 <__FUSE_REGION_LENGTH__+0x334>
		strcat(gmw, "X");
 720:	f4 01       	movw	r30, r8
 722:	01 90       	ld	r0, Z+
 724:	00 20       	and	r0, r0
 726:	e9 f7       	brne	.-6      	; 0x722 <__FUSE_REGION_LENGTH__+0x322>
 728:	31 97       	sbiw	r30, 0x01	; 1
 72a:	88 e5       	ldi	r24, 0x58	; 88
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	91 83       	std	Z+1, r25	; 0x01
 730:	80 83       	st	Z, r24
 732:	21 c0       	rjmp	.+66     	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(y))
 734:	85 e6       	ldi	r24, 0x65	; 101
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 73c:	c8 17       	cp	r28, r24
 73e:	d9 07       	cpc	r29, r25
 740:	51 f4       	brne	.+20     	; 0x756 <__FUSE_REGION_LENGTH__+0x356>
		strcat(gmw, "Y");
 742:	f4 01       	movw	r30, r8
 744:	01 90       	ld	r0, Z+
 746:	00 20       	and	r0, r0
 748:	e9 f7       	brne	.-6      	; 0x744 <__FUSE_REGION_LENGTH__+0x344>
 74a:	31 97       	sbiw	r30, 0x01	; 1
 74c:	89 e5       	ldi	r24, 0x59	; 89
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	91 83       	std	Z+1, r25	; 0x01
 752:	80 83       	st	Z, r24
 754:	10 c0       	rjmp	.+32     	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
	else if(atoi(letter) == atoi(z))
 756:	80 e6       	ldi	r24, 0x60	; 96
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atoi>
 75e:	c8 17       	cp	r28, r24
 760:	d9 07       	cpc	r29, r25
 762:	49 f4       	brne	.+18     	; 0x776 <__FUSE_REGION_LENGTH__+0x376>
		strcat(gmw, "Z");
 764:	f4 01       	movw	r30, r8
 766:	01 90       	ld	r0, Z+
 768:	00 20       	and	r0, r0
 76a:	e9 f7       	brne	.-6      	; 0x766 <__FUSE_REGION_LENGTH__+0x366>
 76c:	31 97       	sbiw	r30, 0x01	; 1
 76e:	8a e5       	ldi	r24, 0x5A	; 90
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	91 83       	std	Z+1, r25	; 0x01
 774:	80 83       	st	Z, r24
	//letter = "";
	//free(buf);
	//free(letter);
}
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	1f 91       	pop	r17
 77c:	0f 91       	pop	r16
 77e:	ff 90       	pop	r15
 780:	ef 90       	pop	r14
 782:	df 90       	pop	r13
 784:	cf 90       	pop	r12
 786:	bf 90       	pop	r11
 788:	af 90       	pop	r10
 78a:	9f 90       	pop	r9
 78c:	8f 90       	pop	r8
 78e:	7f 90       	pop	r7
 790:	6f 90       	pop	r6
 792:	08 95       	ret

00000794 <main>:

int main(void)
{
 794:	3f 92       	push	r3
 796:	4f 92       	push	r4
 798:	5f 92       	push	r5
 79a:	6f 92       	push	r6
 79c:	7f 92       	push	r7
 79e:	8f 92       	push	r8
 7a0:	9f 92       	push	r9
 7a2:	af 92       	push	r10
 7a4:	bf 92       	push	r11
 7a6:	cf 92       	push	r12
 7a8:	df 92       	push	r13
 7aa:	ef 92       	push	r14
 7ac:	ff 92       	push	r15
 7ae:	0f 93       	push	r16
 7b0:	1f 93       	push	r17
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	cd b7       	in	r28, 0x3d	; 61
 7b8:	de b7       	in	r29, 0x3e	; 62
 7ba:	6b 97       	sbiw	r28, 0x1b	; 27
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	f8 94       	cli
 7c0:	de bf       	out	0x3e, r29	; 62
 7c2:	0f be       	out	0x3f, r0	; 63
 7c4:	cd bf       	out	0x3d, r28	; 61
	ini_lcd();
 7c6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <ini_lcd>
	set_lcd_lines("Press A to start", "Press * to quit");
 7ca:	65 e0       	ldi	r22, 0x05	; 5
 7cc:	71 e0       	ldi	r23, 0x01	; 1
 7ce:	85 e1       	ldi	r24, 0x15	; 21
 7d0:	91 e0       	ldi	r25, 0x01	; 1
 7d2:	0e 94 25 01 	call	0x24a	; 0x24a <set_lcd_lines>
	SET_BIT(DDRB, 3);
 7d6:	bb 9a       	sbi	0x17, 3	; 23
	//stores char
	int gmc[5];
	int gmc_size;
	//stores word
	
	char gmd[17] = "";
 7d8:	1b 86       	std	Y+11, r1	; 0x0b
 7da:	1c 86       	std	Y+12, r1	; 0x0c
 7dc:	1d 86       	std	Y+13, r1	; 0x0d
 7de:	1e 86       	std	Y+14, r1	; 0x0e
 7e0:	fe 01       	movw	r30, r28
 7e2:	3f 96       	adiw	r30, 0x0f	; 15
 7e4:	8d e0       	ldi	r24, 0x0D	; 13
 7e6:	df 01       	movw	r26, r30
 7e8:	1d 92       	st	X+, r1
 7ea:	8a 95       	dec	r24
 7ec:	e9 f7       	brne	.-6      	; 0x7e8 <main+0x54>
	static char letter[5] = "";	


	for (;;){
			
		unsigned char key = get_key();
 7ee:	0e 94 84 00 	call	0x108	; 0x108 <get_key>
 7f2:	18 2f       	mov	r17, r24
		wait_avr(150);
 7f4:	86 e9       	ldi	r24, 0x96	; 150
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
			
		if (key == 13){
 7fc:	1d 30       	cpi	r17, 0x0D	; 13
 7fe:	19 f4       	brne	.+6      	; 0x806 <main+0x72>
			clr_lcd();
 800:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <clr_lcd>
			break;
 804:	85 c0       	rjmp	.+266    	; 0x910 <__stack+0xb1>
		}
		// start sampling
		else if (key == 4)
 806:	14 30       	cpi	r17, 0x04	; 4
 808:	91 f7       	brne	.-28     	; 0x7ee <main+0x5a>
		{
			clr_lcd();
 80a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <clr_lcd>
	//stores word
	
	char gmd[17] = "";
	int gmw_amount = 0;
	
	int check = 1;
 80e:	88 24       	eor	r8, r8
 810:	83 94       	inc	r8
 812:	91 2c       	mov	r9, r1
	int gmc[5];
	int gmc_size;
	//stores word
	
	char gmd[17] = "";
	int gmw_amount = 0;
 814:	e1 2c       	mov	r14, r1
 816:	f1 2c       	mov	r15, r1
			clr_lcd();
			while(1)
			{
				gmc_size = get_morse_char(gmc);
				clr_lcd();
				get_morse_word(buf, letter, gmc, gmc_size, gmd);
 818:	5e 01       	movw	r10, r28
 81a:	bb e0       	ldi	r27, 0x0B	; 11
 81c:	ab 0e       	add	r10, r27
 81e:	b1 1c       	adc	r11, r1
						check = 0;
					}
					else if (gmw_amount == 16)
					{
						strcat(line1, gmd);
						memset(&gmd[0], 0, sizeof(gmd));
 820:	0f 2e       	mov	r0, r31
 822:	f1 e1       	ldi	r31, 0x11	; 17
 824:	5f 2e       	mov	r5, r31
 826:	f0 2d       	mov	r31, r0
					gmw_amount++;
					if (gmw_amount == 32)
					{
						strcat(line2, gmd);
						memset(&gmd[0], 0, sizeof(gmd));
						check = 0;
 828:	31 2c       	mov	r3, r1
 82a:	41 2c       	mov	r4, r1
				get_morse_word(buf, letter, gmc, gmc_size, gmd);
				
				if (gmc_size == -1)
				{
					gmw_amount++;
					strcat(gmd, " ");
 82c:	68 94       	set
 82e:	66 24       	eor	r6, r6
 830:	65 f8       	bld	r6, 5
 832:	71 2c       	mov	r7, r1
		else if (key == 4)
		{
			clr_lcd();
			while(1)
			{
				gmc_size = get_morse_char(gmc);
 834:	ce 01       	movw	r24, r28
 836:	01 96       	adiw	r24, 0x01	; 1
 838:	0e 94 3e 01 	call	0x27c	; 0x27c <get_morse_char>
 83c:	6c 01       	movw	r12, r24
				clr_lcd();
 83e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <clr_lcd>
				get_morse_word(buf, letter, gmc, gmc_size, gmd);
 842:	85 01       	movw	r16, r10
 844:	96 01       	movw	r18, r12
 846:	ae 01       	movw	r20, r28
 848:	4f 5f       	subi	r20, 0xFF	; 255
 84a:	5f 4f       	sbci	r21, 0xFF	; 255
 84c:	66 e2       	ldi	r22, 0x26	; 38
 84e:	71 e0       	ldi	r23, 0x01	; 1
 850:	8b e2       	ldi	r24, 0x2B	; 43
 852:	91 e0       	ldi	r25, 0x01	; 1
 854:	0e 94 b6 01 	call	0x36c	; 0x36c <get_morse_word>
				
				if (gmc_size == -1)
 858:	ef ef       	ldi	r30, 0xFF	; 255
 85a:	ce 16       	cp	r12, r30
 85c:	de 06       	cpc	r13, r30
 85e:	59 f4       	brne	.+22     	; 0x876 <__stack+0x17>
				{
					gmw_amount++;
 860:	ff ef       	ldi	r31, 0xFF	; 255
 862:	ef 1a       	sub	r14, r31
 864:	ff 0a       	sbc	r15, r31
					strcat(gmd, " ");
 866:	f5 01       	movw	r30, r10
 868:	01 90       	ld	r0, Z+
 86a:	00 20       	and	r0, r0
 86c:	e9 f7       	brne	.-6      	; 0x868 <__stack+0x9>
 86e:	31 97       	sbiw	r30, 0x01	; 1
 870:	71 82       	std	Z+1, r7	; 0x01
 872:	60 82       	st	Z, r6
 874:	28 c0       	rjmp	.+80     	; 0x8c6 <__stack+0x67>
				}
				else if (gmc_size > 0)
 876:	1c 14       	cp	r1, r12
 878:	1d 04       	cpc	r1, r13
 87a:	1c f5       	brge	.+70     	; 0x8c2 <__stack+0x63>
				{
					gmw_amount++;
 87c:	8f ef       	ldi	r24, 0xFF	; 255
 87e:	e8 1a       	sub	r14, r24
 880:	f8 0a       	sbc	r15, r24
					if (gmw_amount == 32)
 882:	a0 e2       	ldi	r26, 0x20	; 32
 884:	ea 16       	cp	r14, r26
 886:	f1 04       	cpc	r15, r1
 888:	69 f4       	brne	.+26     	; 0x8a4 <__stack+0x45>
					{
						strcat(line2, gmd);
 88a:	b5 01       	movw	r22, r10
 88c:	8c e2       	ldi	r24, 0x2C	; 44
 88e:	91 e0       	ldi	r25, 0x01	; 1
 890:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <strcat>
						memset(&gmd[0], 0, sizeof(gmd));
 894:	f5 01       	movw	r30, r10
 896:	85 2d       	mov	r24, r5
 898:	11 92       	st	Z+, r1
 89a:	8a 95       	dec	r24
 89c:	e9 f7       	brne	.-6      	; 0x898 <__stack+0x39>
						check = 0;
 89e:	83 2c       	mov	r8, r3
 8a0:	94 2c       	mov	r9, r4
 8a2:	1d c0       	rjmp	.+58     	; 0x8de <__stack+0x7f>
					}
					else if (gmw_amount == 16)
 8a4:	a0 e1       	ldi	r26, 0x10	; 16
 8a6:	ea 16       	cp	r14, r26
 8a8:	f1 04       	cpc	r15, r1
 8aa:	69 f4       	brne	.+26     	; 0x8c6 <__stack+0x67>
					{
						strcat(line1, gmd);
 8ac:	b5 01       	movw	r22, r10
 8ae:	8d e3       	ldi	r24, 0x3D	; 61
 8b0:	91 e0       	ldi	r25, 0x01	; 1
 8b2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <strcat>
						memset(&gmd[0], 0, sizeof(gmd));
 8b6:	f5 01       	movw	r30, r10
 8b8:	85 2d       	mov	r24, r5
 8ba:	11 92       	st	Z+, r1
 8bc:	8a 95       	dec	r24
 8be:	e9 f7       	brne	.-6      	; 0x8ba <__stack+0x5b>
 8c0:	0e c0       	rjmp	.+28     	; 0x8de <__stack+0x7f>

					}
				}
				else if (gmc_size == 0)
 8c2:	cd 28       	or	r12, r13
 8c4:	f9 f0       	breq	.+62     	; 0x904 <__stack+0xa5>
					break;
					
					
				if (gmw_amount < 16)
 8c6:	a0 e1       	ldi	r26, 0x10	; 16
 8c8:	ea 16       	cp	r14, r26
 8ca:	f1 04       	cpc	r15, r1
 8cc:	44 f4       	brge	.+16     	; 0x8de <__stack+0x7f>
				{
					puts_lcd2(gmd);
 8ce:	c5 01       	movw	r24, r10
 8d0:	0e 94 14 01 	call	0x228	; 0x228 <puts_lcd2>
					wait_avr(2000);
 8d4:	80 ed       	ldi	r24, 0xD0	; 208
 8d6:	97 e0       	ldi	r25, 0x07	; 7
 8d8:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
 8dc:	0d c0       	rjmp	.+26     	; 0x8f8 <__stack+0x99>
				}
				else if (gmw_amount >= 16 && gmw_amount < 32)
 8de:	c7 01       	movw	r24, r14
 8e0:	40 97       	sbiw	r24, 0x10	; 16
 8e2:	40 97       	sbiw	r24, 0x10	; 16
 8e4:	48 f4       	brcc	.+18     	; 0x8f8 <__stack+0x99>
				{
					set_lcd_lines(line1, gmd);
 8e6:	b5 01       	movw	r22, r10
 8e8:	8d e3       	ldi	r24, 0x3D	; 61
 8ea:	91 e0       	ldi	r25, 0x01	; 1
 8ec:	0e 94 25 01 	call	0x24a	; 0x24a <set_lcd_lines>
					wait_avr(2000);
 8f0:	80 ed       	ldi	r24, 0xD0	; 208
 8f2:	97 e0       	ldi	r25, 0x07	; 7
 8f4:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
				}
				
				clr_lcd();
 8f8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <clr_lcd>
				
				if (check == 0)
 8fc:	81 14       	cp	r8, r1
 8fe:	91 04       	cpc	r9, r1
 900:	09 f0       	breq	.+2      	; 0x904 <__stack+0xa5>
 902:	98 cf       	rjmp	.-208    	; 0x834 <main+0xa0>
					break;
			}
			set_lcd_lines(line1, line2);
 904:	6c e2       	ldi	r22, 0x2C	; 44
 906:	71 e0       	ldi	r23, 0x01	; 1
 908:	8d e3       	ldi	r24, 0x3D	; 61
 90a:	91 e0       	ldi	r25, 0x01	; 1
 90c:	0e 94 25 01 	call	0x24a	; 0x24a <set_lcd_lines>
			//memset(&line1[0], 0, sizeof(line1));
			//memset(&line2[0], 0, sizeof(line2));
		}
	}
	return 0;
}
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	6b 96       	adiw	r28, 0x1b	; 27
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	f8 94       	cli
 91a:	de bf       	out	0x3e, r29	; 62
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	cd bf       	out	0x3d, r28	; 61
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	1f 91       	pop	r17
 926:	0f 91       	pop	r16
 928:	ff 90       	pop	r15
 92a:	ef 90       	pop	r14
 92c:	df 90       	pop	r13
 92e:	cf 90       	pop	r12
 930:	bf 90       	pop	r11
 932:	af 90       	pop	r10
 934:	9f 90       	pop	r9
 936:	8f 90       	pop	r8
 938:	7f 90       	pop	r7
 93a:	6f 90       	pop	r6
 93c:	5f 90       	pop	r5
 93e:	4f 90       	pop	r4
 940:	3f 90       	pop	r3
 942:	08 95       	ret

00000944 <wait_avr_music>:
#include "music.h"
#include "avr.h"


void wait_avr_music(unsigned short msec)
{
 944:	9c 01       	movw	r18, r24
  TCCR0 = 2;
 946:	82 e0       	ldi	r24, 0x02	; 2
 948:	83 bf       	out	0x33, r24	; 51
  while (msec--) {
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
 94a:	86 ef       	ldi	r24, 0xF6	; 246


void wait_avr_music(unsigned short msec)
{
  TCCR0 = 2;
  while (msec--) {
 94c:	08 c0       	rjmp	.+16     	; 0x95e <wait_avr_music+0x1a>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
 94e:	82 bf       	out	0x32, r24	; 50
    SET_BIT(TIFR, TOV0);
 950:	98 b7       	in	r25, 0x38	; 56
 952:	91 60       	ori	r25, 0x01	; 1
 954:	98 bf       	out	0x38, r25	; 56
    WDR();
 956:	a8 95       	wdr
    while (!GET_BIT(TIFR, TOV0));
 958:	08 b6       	in	r0, 0x38	; 56
 95a:	00 fe       	sbrs	r0, 0
 95c:	fd cf       	rjmp	.-6      	; 0x958 <wait_avr_music+0x14>


void wait_avr_music(unsigned short msec)
{
  TCCR0 = 2;
  while (msec--) {
 95e:	21 50       	subi	r18, 0x01	; 1
 960:	31 09       	sbc	r19, r1
 962:	a8 f7       	brcc	.-22     	; 0x94e <wait_avr_music+0xa>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
    SET_BIT(TIFR, TOV0);
    WDR();
    while (!GET_BIT(TIFR, TOV0));
  }
  TCCR0 = 0;
 964:	13 be       	out	0x33, r1	; 51
 966:	08 95       	ret

00000968 <play_note>:
}

void play_note(int freq, int dur)
{
 968:	ef 92       	push	r14
 96a:	ff 92       	push	r15
 96c:	0f 93       	push	r16
 96e:	1f 93       	push	r17
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
	for(int i = 0; i < (dur); i++)
 974:	16 16       	cp	r1, r22
 976:	17 06       	cpc	r1, r23
 978:	84 f4       	brge	.+32     	; 0x99a <play_note+0x32>
 97a:	7b 01       	movw	r14, r22
 97c:	8c 01       	movw	r16, r24
 97e:	c0 e0       	ldi	r28, 0x00	; 0
 980:	d0 e0       	ldi	r29, 0x00	; 0
	{
		SET_BIT(PORTB,3);
 982:	c3 9a       	sbi	0x18, 3	; 24
		wait_avr_music(freq);
 984:	c8 01       	movw	r24, r16
 986:	0e 94 a2 04 	call	0x944	; 0x944 <wait_avr_music>
		CLR_BIT(PORTB,3);
 98a:	c3 98       	cbi	0x18, 3	; 24
		wait_avr_music(freq);
 98c:	c8 01       	movw	r24, r16
 98e:	0e 94 a2 04 	call	0x944	; 0x944 <wait_avr_music>
  TCCR0 = 0;
}

void play_note(int freq, int dur)
{
	for(int i = 0; i < (dur); i++)
 992:	21 96       	adiw	r28, 0x01	; 1
 994:	ce 15       	cp	r28, r14
 996:	df 05       	cpc	r29, r15
 998:	a1 f7       	brne	.-24     	; 0x982 <play_note+0x1a>
		wait_avr_music(freq);
		CLR_BIT(PORTB,3);
		wait_avr_music(freq);
	}
	
}
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	1f 91       	pop	r17
 9a0:	0f 91       	pop	r16
 9a2:	ff 90       	pop	r15
 9a4:	ef 90       	pop	r14
 9a6:	08 95       	ret

000009a8 <atoi>:
 9a8:	fc 01       	movw	r30, r24
 9aa:	88 27       	eor	r24, r24
 9ac:	99 27       	eor	r25, r25
 9ae:	e8 94       	clt
 9b0:	21 91       	ld	r18, Z+
 9b2:	20 32       	cpi	r18, 0x20	; 32
 9b4:	e9 f3       	breq	.-6      	; 0x9b0 <atoi+0x8>
 9b6:	29 30       	cpi	r18, 0x09	; 9
 9b8:	10 f0       	brcs	.+4      	; 0x9be <atoi+0x16>
 9ba:	2e 30       	cpi	r18, 0x0E	; 14
 9bc:	c8 f3       	brcs	.-14     	; 0x9b0 <atoi+0x8>
 9be:	2b 32       	cpi	r18, 0x2B	; 43
 9c0:	41 f0       	breq	.+16     	; 0x9d2 <atoi+0x2a>
 9c2:	2d 32       	cpi	r18, 0x2D	; 45
 9c4:	39 f4       	brne	.+14     	; 0x9d4 <atoi+0x2c>
 9c6:	68 94       	set
 9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <atoi+0x2a>
 9ca:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__mulhi_const_10>
 9ce:	82 0f       	add	r24, r18
 9d0:	91 1d       	adc	r25, r1
 9d2:	21 91       	ld	r18, Z+
 9d4:	20 53       	subi	r18, 0x30	; 48
 9d6:	2a 30       	cpi	r18, 0x0A	; 10
 9d8:	c0 f3       	brcs	.-16     	; 0x9ca <atoi+0x22>
 9da:	1e f4       	brtc	.+6      	; 0x9e2 <atoi+0x3a>
 9dc:	90 95       	com	r25
 9de:	81 95       	neg	r24
 9e0:	9f 4f       	sbci	r25, 0xFF	; 255
 9e2:	08 95       	ret

000009e4 <strcat>:
 9e4:	fb 01       	movw	r30, r22
 9e6:	dc 01       	movw	r26, r24
 9e8:	0d 90       	ld	r0, X+
 9ea:	00 20       	and	r0, r0
 9ec:	e9 f7       	brne	.-6      	; 0x9e8 <strcat+0x4>
 9ee:	11 97       	sbiw	r26, 0x01	; 1
 9f0:	01 90       	ld	r0, Z+
 9f2:	0d 92       	st	X+, r0
 9f4:	00 20       	and	r0, r0
 9f6:	e1 f7       	brne	.-8      	; 0x9f0 <strcat+0xc>
 9f8:	08 95       	ret

000009fa <__mulhi_const_10>:
 9fa:	7a e0       	ldi	r23, 0x0A	; 10
 9fc:	97 9f       	mul	r25, r23
 9fe:	90 2d       	mov	r25, r0
 a00:	87 9f       	mul	r24, r23
 a02:	80 2d       	mov	r24, r0
 a04:	91 0d       	add	r25, r1
 a06:	11 24       	eor	r1, r1
 a08:	08 95       	ret

00000a0a <sprintf>:
 a0a:	ae e0       	ldi	r26, 0x0E	; 14
 a0c:	b0 e0       	ldi	r27, 0x00	; 0
 a0e:	eb e0       	ldi	r30, 0x0B	; 11
 a10:	f5 e0       	ldi	r31, 0x05	; 5
 a12:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__prologue_saves__+0x1c>
 a16:	0d 89       	ldd	r16, Y+21	; 0x15
 a18:	1e 89       	ldd	r17, Y+22	; 0x16
 a1a:	86 e0       	ldi	r24, 0x06	; 6
 a1c:	8c 83       	std	Y+4, r24	; 0x04
 a1e:	1a 83       	std	Y+2, r17	; 0x02
 a20:	09 83       	std	Y+1, r16	; 0x01
 a22:	8f ef       	ldi	r24, 0xFF	; 255
 a24:	9f e7       	ldi	r25, 0x7F	; 127
 a26:	9e 83       	std	Y+6, r25	; 0x06
 a28:	8d 83       	std	Y+5, r24	; 0x05
 a2a:	ae 01       	movw	r20, r28
 a2c:	47 5e       	subi	r20, 0xE7	; 231
 a2e:	5f 4f       	sbci	r21, 0xFF	; 255
 a30:	6f 89       	ldd	r22, Y+23	; 0x17
 a32:	78 8d       	ldd	r23, Y+24	; 0x18
 a34:	ce 01       	movw	r24, r28
 a36:	01 96       	adiw	r24, 0x01	; 1
 a38:	0e 94 28 05 	call	0xa50	; 0xa50 <vfprintf>
 a3c:	2f 81       	ldd	r18, Y+7	; 0x07
 a3e:	38 85       	ldd	r19, Y+8	; 0x08
 a40:	f8 01       	movw	r30, r16
 a42:	e2 0f       	add	r30, r18
 a44:	f3 1f       	adc	r31, r19
 a46:	10 82       	st	Z, r1
 a48:	2e 96       	adiw	r28, 0x0e	; 14
 a4a:	e4 e0       	ldi	r30, 0x04	; 4
 a4c:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__epilogue_restores__+0x1c>

00000a50 <vfprintf>:
 a50:	ac e0       	ldi	r26, 0x0C	; 12
 a52:	b0 e0       	ldi	r27, 0x00	; 0
 a54:	ee e2       	ldi	r30, 0x2E	; 46
 a56:	f5 e0       	ldi	r31, 0x05	; 5
 a58:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__prologue_saves__>
 a5c:	7c 01       	movw	r14, r24
 a5e:	6b 01       	movw	r12, r22
 a60:	8a 01       	movw	r16, r20
 a62:	fc 01       	movw	r30, r24
 a64:	17 82       	std	Z+7, r1	; 0x07
 a66:	16 82       	std	Z+6, r1	; 0x06
 a68:	83 81       	ldd	r24, Z+3	; 0x03
 a6a:	81 ff       	sbrs	r24, 1
 a6c:	bd c1       	rjmp	.+890    	; 0xde8 <vfprintf+0x398>
 a6e:	ce 01       	movw	r24, r28
 a70:	01 96       	adiw	r24, 0x01	; 1
 a72:	4c 01       	movw	r8, r24
 a74:	f7 01       	movw	r30, r14
 a76:	93 81       	ldd	r25, Z+3	; 0x03
 a78:	f6 01       	movw	r30, r12
 a7a:	93 fd       	sbrc	r25, 3
 a7c:	85 91       	lpm	r24, Z+
 a7e:	93 ff       	sbrs	r25, 3
 a80:	81 91       	ld	r24, Z+
 a82:	6f 01       	movw	r12, r30
 a84:	88 23       	and	r24, r24
 a86:	09 f4       	brne	.+2      	; 0xa8a <vfprintf+0x3a>
 a88:	ab c1       	rjmp	.+854    	; 0xde0 <vfprintf+0x390>
 a8a:	85 32       	cpi	r24, 0x25	; 37
 a8c:	39 f4       	brne	.+14     	; 0xa9c <vfprintf+0x4c>
 a8e:	93 fd       	sbrc	r25, 3
 a90:	85 91       	lpm	r24, Z+
 a92:	93 ff       	sbrs	r25, 3
 a94:	81 91       	ld	r24, Z+
 a96:	6f 01       	movw	r12, r30
 a98:	85 32       	cpi	r24, 0x25	; 37
 a9a:	29 f4       	brne	.+10     	; 0xaa6 <vfprintf+0x56>
 a9c:	b7 01       	movw	r22, r14
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 aa4:	e7 cf       	rjmp	.-50     	; 0xa74 <vfprintf+0x24>
 aa6:	51 2c       	mov	r5, r1
 aa8:	31 2c       	mov	r3, r1
 aaa:	20 e0       	ldi	r18, 0x00	; 0
 aac:	20 32       	cpi	r18, 0x20	; 32
 aae:	a0 f4       	brcc	.+40     	; 0xad8 <vfprintf+0x88>
 ab0:	8b 32       	cpi	r24, 0x2B	; 43
 ab2:	69 f0       	breq	.+26     	; 0xace <vfprintf+0x7e>
 ab4:	30 f4       	brcc	.+12     	; 0xac2 <vfprintf+0x72>
 ab6:	80 32       	cpi	r24, 0x20	; 32
 ab8:	59 f0       	breq	.+22     	; 0xad0 <vfprintf+0x80>
 aba:	83 32       	cpi	r24, 0x23	; 35
 abc:	69 f4       	brne	.+26     	; 0xad8 <vfprintf+0x88>
 abe:	20 61       	ori	r18, 0x10	; 16
 ac0:	2c c0       	rjmp	.+88     	; 0xb1a <vfprintf+0xca>
 ac2:	8d 32       	cpi	r24, 0x2D	; 45
 ac4:	39 f0       	breq	.+14     	; 0xad4 <vfprintf+0x84>
 ac6:	80 33       	cpi	r24, 0x30	; 48
 ac8:	39 f4       	brne	.+14     	; 0xad8 <vfprintf+0x88>
 aca:	21 60       	ori	r18, 0x01	; 1
 acc:	26 c0       	rjmp	.+76     	; 0xb1a <vfprintf+0xca>
 ace:	22 60       	ori	r18, 0x02	; 2
 ad0:	24 60       	ori	r18, 0x04	; 4
 ad2:	23 c0       	rjmp	.+70     	; 0xb1a <vfprintf+0xca>
 ad4:	28 60       	ori	r18, 0x08	; 8
 ad6:	21 c0       	rjmp	.+66     	; 0xb1a <vfprintf+0xca>
 ad8:	27 fd       	sbrc	r18, 7
 ada:	27 c0       	rjmp	.+78     	; 0xb2a <vfprintf+0xda>
 adc:	30 ed       	ldi	r19, 0xD0	; 208
 ade:	38 0f       	add	r19, r24
 ae0:	3a 30       	cpi	r19, 0x0A	; 10
 ae2:	78 f4       	brcc	.+30     	; 0xb02 <vfprintf+0xb2>
 ae4:	26 ff       	sbrs	r18, 6
 ae6:	06 c0       	rjmp	.+12     	; 0xaf4 <vfprintf+0xa4>
 ae8:	fa e0       	ldi	r31, 0x0A	; 10
 aea:	5f 9e       	mul	r5, r31
 aec:	30 0d       	add	r19, r0
 aee:	11 24       	eor	r1, r1
 af0:	53 2e       	mov	r5, r19
 af2:	13 c0       	rjmp	.+38     	; 0xb1a <vfprintf+0xca>
 af4:	8a e0       	ldi	r24, 0x0A	; 10
 af6:	38 9e       	mul	r3, r24
 af8:	30 0d       	add	r19, r0
 afa:	11 24       	eor	r1, r1
 afc:	33 2e       	mov	r3, r19
 afe:	20 62       	ori	r18, 0x20	; 32
 b00:	0c c0       	rjmp	.+24     	; 0xb1a <vfprintf+0xca>
 b02:	8e 32       	cpi	r24, 0x2E	; 46
 b04:	21 f4       	brne	.+8      	; 0xb0e <vfprintf+0xbe>
 b06:	26 fd       	sbrc	r18, 6
 b08:	6b c1       	rjmp	.+726    	; 0xde0 <vfprintf+0x390>
 b0a:	20 64       	ori	r18, 0x40	; 64
 b0c:	06 c0       	rjmp	.+12     	; 0xb1a <vfprintf+0xca>
 b0e:	8c 36       	cpi	r24, 0x6C	; 108
 b10:	11 f4       	brne	.+4      	; 0xb16 <vfprintf+0xc6>
 b12:	20 68       	ori	r18, 0x80	; 128
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <vfprintf+0xca>
 b16:	88 36       	cpi	r24, 0x68	; 104
 b18:	41 f4       	brne	.+16     	; 0xb2a <vfprintf+0xda>
 b1a:	f6 01       	movw	r30, r12
 b1c:	93 fd       	sbrc	r25, 3
 b1e:	85 91       	lpm	r24, Z+
 b20:	93 ff       	sbrs	r25, 3
 b22:	81 91       	ld	r24, Z+
 b24:	6f 01       	movw	r12, r30
 b26:	81 11       	cpse	r24, r1
 b28:	c1 cf       	rjmp	.-126    	; 0xaac <vfprintf+0x5c>
 b2a:	98 2f       	mov	r25, r24
 b2c:	9f 7d       	andi	r25, 0xDF	; 223
 b2e:	95 54       	subi	r25, 0x45	; 69
 b30:	93 30       	cpi	r25, 0x03	; 3
 b32:	28 f4       	brcc	.+10     	; 0xb3e <vfprintf+0xee>
 b34:	0c 5f       	subi	r16, 0xFC	; 252
 b36:	1f 4f       	sbci	r17, 0xFF	; 255
 b38:	ff e3       	ldi	r31, 0x3F	; 63
 b3a:	f9 83       	std	Y+1, r31	; 0x01
 b3c:	0d c0       	rjmp	.+26     	; 0xb58 <vfprintf+0x108>
 b3e:	83 36       	cpi	r24, 0x63	; 99
 b40:	31 f0       	breq	.+12     	; 0xb4e <vfprintf+0xfe>
 b42:	83 37       	cpi	r24, 0x73	; 115
 b44:	71 f0       	breq	.+28     	; 0xb62 <vfprintf+0x112>
 b46:	83 35       	cpi	r24, 0x53	; 83
 b48:	09 f0       	breq	.+2      	; 0xb4c <vfprintf+0xfc>
 b4a:	5b c0       	rjmp	.+182    	; 0xc02 <vfprintf+0x1b2>
 b4c:	22 c0       	rjmp	.+68     	; 0xb92 <vfprintf+0x142>
 b4e:	f8 01       	movw	r30, r16
 b50:	80 81       	ld	r24, Z
 b52:	89 83       	std	Y+1, r24	; 0x01
 b54:	0e 5f       	subi	r16, 0xFE	; 254
 b56:	1f 4f       	sbci	r17, 0xFF	; 255
 b58:	44 24       	eor	r4, r4
 b5a:	43 94       	inc	r4
 b5c:	51 2c       	mov	r5, r1
 b5e:	54 01       	movw	r10, r8
 b60:	15 c0       	rjmp	.+42     	; 0xb8c <vfprintf+0x13c>
 b62:	38 01       	movw	r6, r16
 b64:	f2 e0       	ldi	r31, 0x02	; 2
 b66:	6f 0e       	add	r6, r31
 b68:	71 1c       	adc	r7, r1
 b6a:	f8 01       	movw	r30, r16
 b6c:	a0 80       	ld	r10, Z
 b6e:	b1 80       	ldd	r11, Z+1	; 0x01
 b70:	26 ff       	sbrs	r18, 6
 b72:	03 c0       	rjmp	.+6      	; 0xb7a <vfprintf+0x12a>
 b74:	65 2d       	mov	r22, r5
 b76:	70 e0       	ldi	r23, 0x00	; 0
 b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x12e>
 b7a:	6f ef       	ldi	r22, 0xFF	; 255
 b7c:	7f ef       	ldi	r23, 0xFF	; 255
 b7e:	c5 01       	movw	r24, r10
 b80:	2c 87       	std	Y+12, r18	; 0x0c
 b82:	0e 94 05 07 	call	0xe0a	; 0xe0a <strnlen>
 b86:	2c 01       	movw	r4, r24
 b88:	83 01       	movw	r16, r6
 b8a:	2c 85       	ldd	r18, Y+12	; 0x0c
 b8c:	2f 77       	andi	r18, 0x7F	; 127
 b8e:	22 2e       	mov	r2, r18
 b90:	17 c0       	rjmp	.+46     	; 0xbc0 <vfprintf+0x170>
 b92:	38 01       	movw	r6, r16
 b94:	f2 e0       	ldi	r31, 0x02	; 2
 b96:	6f 0e       	add	r6, r31
 b98:	71 1c       	adc	r7, r1
 b9a:	f8 01       	movw	r30, r16
 b9c:	a0 80       	ld	r10, Z
 b9e:	b1 80       	ldd	r11, Z+1	; 0x01
 ba0:	26 ff       	sbrs	r18, 6
 ba2:	03 c0       	rjmp	.+6      	; 0xbaa <vfprintf+0x15a>
 ba4:	65 2d       	mov	r22, r5
 ba6:	70 e0       	ldi	r23, 0x00	; 0
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <vfprintf+0x15e>
 baa:	6f ef       	ldi	r22, 0xFF	; 255
 bac:	7f ef       	ldi	r23, 0xFF	; 255
 bae:	c5 01       	movw	r24, r10
 bb0:	2c 87       	std	Y+12, r18	; 0x0c
 bb2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <strnlen_P>
 bb6:	2c 01       	movw	r4, r24
 bb8:	2c 85       	ldd	r18, Y+12	; 0x0c
 bba:	20 68       	ori	r18, 0x80	; 128
 bbc:	22 2e       	mov	r2, r18
 bbe:	83 01       	movw	r16, r6
 bc0:	23 fc       	sbrc	r2, 3
 bc2:	1b c0       	rjmp	.+54     	; 0xbfa <vfprintf+0x1aa>
 bc4:	83 2d       	mov	r24, r3
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	48 16       	cp	r4, r24
 bca:	59 06       	cpc	r5, r25
 bcc:	b0 f4       	brcc	.+44     	; 0xbfa <vfprintf+0x1aa>
 bce:	b7 01       	movw	r22, r14
 bd0:	80 e2       	ldi	r24, 0x20	; 32
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 bd8:	3a 94       	dec	r3
 bda:	f4 cf       	rjmp	.-24     	; 0xbc4 <vfprintf+0x174>
 bdc:	f5 01       	movw	r30, r10
 bde:	27 fc       	sbrc	r2, 7
 be0:	85 91       	lpm	r24, Z+
 be2:	27 fe       	sbrs	r2, 7
 be4:	81 91       	ld	r24, Z+
 be6:	5f 01       	movw	r10, r30
 be8:	b7 01       	movw	r22, r14
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 bf0:	31 10       	cpse	r3, r1
 bf2:	3a 94       	dec	r3
 bf4:	f1 e0       	ldi	r31, 0x01	; 1
 bf6:	4f 1a       	sub	r4, r31
 bf8:	51 08       	sbc	r5, r1
 bfa:	41 14       	cp	r4, r1
 bfc:	51 04       	cpc	r5, r1
 bfe:	71 f7       	brne	.-36     	; 0xbdc <vfprintf+0x18c>
 c00:	e5 c0       	rjmp	.+458    	; 0xdcc <vfprintf+0x37c>
 c02:	84 36       	cpi	r24, 0x64	; 100
 c04:	11 f0       	breq	.+4      	; 0xc0a <vfprintf+0x1ba>
 c06:	89 36       	cpi	r24, 0x69	; 105
 c08:	39 f5       	brne	.+78     	; 0xc58 <vfprintf+0x208>
 c0a:	f8 01       	movw	r30, r16
 c0c:	27 ff       	sbrs	r18, 7
 c0e:	07 c0       	rjmp	.+14     	; 0xc1e <vfprintf+0x1ce>
 c10:	60 81       	ld	r22, Z
 c12:	71 81       	ldd	r23, Z+1	; 0x01
 c14:	82 81       	ldd	r24, Z+2	; 0x02
 c16:	93 81       	ldd	r25, Z+3	; 0x03
 c18:	0c 5f       	subi	r16, 0xFC	; 252
 c1a:	1f 4f       	sbci	r17, 0xFF	; 255
 c1c:	08 c0       	rjmp	.+16     	; 0xc2e <vfprintf+0x1de>
 c1e:	60 81       	ld	r22, Z
 c20:	71 81       	ldd	r23, Z+1	; 0x01
 c22:	07 2e       	mov	r0, r23
 c24:	00 0c       	add	r0, r0
 c26:	88 0b       	sbc	r24, r24
 c28:	99 0b       	sbc	r25, r25
 c2a:	0e 5f       	subi	r16, 0xFE	; 254
 c2c:	1f 4f       	sbci	r17, 0xFF	; 255
 c2e:	2f 76       	andi	r18, 0x6F	; 111
 c30:	72 2e       	mov	r7, r18
 c32:	97 ff       	sbrs	r25, 7
 c34:	09 c0       	rjmp	.+18     	; 0xc48 <vfprintf+0x1f8>
 c36:	90 95       	com	r25
 c38:	80 95       	com	r24
 c3a:	70 95       	com	r23
 c3c:	61 95       	neg	r22
 c3e:	7f 4f       	sbci	r23, 0xFF	; 255
 c40:	8f 4f       	sbci	r24, 0xFF	; 255
 c42:	9f 4f       	sbci	r25, 0xFF	; 255
 c44:	20 68       	ori	r18, 0x80	; 128
 c46:	72 2e       	mov	r7, r18
 c48:	2a e0       	ldi	r18, 0x0A	; 10
 c4a:	30 e0       	ldi	r19, 0x00	; 0
 c4c:	a4 01       	movw	r20, r8
 c4e:	0e 94 48 07 	call	0xe90	; 0xe90 <__ultoa_invert>
 c52:	a8 2e       	mov	r10, r24
 c54:	a8 18       	sub	r10, r8
 c56:	44 c0       	rjmp	.+136    	; 0xce0 <vfprintf+0x290>
 c58:	85 37       	cpi	r24, 0x75	; 117
 c5a:	29 f4       	brne	.+10     	; 0xc66 <vfprintf+0x216>
 c5c:	2f 7e       	andi	r18, 0xEF	; 239
 c5e:	b2 2e       	mov	r11, r18
 c60:	2a e0       	ldi	r18, 0x0A	; 10
 c62:	30 e0       	ldi	r19, 0x00	; 0
 c64:	25 c0       	rjmp	.+74     	; 0xcb0 <vfprintf+0x260>
 c66:	f2 2f       	mov	r31, r18
 c68:	f9 7f       	andi	r31, 0xF9	; 249
 c6a:	bf 2e       	mov	r11, r31
 c6c:	8f 36       	cpi	r24, 0x6F	; 111
 c6e:	c1 f0       	breq	.+48     	; 0xca0 <vfprintf+0x250>
 c70:	18 f4       	brcc	.+6      	; 0xc78 <vfprintf+0x228>
 c72:	88 35       	cpi	r24, 0x58	; 88
 c74:	79 f0       	breq	.+30     	; 0xc94 <vfprintf+0x244>
 c76:	b4 c0       	rjmp	.+360    	; 0xde0 <vfprintf+0x390>
 c78:	80 37       	cpi	r24, 0x70	; 112
 c7a:	19 f0       	breq	.+6      	; 0xc82 <vfprintf+0x232>
 c7c:	88 37       	cpi	r24, 0x78	; 120
 c7e:	21 f0       	breq	.+8      	; 0xc88 <vfprintf+0x238>
 c80:	af c0       	rjmp	.+350    	; 0xde0 <vfprintf+0x390>
 c82:	2f 2f       	mov	r18, r31
 c84:	20 61       	ori	r18, 0x10	; 16
 c86:	b2 2e       	mov	r11, r18
 c88:	b4 fe       	sbrs	r11, 4
 c8a:	0d c0       	rjmp	.+26     	; 0xca6 <vfprintf+0x256>
 c8c:	8b 2d       	mov	r24, r11
 c8e:	84 60       	ori	r24, 0x04	; 4
 c90:	b8 2e       	mov	r11, r24
 c92:	09 c0       	rjmp	.+18     	; 0xca6 <vfprintf+0x256>
 c94:	24 ff       	sbrs	r18, 4
 c96:	0a c0       	rjmp	.+20     	; 0xcac <vfprintf+0x25c>
 c98:	9f 2f       	mov	r25, r31
 c9a:	96 60       	ori	r25, 0x06	; 6
 c9c:	b9 2e       	mov	r11, r25
 c9e:	06 c0       	rjmp	.+12     	; 0xcac <vfprintf+0x25c>
 ca0:	28 e0       	ldi	r18, 0x08	; 8
 ca2:	30 e0       	ldi	r19, 0x00	; 0
 ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <vfprintf+0x260>
 ca6:	20 e1       	ldi	r18, 0x10	; 16
 ca8:	30 e0       	ldi	r19, 0x00	; 0
 caa:	02 c0       	rjmp	.+4      	; 0xcb0 <vfprintf+0x260>
 cac:	20 e1       	ldi	r18, 0x10	; 16
 cae:	32 e0       	ldi	r19, 0x02	; 2
 cb0:	f8 01       	movw	r30, r16
 cb2:	b7 fe       	sbrs	r11, 7
 cb4:	07 c0       	rjmp	.+14     	; 0xcc4 <vfprintf+0x274>
 cb6:	60 81       	ld	r22, Z
 cb8:	71 81       	ldd	r23, Z+1	; 0x01
 cba:	82 81       	ldd	r24, Z+2	; 0x02
 cbc:	93 81       	ldd	r25, Z+3	; 0x03
 cbe:	0c 5f       	subi	r16, 0xFC	; 252
 cc0:	1f 4f       	sbci	r17, 0xFF	; 255
 cc2:	06 c0       	rjmp	.+12     	; 0xcd0 <vfprintf+0x280>
 cc4:	60 81       	ld	r22, Z
 cc6:	71 81       	ldd	r23, Z+1	; 0x01
 cc8:	80 e0       	ldi	r24, 0x00	; 0
 cca:	90 e0       	ldi	r25, 0x00	; 0
 ccc:	0e 5f       	subi	r16, 0xFE	; 254
 cce:	1f 4f       	sbci	r17, 0xFF	; 255
 cd0:	a4 01       	movw	r20, r8
 cd2:	0e 94 48 07 	call	0xe90	; 0xe90 <__ultoa_invert>
 cd6:	a8 2e       	mov	r10, r24
 cd8:	a8 18       	sub	r10, r8
 cda:	fb 2d       	mov	r31, r11
 cdc:	ff 77       	andi	r31, 0x7F	; 127
 cde:	7f 2e       	mov	r7, r31
 ce0:	76 fe       	sbrs	r7, 6
 ce2:	0b c0       	rjmp	.+22     	; 0xcfa <vfprintf+0x2aa>
 ce4:	37 2d       	mov	r19, r7
 ce6:	3e 7f       	andi	r19, 0xFE	; 254
 ce8:	a5 14       	cp	r10, r5
 cea:	50 f4       	brcc	.+20     	; 0xd00 <vfprintf+0x2b0>
 cec:	74 fe       	sbrs	r7, 4
 cee:	0a c0       	rjmp	.+20     	; 0xd04 <vfprintf+0x2b4>
 cf0:	72 fc       	sbrc	r7, 2
 cf2:	08 c0       	rjmp	.+16     	; 0xd04 <vfprintf+0x2b4>
 cf4:	37 2d       	mov	r19, r7
 cf6:	3e 7e       	andi	r19, 0xEE	; 238
 cf8:	05 c0       	rjmp	.+10     	; 0xd04 <vfprintf+0x2b4>
 cfa:	ba 2c       	mov	r11, r10
 cfc:	37 2d       	mov	r19, r7
 cfe:	03 c0       	rjmp	.+6      	; 0xd06 <vfprintf+0x2b6>
 d00:	ba 2c       	mov	r11, r10
 d02:	01 c0       	rjmp	.+2      	; 0xd06 <vfprintf+0x2b6>
 d04:	b5 2c       	mov	r11, r5
 d06:	34 ff       	sbrs	r19, 4
 d08:	0d c0       	rjmp	.+26     	; 0xd24 <vfprintf+0x2d4>
 d0a:	fe 01       	movw	r30, r28
 d0c:	ea 0d       	add	r30, r10
 d0e:	f1 1d       	adc	r31, r1
 d10:	80 81       	ld	r24, Z
 d12:	80 33       	cpi	r24, 0x30	; 48
 d14:	11 f4       	brne	.+4      	; 0xd1a <vfprintf+0x2ca>
 d16:	39 7e       	andi	r19, 0xE9	; 233
 d18:	09 c0       	rjmp	.+18     	; 0xd2c <vfprintf+0x2dc>
 d1a:	32 ff       	sbrs	r19, 2
 d1c:	06 c0       	rjmp	.+12     	; 0xd2a <vfprintf+0x2da>
 d1e:	b3 94       	inc	r11
 d20:	b3 94       	inc	r11
 d22:	04 c0       	rjmp	.+8      	; 0xd2c <vfprintf+0x2dc>
 d24:	83 2f       	mov	r24, r19
 d26:	86 78       	andi	r24, 0x86	; 134
 d28:	09 f0       	breq	.+2      	; 0xd2c <vfprintf+0x2dc>
 d2a:	b3 94       	inc	r11
 d2c:	33 fd       	sbrc	r19, 3
 d2e:	13 c0       	rjmp	.+38     	; 0xd56 <vfprintf+0x306>
 d30:	30 ff       	sbrs	r19, 0
 d32:	06 c0       	rjmp	.+12     	; 0xd40 <vfprintf+0x2f0>
 d34:	5a 2c       	mov	r5, r10
 d36:	b3 14       	cp	r11, r3
 d38:	18 f4       	brcc	.+6      	; 0xd40 <vfprintf+0x2f0>
 d3a:	53 0c       	add	r5, r3
 d3c:	5b 18       	sub	r5, r11
 d3e:	b3 2c       	mov	r11, r3
 d40:	b3 14       	cp	r11, r3
 d42:	68 f4       	brcc	.+26     	; 0xd5e <vfprintf+0x30e>
 d44:	b7 01       	movw	r22, r14
 d46:	80 e2       	ldi	r24, 0x20	; 32
 d48:	90 e0       	ldi	r25, 0x00	; 0
 d4a:	3c 87       	std	Y+12, r19	; 0x0c
 d4c:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 d50:	b3 94       	inc	r11
 d52:	3c 85       	ldd	r19, Y+12	; 0x0c
 d54:	f5 cf       	rjmp	.-22     	; 0xd40 <vfprintf+0x2f0>
 d56:	b3 14       	cp	r11, r3
 d58:	10 f4       	brcc	.+4      	; 0xd5e <vfprintf+0x30e>
 d5a:	3b 18       	sub	r3, r11
 d5c:	01 c0       	rjmp	.+2      	; 0xd60 <vfprintf+0x310>
 d5e:	31 2c       	mov	r3, r1
 d60:	34 ff       	sbrs	r19, 4
 d62:	12 c0       	rjmp	.+36     	; 0xd88 <vfprintf+0x338>
 d64:	b7 01       	movw	r22, r14
 d66:	80 e3       	ldi	r24, 0x30	; 48
 d68:	90 e0       	ldi	r25, 0x00	; 0
 d6a:	3c 87       	std	Y+12, r19	; 0x0c
 d6c:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 d70:	3c 85       	ldd	r19, Y+12	; 0x0c
 d72:	32 ff       	sbrs	r19, 2
 d74:	17 c0       	rjmp	.+46     	; 0xda4 <vfprintf+0x354>
 d76:	31 fd       	sbrc	r19, 1
 d78:	03 c0       	rjmp	.+6      	; 0xd80 <vfprintf+0x330>
 d7a:	88 e7       	ldi	r24, 0x78	; 120
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	02 c0       	rjmp	.+4      	; 0xd84 <vfprintf+0x334>
 d80:	88 e5       	ldi	r24, 0x58	; 88
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	b7 01       	movw	r22, r14
 d86:	0c c0       	rjmp	.+24     	; 0xda0 <vfprintf+0x350>
 d88:	83 2f       	mov	r24, r19
 d8a:	86 78       	andi	r24, 0x86	; 134
 d8c:	59 f0       	breq	.+22     	; 0xda4 <vfprintf+0x354>
 d8e:	31 ff       	sbrs	r19, 1
 d90:	02 c0       	rjmp	.+4      	; 0xd96 <vfprintf+0x346>
 d92:	8b e2       	ldi	r24, 0x2B	; 43
 d94:	01 c0       	rjmp	.+2      	; 0xd98 <vfprintf+0x348>
 d96:	80 e2       	ldi	r24, 0x20	; 32
 d98:	37 fd       	sbrc	r19, 7
 d9a:	8d e2       	ldi	r24, 0x2D	; 45
 d9c:	b7 01       	movw	r22, r14
 d9e:	90 e0       	ldi	r25, 0x00	; 0
 da0:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 da4:	a5 14       	cp	r10, r5
 da6:	38 f4       	brcc	.+14     	; 0xdb6 <vfprintf+0x366>
 da8:	b7 01       	movw	r22, r14
 daa:	80 e3       	ldi	r24, 0x30	; 48
 dac:	90 e0       	ldi	r25, 0x00	; 0
 dae:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 db2:	5a 94       	dec	r5
 db4:	f7 cf       	rjmp	.-18     	; 0xda4 <vfprintf+0x354>
 db6:	aa 94       	dec	r10
 db8:	f4 01       	movw	r30, r8
 dba:	ea 0d       	add	r30, r10
 dbc:	f1 1d       	adc	r31, r1
 dbe:	80 81       	ld	r24, Z
 dc0:	b7 01       	movw	r22, r14
 dc2:	90 e0       	ldi	r25, 0x00	; 0
 dc4:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 dc8:	a1 10       	cpse	r10, r1
 dca:	f5 cf       	rjmp	.-22     	; 0xdb6 <vfprintf+0x366>
 dcc:	33 20       	and	r3, r3
 dce:	09 f4       	brne	.+2      	; 0xdd2 <vfprintf+0x382>
 dd0:	51 ce       	rjmp	.-862    	; 0xa74 <vfprintf+0x24>
 dd2:	b7 01       	movw	r22, r14
 dd4:	80 e2       	ldi	r24, 0x20	; 32
 dd6:	90 e0       	ldi	r25, 0x00	; 0
 dd8:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 ddc:	3a 94       	dec	r3
 dde:	f6 cf       	rjmp	.-20     	; 0xdcc <vfprintf+0x37c>
 de0:	f7 01       	movw	r30, r14
 de2:	86 81       	ldd	r24, Z+6	; 0x06
 de4:	97 81       	ldd	r25, Z+7	; 0x07
 de6:	02 c0       	rjmp	.+4      	; 0xdec <vfprintf+0x39c>
 de8:	8f ef       	ldi	r24, 0xFF	; 255
 dea:	9f ef       	ldi	r25, 0xFF	; 255
 dec:	2c 96       	adiw	r28, 0x0c	; 12
 dee:	e2 e1       	ldi	r30, 0x12	; 18
 df0:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__epilogue_restores__>

00000df4 <strnlen_P>:
 df4:	fc 01       	movw	r30, r24
 df6:	05 90       	lpm	r0, Z+
 df8:	61 50       	subi	r22, 0x01	; 1
 dfa:	70 40       	sbci	r23, 0x00	; 0
 dfc:	01 10       	cpse	r0, r1
 dfe:	d8 f7       	brcc	.-10     	; 0xdf6 <strnlen_P+0x2>
 e00:	80 95       	com	r24
 e02:	90 95       	com	r25
 e04:	8e 0f       	add	r24, r30
 e06:	9f 1f       	adc	r25, r31
 e08:	08 95       	ret

00000e0a <strnlen>:
 e0a:	fc 01       	movw	r30, r24
 e0c:	61 50       	subi	r22, 0x01	; 1
 e0e:	70 40       	sbci	r23, 0x00	; 0
 e10:	01 90       	ld	r0, Z+
 e12:	01 10       	cpse	r0, r1
 e14:	d8 f7       	brcc	.-10     	; 0xe0c <strnlen+0x2>
 e16:	80 95       	com	r24
 e18:	90 95       	com	r25
 e1a:	8e 0f       	add	r24, r30
 e1c:	9f 1f       	adc	r25, r31
 e1e:	08 95       	ret

00000e20 <fputc>:
 e20:	0f 93       	push	r16
 e22:	1f 93       	push	r17
 e24:	cf 93       	push	r28
 e26:	df 93       	push	r29
 e28:	fb 01       	movw	r30, r22
 e2a:	23 81       	ldd	r18, Z+3	; 0x03
 e2c:	21 fd       	sbrc	r18, 1
 e2e:	03 c0       	rjmp	.+6      	; 0xe36 <fputc+0x16>
 e30:	8f ef       	ldi	r24, 0xFF	; 255
 e32:	9f ef       	ldi	r25, 0xFF	; 255
 e34:	28 c0       	rjmp	.+80     	; 0xe86 <fputc+0x66>
 e36:	22 ff       	sbrs	r18, 2
 e38:	16 c0       	rjmp	.+44     	; 0xe66 <fputc+0x46>
 e3a:	46 81       	ldd	r20, Z+6	; 0x06
 e3c:	57 81       	ldd	r21, Z+7	; 0x07
 e3e:	24 81       	ldd	r18, Z+4	; 0x04
 e40:	35 81       	ldd	r19, Z+5	; 0x05
 e42:	42 17       	cp	r20, r18
 e44:	53 07       	cpc	r21, r19
 e46:	44 f4       	brge	.+16     	; 0xe58 <fputc+0x38>
 e48:	a0 81       	ld	r26, Z
 e4a:	b1 81       	ldd	r27, Z+1	; 0x01
 e4c:	9d 01       	movw	r18, r26
 e4e:	2f 5f       	subi	r18, 0xFF	; 255
 e50:	3f 4f       	sbci	r19, 0xFF	; 255
 e52:	31 83       	std	Z+1, r19	; 0x01
 e54:	20 83       	st	Z, r18
 e56:	8c 93       	st	X, r24
 e58:	26 81       	ldd	r18, Z+6	; 0x06
 e5a:	37 81       	ldd	r19, Z+7	; 0x07
 e5c:	2f 5f       	subi	r18, 0xFF	; 255
 e5e:	3f 4f       	sbci	r19, 0xFF	; 255
 e60:	37 83       	std	Z+7, r19	; 0x07
 e62:	26 83       	std	Z+6, r18	; 0x06
 e64:	10 c0       	rjmp	.+32     	; 0xe86 <fputc+0x66>
 e66:	eb 01       	movw	r28, r22
 e68:	09 2f       	mov	r16, r25
 e6a:	18 2f       	mov	r17, r24
 e6c:	00 84       	ldd	r0, Z+8	; 0x08
 e6e:	f1 85       	ldd	r31, Z+9	; 0x09
 e70:	e0 2d       	mov	r30, r0
 e72:	09 95       	icall
 e74:	89 2b       	or	r24, r25
 e76:	e1 f6       	brne	.-72     	; 0xe30 <fputc+0x10>
 e78:	8e 81       	ldd	r24, Y+6	; 0x06
 e7a:	9f 81       	ldd	r25, Y+7	; 0x07
 e7c:	01 96       	adiw	r24, 0x01	; 1
 e7e:	9f 83       	std	Y+7, r25	; 0x07
 e80:	8e 83       	std	Y+6, r24	; 0x06
 e82:	81 2f       	mov	r24, r17
 e84:	90 2f       	mov	r25, r16
 e86:	df 91       	pop	r29
 e88:	cf 91       	pop	r28
 e8a:	1f 91       	pop	r17
 e8c:	0f 91       	pop	r16
 e8e:	08 95       	ret

00000e90 <__ultoa_invert>:
 e90:	fa 01       	movw	r30, r20
 e92:	aa 27       	eor	r26, r26
 e94:	28 30       	cpi	r18, 0x08	; 8
 e96:	51 f1       	breq	.+84     	; 0xeec <__ultoa_invert+0x5c>
 e98:	20 31       	cpi	r18, 0x10	; 16
 e9a:	81 f1       	breq	.+96     	; 0xefc <__ultoa_invert+0x6c>
 e9c:	e8 94       	clt
 e9e:	6f 93       	push	r22
 ea0:	6e 7f       	andi	r22, 0xFE	; 254
 ea2:	6e 5f       	subi	r22, 0xFE	; 254
 ea4:	7f 4f       	sbci	r23, 0xFF	; 255
 ea6:	8f 4f       	sbci	r24, 0xFF	; 255
 ea8:	9f 4f       	sbci	r25, 0xFF	; 255
 eaa:	af 4f       	sbci	r26, 0xFF	; 255
 eac:	b1 e0       	ldi	r27, 0x01	; 1
 eae:	3e d0       	rcall	.+124    	; 0xf2c <__ultoa_invert+0x9c>
 eb0:	b4 e0       	ldi	r27, 0x04	; 4
 eb2:	3c d0       	rcall	.+120    	; 0xf2c <__ultoa_invert+0x9c>
 eb4:	67 0f       	add	r22, r23
 eb6:	78 1f       	adc	r23, r24
 eb8:	89 1f       	adc	r24, r25
 eba:	9a 1f       	adc	r25, r26
 ebc:	a1 1d       	adc	r26, r1
 ebe:	68 0f       	add	r22, r24
 ec0:	79 1f       	adc	r23, r25
 ec2:	8a 1f       	adc	r24, r26
 ec4:	91 1d       	adc	r25, r1
 ec6:	a1 1d       	adc	r26, r1
 ec8:	6a 0f       	add	r22, r26
 eca:	71 1d       	adc	r23, r1
 ecc:	81 1d       	adc	r24, r1
 ece:	91 1d       	adc	r25, r1
 ed0:	a1 1d       	adc	r26, r1
 ed2:	20 d0       	rcall	.+64     	; 0xf14 <__ultoa_invert+0x84>
 ed4:	09 f4       	brne	.+2      	; 0xed8 <__ultoa_invert+0x48>
 ed6:	68 94       	set
 ed8:	3f 91       	pop	r19
 eda:	2a e0       	ldi	r18, 0x0A	; 10
 edc:	26 9f       	mul	r18, r22
 ede:	11 24       	eor	r1, r1
 ee0:	30 19       	sub	r19, r0
 ee2:	30 5d       	subi	r19, 0xD0	; 208
 ee4:	31 93       	st	Z+, r19
 ee6:	de f6       	brtc	.-74     	; 0xe9e <__ultoa_invert+0xe>
 ee8:	cf 01       	movw	r24, r30
 eea:	08 95       	ret
 eec:	46 2f       	mov	r20, r22
 eee:	47 70       	andi	r20, 0x07	; 7
 ef0:	40 5d       	subi	r20, 0xD0	; 208
 ef2:	41 93       	st	Z+, r20
 ef4:	b3 e0       	ldi	r27, 0x03	; 3
 ef6:	0f d0       	rcall	.+30     	; 0xf16 <__ultoa_invert+0x86>
 ef8:	c9 f7       	brne	.-14     	; 0xeec <__ultoa_invert+0x5c>
 efa:	f6 cf       	rjmp	.-20     	; 0xee8 <__ultoa_invert+0x58>
 efc:	46 2f       	mov	r20, r22
 efe:	4f 70       	andi	r20, 0x0F	; 15
 f00:	40 5d       	subi	r20, 0xD0	; 208
 f02:	4a 33       	cpi	r20, 0x3A	; 58
 f04:	18 f0       	brcs	.+6      	; 0xf0c <__ultoa_invert+0x7c>
 f06:	49 5d       	subi	r20, 0xD9	; 217
 f08:	31 fd       	sbrc	r19, 1
 f0a:	40 52       	subi	r20, 0x20	; 32
 f0c:	41 93       	st	Z+, r20
 f0e:	02 d0       	rcall	.+4      	; 0xf14 <__ultoa_invert+0x84>
 f10:	a9 f7       	brne	.-22     	; 0xefc <__ultoa_invert+0x6c>
 f12:	ea cf       	rjmp	.-44     	; 0xee8 <__ultoa_invert+0x58>
 f14:	b4 e0       	ldi	r27, 0x04	; 4
 f16:	a6 95       	lsr	r26
 f18:	97 95       	ror	r25
 f1a:	87 95       	ror	r24
 f1c:	77 95       	ror	r23
 f1e:	67 95       	ror	r22
 f20:	ba 95       	dec	r27
 f22:	c9 f7       	brne	.-14     	; 0xf16 <__ultoa_invert+0x86>
 f24:	00 97       	sbiw	r24, 0x00	; 0
 f26:	61 05       	cpc	r22, r1
 f28:	71 05       	cpc	r23, r1
 f2a:	08 95       	ret
 f2c:	9b 01       	movw	r18, r22
 f2e:	ac 01       	movw	r20, r24
 f30:	0a 2e       	mov	r0, r26
 f32:	06 94       	lsr	r0
 f34:	57 95       	ror	r21
 f36:	47 95       	ror	r20
 f38:	37 95       	ror	r19
 f3a:	27 95       	ror	r18
 f3c:	ba 95       	dec	r27
 f3e:	c9 f7       	brne	.-14     	; 0xf32 <__ultoa_invert+0xa2>
 f40:	62 0f       	add	r22, r18
 f42:	73 1f       	adc	r23, r19
 f44:	84 1f       	adc	r24, r20
 f46:	95 1f       	adc	r25, r21
 f48:	a0 1d       	adc	r26, r0
 f4a:	08 95       	ret

00000f4c <__prologue_saves__>:
 f4c:	2f 92       	push	r2
 f4e:	3f 92       	push	r3
 f50:	4f 92       	push	r4
 f52:	5f 92       	push	r5
 f54:	6f 92       	push	r6
 f56:	7f 92       	push	r7
 f58:	8f 92       	push	r8
 f5a:	9f 92       	push	r9
 f5c:	af 92       	push	r10
 f5e:	bf 92       	push	r11
 f60:	cf 92       	push	r12
 f62:	df 92       	push	r13
 f64:	ef 92       	push	r14
 f66:	ff 92       	push	r15
 f68:	0f 93       	push	r16
 f6a:	1f 93       	push	r17
 f6c:	cf 93       	push	r28
 f6e:	df 93       	push	r29
 f70:	cd b7       	in	r28, 0x3d	; 61
 f72:	de b7       	in	r29, 0x3e	; 62
 f74:	ca 1b       	sub	r28, r26
 f76:	db 0b       	sbc	r29, r27
 f78:	0f b6       	in	r0, 0x3f	; 63
 f7a:	f8 94       	cli
 f7c:	de bf       	out	0x3e, r29	; 62
 f7e:	0f be       	out	0x3f, r0	; 63
 f80:	cd bf       	out	0x3d, r28	; 61
 f82:	09 94       	ijmp

00000f84 <__epilogue_restores__>:
 f84:	2a 88       	ldd	r2, Y+18	; 0x12
 f86:	39 88       	ldd	r3, Y+17	; 0x11
 f88:	48 88       	ldd	r4, Y+16	; 0x10
 f8a:	5f 84       	ldd	r5, Y+15	; 0x0f
 f8c:	6e 84       	ldd	r6, Y+14	; 0x0e
 f8e:	7d 84       	ldd	r7, Y+13	; 0x0d
 f90:	8c 84       	ldd	r8, Y+12	; 0x0c
 f92:	9b 84       	ldd	r9, Y+11	; 0x0b
 f94:	aa 84       	ldd	r10, Y+10	; 0x0a
 f96:	b9 84       	ldd	r11, Y+9	; 0x09
 f98:	c8 84       	ldd	r12, Y+8	; 0x08
 f9a:	df 80       	ldd	r13, Y+7	; 0x07
 f9c:	ee 80       	ldd	r14, Y+6	; 0x06
 f9e:	fd 80       	ldd	r15, Y+5	; 0x05
 fa0:	0c 81       	ldd	r16, Y+4	; 0x04
 fa2:	1b 81       	ldd	r17, Y+3	; 0x03
 fa4:	aa 81       	ldd	r26, Y+2	; 0x02
 fa6:	b9 81       	ldd	r27, Y+1	; 0x01
 fa8:	ce 0f       	add	r28, r30
 faa:	d1 1d       	adc	r29, r1
 fac:	0f b6       	in	r0, 0x3f	; 63
 fae:	f8 94       	cli
 fb0:	de bf       	out	0x3e, r29	; 62
 fb2:	0f be       	out	0x3f, r0	; 63
 fb4:	cd bf       	out	0x3d, r28	; 61
 fb6:	ed 01       	movw	r28, r26
 fb8:	08 95       	ret

00000fba <_exit>:
 fba:	f8 94       	cli

00000fbc <__stop_program>:
 fbc:	ff cf       	rjmp	.-2      	; 0xfbc <__stop_program>
